{"version":3,"sources":["ControlBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["noSleep","NoSleep","ControlBar","props","setAppState","appState","setIsFullScreen","isFullScreen","channel","changeState","newState","totalState","prevState","postMessage","instruction","state","Grid","container","direction","alignItems","ButtonGroup","orientation","aria-label","Tooltip","title","Button","variant","onClick","pickColor","color","ColorLens","lockMonitor","disable","enable","DesktopWindows","document","fullscreenElement","exitFullscreen","documentElement","requestFullscreen","Fullscreen","name","key","backgroundColor","onChangeComplete","hex","App","useState","BroadcastChannel","useEffect","handleMessage","e","data","querySelector","style","removeEventListener","addEventListener","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.45128854.chunk.js","sourcesContent":["import React from \"react\";\nimport { Grid, Button, ButtonGroup, Tooltip } from '@material-ui/core';\nimport { AppState } from './App';\n// @ts-ignore\nimport { SketchPicker } from 'react-color';\nimport { Fullscreen, DesktopWindows, ColorLens } from '@material-ui/icons';\nimport NoSleep from 'nosleep.js';\n\ninterface Props {\n    appState: AppState,\n    setAppState: any,\n    isFullScreen: boolean,\n    setIsFullScreen: any,\n    channel: BroadcastChannel,\n}\n\nconst noSleep = new NoSleep();\n\nexport const ControlBar = (props: Props) => { \n  const { setAppState, appState, setIsFullScreen, isFullScreen, channel } = props;\n\n  const changeState = (newState: Partial<AppState>) => {\n    const totalState = { ...appState, ...newState };\n    setAppState((prevState: AppState) => { return { ...prevState, ...totalState} });\n    channel.postMessage({ instruction: \"setState\", state: totalState});\n  };\n  const toggleFullScreen = () => {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen();\n    } else if (document.exitFullscreen) {\n      document.exitFullscreen(); \n    }\n    setIsFullScreen(!document.fullscreenElement);\n  }\n  const toggleLockMonitor = (lockMonitor: boolean) => {\n    if (lockMonitor) {\n      noSleep.disable();\n    } else {\n      noSleep.enable();\n    }\n    changeState({ lockMonitor });\n  }\n  \n  return <Grid\n    container\n    direction=\"row\"\n    alignItems=\"flex-start\"\n  >\n    <ButtonGroup orientation=\"vertical\" aria-label=\"outlined button group\">\n      <Tooltip title=\"Pick Color\">\n        <Button\n          variant=\"outlined\"\n          onClick={() => changeState({ pickColor: !appState.pickColor })}\n          color={appState.pickColor?\"primary\":\"default\"}\n        >\n          <ColorLens />\n        </Button>\n      </Tooltip>\n      <Tooltip title=\"Lock Monitor\">\n        <Button\n          variant=\"outlined\"\n          onClick={() => toggleLockMonitor(!appState.lockMonitor)}\n          color={appState.lockMonitor?\"primary\":\"default\"}\n        >\n          <DesktopWindows />\n        </Button>\n      </Tooltip>\n      <Tooltip title=\"Fullscreen\">\n        <Button\n          variant=\"outlined\"\n          onClick={toggleFullScreen}\n          color={isFullScreen?\"primary\":\"default\"}\n        >\n          <Fullscreen />\n        </Button>\n      </Tooltip>\n    </ButtonGroup>\n    {appState.pickColor && <SketchPicker\n      name='colorPicker'\n      key='colorPicker'\n      color={appState.backgroundColor}\n      onChangeComplete={(color: any) => changeState({ backgroundColor: color.hex })}\n    />}\n  </Grid>\n};","import React, { useState, useEffect } from \"react\";\nimport { ControlBar } from './ControlBar';\n\nexport interface AppState {\n  backgroundColor: string;\n  pickColor: boolean;\n  lockMonitor: boolean;\n}\n\nexport const App = () => { \n  const [appState, setAppState] = useState({\n    backgroundColor: '#FFFFFF',\n    pickColor: false,\n    lockMonitor: false\n  });\n  const [isFullScreen, setIsFullScreen] =  useState(!!document.fullscreenElement);\n  const channel: BroadcastChannel = new BroadcastChannel('lightscreen');\n  \n  useEffect(() => {\n    channel.postMessage({ instruction: \"getState\" });\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const handleMessage = (e: MessageEvent) => { \n      if (e.data.instruction === \"getState\") {\n        channel.postMessage({ instruction: \"setState\", state: appState });\n      } else if (e.data.instruction === \"setState\") {\n        document.querySelector(\"body\")!.style.backgroundColor = e.data.state.backgroundColor;\n        setAppState(prevState => { return { ...prevState, ...e.data.state} });\n        channel.removeEventListener('message', handleMessage);\n      }\n    }\n\n    channel.addEventListener('message', handleMessage);\n    return () => {\n      channel.removeEventListener('message', handleMessage);\n    }\n  }, [appState, channel]);\n\n  return <ControlBar\n    appState={appState}\n    setAppState={setAppState}\n    isFullScreen={isFullScreen}\n    setIsFullScreen={setIsFullScreen}\n    channel={channel}\n  />\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}