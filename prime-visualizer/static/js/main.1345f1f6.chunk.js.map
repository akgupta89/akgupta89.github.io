{"version":3,"sources":["components/ControlPanel.jsx","components/Canvas.jsx","utils/Canvas.jsx","serviceWorker.js","index.jsx","App.jsx"],"names":["useStyles","makeStyles","theme","root","display","backgroundColor","boxShadow","position","left","bottom","margin","spacing","width","ControlPanel","props","classes","canvasState","setCanvasState","resetPosition","angleDelta","traceRoute","callAction","e","persist","prevState","target","name","val","parseFloat","value","min","max","Math","Paper","className","TextField","type","size","label","variant","defaultValue","onInput","onChange","inputProps","Button","color","onClick","Canvas","this","canvasRef","current","addEventListener","pointerEvent","updateScale","window","removeEventListener","id","key","ref","innerWidth","height","innerHeight","React","Component","dataLogger","pointers","previousDistance","createPointer","pointerId","x","clientX","y","clientY","idx","findIndex","pointer","length","currentDistance","abs","deltaY","xPosition","xHome","yPosition","yHome","splice","push","preventDefault","diff","scale","Boolean","location","hostname","match","ReactDOM","render","useRef","useState","mouseDown","useEffect","primes","canvas","ctx","getContext","lastPosition","points","floor","clearRect","beginPath","lineWidth","strokeStyle","font","fillStyle","i","xOffset","yOffset","xPos","yPos","gridValueX","toFixed","gridValueY","moveTo","lineTo","textAlign","fillText","stroke","currentAngle","forEach","prime","cos","PI","sin","blipGradient","createRadialGradient","addColorStop","point","arc","fill","totalBends","sqrt","pow","draw","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1345f1f6.chunk.js","sourcesContent":["import React from \"react\";\nimport { TextField, Button, Paper, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"inline-block\",\n    backgroundColor: \"transparent\",\n    boxShadow: \"none\",\n    position: \"absolute\",\n    left: \"10px\",\n    bottom: \"10px\",\n    \"& > *\": {\n      margin: theme.spacing(1),\n      width: \"25ch\",\n    },\n  },\n}));\n\nexport function ControlPanel(props) {\n  const classes = useStyles();\n  const { canvasState, setCanvasState, resetPosition } = props;\n  const { angleDelta, traceRoute } = canvasState;\n  const boundValue = (val, min, max) => Math.max(Math.min(val, max), min);\n  const callAction = (e) => {\n    e.persist();\n    return setCanvasState((prevState) => {\n      return {\n        ...prevState,\n        [e.target.name]: boundValue(\n          parseFloat(e.target.value),\n          e.target.min,\n          e.target.max\n        ),\n      };\n    });\n  };\n\n  return (\n    <Paper className={classes.root}>\n      <TextField\n        name=\"angleDelta\"\n        type=\"number\"\n        size=\"small\"\n        label=\"Angle Delta\"\n        variant=\"outlined\"\n        defaultValue={angleDelta}\n        onInput={callAction}\n        onChange={callAction}\n        inputProps={{\n          min: \"0\",\n          max: \"360\",\n        }}\n      />\n      <TextField\n        name=\"traceRoute\"\n        type=\"number\"\n        size=\"small\"\n        label=\"Trace Route\"\n        variant=\"outlined\"\n        defaultValue={traceRoute}\n        onInput={callAction}\n        onChange={callAction}\n        inputProps={{\n          min: \"0\",\n          max: \"36\",\n        }}\n      />\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={(e) => resetPosition(e, setCanvasState)}\n      >\n        Recenter\n      </Button>\n    </Paper>\n  );\n}\n","import React from \"react\";\n\nexport class Canvas extends React.Component {\n  componentDidMount() {\n    const setCanvasState = this.props.setCanvasState;\n\n    if (this.props.canvasRef.current) {\n      this.props.canvasRef.current.addEventListener(\"pointerdown\", (e) =>\n        this.props.pointerEvent(e, setCanvasState)\n      );\n      this.props.canvasRef.current.addEventListener(\"pointermove\", (e) =>\n        this.props.pointerEvent(e, setCanvasState)\n      );\n      this.props.canvasRef.current.addEventListener(\"pointercancel\", (e) =>\n        this.props.pointerEvent(e, setCanvasState)\n      );\n      this.props.canvasRef.current.addEventListener(\"pointerout\", (e) =>\n        this.props.pointerEvent(e, setCanvasState)\n      );\n      this.props.canvasRef.current.addEventListener(\"pointerup\", (e) =>\n        this.props.pointerEvent(e, setCanvasState)\n      );\n      this.props.canvasRef.current.addEventListener(\"wheel\", (e) =>\n        this.props.updateScale(e, setCanvasState)\n      );\n      window.addEventListener(\"resize\", (e) =>\n        this.props.resetPosition(e, setCanvasState)\n      );\n    }\n\n    return () => {\n      if (this.props.canvasRef.current) {\n        this.props.canvasRef.current.removeEventListener(\"pointerdown\", (e) =>\n          this.props.pointerEvent(e, setCanvasState)\n        );\n        this.props.canvasRef.current.removeEventListener(\"pointermove\", (e) =>\n          this.props.pointerEvent(e, setCanvasState)\n        );\n        this.props.canvasRef.current.removeEventListener(\"pointercancel\", (e) =>\n          this.props.pointerEvent(e, setCanvasState)\n        );\n        this.props.canvasRef.current.removeEventListener(\"pointerout\", (e) =>\n          this.props.pointerEvent(e, setCanvasState)\n        );\n        this.props.canvasRef.current.removeEventListener(\"pointerup\", (e) =>\n          this.props.pointerEvent(e, setCanvasState)\n        );\n        this.props.canvasRef.current.removeEventListener(\"wheel\", (e) =>\n          this.props.updateScale(e, setCanvasState)\n        );\n        window.removeEventListener(\"resize\", (e) =>\n          this.props.resetPosition(e, setCanvasState)\n        );\n      }\n    };\n  }\n\n  // static logText(text) {\n  //   document.getElementById(\"log\").innerText = JSON.stringify(text);\n  // }\n\n  render() {\n    return (\n      <canvas\n        id=\"canvas\"\n        key=\"static-canvas\"\n        ref={this.props.canvasRef}\n        width={window.innerWidth}\n        height={window.innerHeight}\n      ></canvas>\n    );\n  }\n}\n","const dataLogger = [];\nconst pointers = [];\nlet previousDistance = -1;\n\nconst createPointer = (e) => {\n  return {\n    id: e.pointerId,\n    x: e.clientX,\n    y: e.clientY,\n  };\n};\n\nexport const pointerEvent = function (e, setCanvasState) {\n  const idx = pointers.findIndex((pointer) => pointer.id === e.pointerId);\n\n  if (e.type === \"pointermove\" && idx >= 0) {\n    if (pointers.length === 2) {\n      const currentDistance = Math.abs(pointers[0].x - pointers[1].x);\n      if (previousDistance > 0) {\n        e.deltaY = currentDistance - previousDistance;\n        updateScale(e, setCanvasState);\n      }\n      previousDistance = currentDistance;\n    } else {\n      setCanvasState((prevState) => {\n        return {\n          ...prevState,\n          xPosition: prevState.xHome + (e.clientX - pointers[idx].x),\n          yPosition: prevState.yHome + (e.clientY - pointers[idx].y),\n          xHome: prevState.xHome + (e.clientX - pointers[idx].x),\n          yHome: prevState.yHome + (e.clientY - pointers[idx].y),\n        };\n      });\n    }\n    pointers.splice(idx, 1, createPointer(e));\n  } else if (e.type !== \"pointermove\") {\n    if (e.type === \"pointerdown\") {\n      pointers.push(createPointer(e));\n    } else if (idx >= 0) {\n      pointers.splice(idx, 1);\n      setCanvasState((prevState) => {\n        return {\n          ...prevState,\n          xHome: prevState.xPosition,\n          yHome: prevState.yPosition,\n        };\n      });\n    }\n  }\n};\n\nexport const updateScale = (e, setCanvasState) => {\n  e.preventDefault();\n  setCanvasState((prevState) => {\n    const diff =\n      prevState.scale -\n      (e.deltaY / Math.abs(e.deltaY)) * (prevState.scale / 10);\n    return {\n      ...prevState,\n      scale: 0.001 < diff && diff < 10 ? diff : prevState.scale,\n    };\n  });\n};\n\nexport const resetPosition = (e, setCanvasState) =>\n  setCanvasState((prevState) => {\n    return {\n      ...prevState,\n      xPosition: 0,\n      yPosition: 0,\n      xHome: 0,\n      yHome: 0,\n    };\n  });\n\nexport const draw = (canvasRef, canvasState, primes) => {\n  const canvas = canvasRef.current;\n  const ctx = canvas.getContext(\"2d\");\n  const { angleDelta, scale, traceRoute } = canvasState;\n  const lastPosition = {\n    x: canvasState.xPosition + window.innerWidth / 2,\n    y: canvasState.yPosition + window.innerHeight / 2,\n  };\n  const points = [];\n\n  pointers.y = Math.floor(canvas.height / 2);\n  pointers.x = Math.floor(canvas.width / 2);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.beginPath();\n\n  {\n    // draw grid\n    ctx.beginPath();\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = \"#CCC\";\n    ctx.font = \"12px arial\";\n    ctx.fillStyle = \"#AAA\";\n    const gridSize = 150;\n    const gridCount = 10;\n\n    for (let i = -gridCount; i < gridCount; i++) {\n      const xOffset = Math.floor(canvasState.xPosition / gridSize);\n      const yOffset = Math.floor(canvasState.yPosition / gridSize);\n      const xPos = gridSize * (i - xOffset) + lastPosition.x;\n      const yPos = gridSize * (i - yOffset) + lastPosition.y;\n      const gridValueX = ((gridSize * (i - yOffset)) / scale).toFixed(2);\n      const gridValueY = ((gridSize * (i - xOffset)) / scale).toFixed(2);\n\n      ctx.moveTo(xPos, 0);\n      ctx.lineTo(xPos, canvas.height);\n      ctx.moveTo(0, yPos);\n      ctx.lineTo(canvas.width, yPos);\n\n      ctx.textAlign = \"left\";\n      ctx.fillText(`${gridValueY}`, xPos + 20, 20);\n      ctx.fillText(`${gridValueY}`, xPos + 20, canvas.height - 10);\n      ctx.fillText(`${-gridValueX}`, 10, yPos + 20);\n      ctx.textAlign = \"right\";\n      ctx.fillText(`${-gridValueX}`, canvas.width - 10, yPos + 20);\n    }\n\n    ctx.stroke();\n  }\n\n  {\n    // draw prime lines\n    ctx.beginPath();\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = \"rgba(0,0,255,.2)\";\n    ctx.moveTo(lastPosition.x, lastPosition.y);\n    let currentAngle = 0;\n    points.push({ ...lastPosition });\n    primes.forEach((prime) => {\n      currentAngle += angleDelta;\n      lastPosition.x +=\n        prime * Math.cos((currentAngle * Math.PI) / 180) * scale;\n      lastPosition.y -=\n        prime * Math.sin((currentAngle * Math.PI) / 180) * scale;\n      ctx.lineTo(lastPosition.x, lastPosition.y);\n      points.push({ ...lastPosition });\n    });\n    ctx.stroke();\n  }\n\n  {\n    // draw prime blips\n    const blipGradient = ctx.createRadialGradient(\n      canvasState.xPosition + window.innerWidth / 2,\n      canvasState.yPosition + window.innerHeight / 2,\n      0,\n      canvasState.xPosition + window.innerWidth / 2,\n      canvasState.yPosition + window.innerHeight / 2,\n      20000 * scale\n    );\n    blipGradient.addColorStop(0, \"blue\");\n    blipGradient.addColorStop(0.5, \"purple\");\n    blipGradient.addColorStop(1, \"red\");\n    ctx.beginPath();\n    ctx.lineWidth = 1;\n    ctx.fillStyle = blipGradient;\n    points.forEach((point) => {\n      ctx.moveTo(point.x, point.y);\n      ctx.arc(point.x, point.y, 3, 0, 2 * Math.PI);\n    });\n    ctx.fill();\n    // ctx.stroke();\n  }\n\n  {\n    // draw tracer\n    ctx.beginPath();\n    ctx.lineWidth = 2;\n    ctx.strokeStyle = \"green\";\n    ctx.moveTo(points[0].x, points[0].y);\n    const totalBends = Math.floor(360 / angleDelta);\n    let location = traceRoute;\n\n    while (location < points.length) {\n      ctx.lineTo(points[location].x, points[location].y);\n      if (location - totalBends >= 0) {\n        dataLogger.push(\n          Math.sqrt(\n            Math.pow(points[location - totalBends].y - points[location].y, 2) +\n              Math.pow(points[location - totalBends].x - points[location].x, 2)\n          )\n        );\n      }\n      location += totalBends;\n    }\n\n    ctx.stroke();\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { ControlPanel } from \"./components/ControlPanel\";\nimport { Canvas } from \"./components/Canvas\";\nimport { pointerEvent, updateScale, resetPosition, draw } from \"./utils/Canvas\";\nimport primes from \"./primes.json\";\nimport \"./App.css\";\n\nexport default function App() {\n  const canvasRef = useRef(null);\n  const [canvasState, setCanvasState] = useState({\n    xPosition: 0,\n    yPosition: 0,\n    xHome: 0,\n    yHome: 0,\n    scale: 1,\n    angleDelta: 36,\n    traceRoute: 0,\n    mouseDown: false,\n  });\n\n  useEffect(() => {\n    draw(canvasRef, canvasState, primes);\n  });\n\n  return (\n    <div className=\"App\">\n      <div id=\"container\">\n        <Canvas\n          canvasRef={canvasRef}\n          setCanvasState={setCanvasState}\n          resetPosition={resetPosition}\n          pointerEvent={pointerEvent}\n          updateScale={updateScale}\n        />\n        <ControlPanel\n          canvasState={canvasState}\n          setCanvasState={setCanvasState}\n          resetPosition={resetPosition}\n        />\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}