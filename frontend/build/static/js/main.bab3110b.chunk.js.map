{"version":3,"sources":["config.js","helpers/routeCalculations.js","helpers/mapGeometry.js","UIConstants.js","actions/index.js","components/MapShield.jsx","components/MapSpider.jsx","components/RouteTable.jsx","components/AppBarLogo.jsx","reducers/page.js","components/SidebarButton.jsx","reducers/loadingReducer.js","reducers/titleReducer.js","reducers/index.js","routesMap.js","helpers/dateTime.js","components/DateTimePopover.jsx","components/DateTimePanel.jsx","screens/Dashboard.jsx","helpers/graphData.js","components/InfoByDay.jsx","components/InfoIntervalsOfDay.jsx","components/InfoJourneyChart.jsx","components/InfoScoreCard.jsx","components/InfoScoreLegend.jsx","components/InfoTripSummary.jsx","components/Info.jsx","components/MapStops.jsx","components/ReactSelect.jsx","components/ControlPanel.jsx","components/TravelTimeChart.jsx","components/MareyChart.jsx","components/RouteSummary.jsx","screens/RouteScreen.jsx","components/QuadrantChart.jsx","screens/DataDiagnostic.jsx","screens/Isochrone.jsx","App.jsx","components/About.jsx","components/Landing.jsx","components/NotFound.jsx","store.js","index.js"],"names":["MetricsBaseURL","process","config","window","OpentransitConfig","Error","S3Bucket","Agencies","PrecomputedStatsVersion","RoutesVersion","ArrivalsVersion","agenciesMap","getAgency","agencyId","forEach","agency","id","isIgnoredRoute","route","routeHeuristics","ignoreRoute","filterRoutes","routes","filter","metersToMiles","meters","computeScores","medianWait","onTimeRate","speed","variability","medianWaitScoreScale","d3","domain","rangeRound","clamp","onTimeRateScoreScale","speedScoreScale","variabilityScoreScale","medianWaitScore","onTimeRateScore","speedScore","travelVarianceScore","totalScore","Math","round","HighestPossibleScore","backgroundColorScale","range","red","yellow","lightGreen","green","scoreBackgroundColor","score","Number","isNaN","contrastColorScale","scoreContrastColor","milesBetween","p1","p2","degLatStop","degLonStop","degLatBus","degLonBus","map","x","PI","radLatStop","radLonStop","radLatBus","latDiff","lonDiff","a","sin","cos","atan2","sqrt","haverDistance","lat","lon","addRanks","statsArr","property","sortFactor","rankProperty","rankCountProperty","rankedStats","stats","sort","b","rankCount","length","index","getDownstreamStopIds","routeInfo","dirInfo","stopId","stopsList","stops","secondStopListIndex","indexOf","isLoopRoute","loop","oneWaySecondStopsList","slice","concat","getTripPoints","fromStop","toStop","fromStopInfo","toStopInfo","fromStopGeometry","stop_geometry","toStopGeometry","tripPoints","push","coords","startIndex","after_index","i","stopIds","fromStopIndex","toStopIndex","getDistanceInMiles","distance","miles","numStops","isInServiceArea","latLng","point","turf","lng","serviceArea","features","some","feature","Colors","GRAY","grey","GRAY_DARK","PURPLE","deepPurple","PURPLE_DARK","BLUE","RED","GREEN","CHART_COLORS","PLANNING_PERCENTILE","TENTH_PERCENTILE","REACT_VIS_CROSSHAIR_NO_LINE","line","background","TIME_RANGE_ALL_DAY","TIME_RANGES","value","shortLabel","restOfLabel","MAX_DATE_RANGE","DATE_RANGES","label","WEEKDAYS","WEEKENDS","DWELL_THRESHOLD_SECS","computeDates","dateRangeParams","endMoment","Moment","date","startMoment","startDate","deltaDays","diff","numberOfDaysBack","abs","dates","daysOfTheWeek","day","format","add","generateRoutesURL","generateArrivalsURL","dateStr","routeId","replace","fetchTripMetrics","params","dispatch","firstDays","firstDateRange","secondDays","secondDateRange","query","queryParams","Object","assign","startTime","endTime","dates2","startTime2","endTime2","type","axios","get","variables","JSON","stringify","baseURL","then","response","responseData","data","errors","error","message","agencyMetrics","routeMetrics","tripMetrics","trip","catch","err","errStr","resetTripMetrics","fetchRoutes","getState","fetchRouteMetrics","variablesJson","fetchAgencyMetrics","fetchArrivals","s3Url","arrivals","url","resetArrivals","handleSpiderMapClick","handleGraphParams","oldParams","graphParams","directionId","startStopId","endStopId","MapShield","props","routeText","color","waitScaled","html","r","endsWith","ValidLocationAlert","Snackbar","open","showAlert","MapSpider","routeColorOptions","SpiderOriginMarker","latlng","spiderLatLng","Marker","position","draggable","onMove","e","onMoveEnd","handleLocationFound","getRouteColor","startMarker","routeIndex","generateShield","lastStop","downstreamStops","shieldPosition","icon","L","divIcon","className","key","direction","riseOnHover","onClick","originalEvent","view","DomEvent","stopPropagation","payload","getStartMarkers","items","selectedStops","spiderSelection","stop","CircleMarker","center","radius","fillColor","fillOpacity","stroke","Tooltip","routeTitle","title","DownstreamLines","statsByRouteId","polylines","waitRankCount","trunc","waitRank","generatePolyline","generateTerminalCircle","terminalPosition","computedWeight","Polyline","positions","opacity","weight","onMouseOver","target","setStyle","onFocus","onMouseOut","onBlur","handleGeoLocate","preventDefault","mapRef","current","leafletElement","locate","handleMapClick","state","isValidLocation","height","computeHeight","createRef","bind","this","boundUpdate","updateDimensions","addEventListener","removeEventListener","setState","innerWidth","innerHeight","findStops","addDownstreamStops","onSpiderMapClick","targetStop","unshift","latLon","stopsByRouteAndDir","filteredRoutes","directions","stopList","nearest","findNearestStop","stopHash","zoom","mapClass","width","startMarkers","Map","initialMapCenter","initialMapZoom","style","minZoom","maxZoom","onLocationfound","ref","TileLayer","attribution","Button","variant","Component","connect","location","EnhancedTableHead","order","orderBy","onRequestSort","columns","TableHead","TableRow","column","TableCell","align","numeric","padding","paddingRight","paddingBottom","sortDirection","TableSortLabel","active","event","useToolbarStyles","makeStyles","theme","root","paddingLeft","spacing","highlight","palette","secondary","main","backgroundColor","lighten","light","text","primary","dark","spacer","flex","actions","popover","maxWidth","EnhancedTableToolbar","classes","numSelected","useState","anchorEl","setAnchorEl","Toolbar","clsx","Typography","IconButton","size","currentTarget","fontSize","aria-label","Popover","Boolean","onClose","anchorOrigin","vertical","horizontal","transformOrigin","helpContent","useStyles","marginTop","tableWrapper","overflowX","makeChip","Chip","React","setOrder","setOrderBy","useTheme","spiderStops","spiderRouteIds","spider","myRoute","includes","displayedRouteStats","rowValue","row","textDecoration","to","medianWaitTime","toFixed","averageSpeed","travelTimeVariability","Table","aria-labelledby","rowCount","TableBody","array","sortOrder","reverse","cmp","factor","aValue","bValue","getComparisonFunction","stabilizedThis","el","stableSort","hover","role","tabIndex","border","paddingTop","AppBarLogo","exact","strict","src","maxHeight","alt","components","ABOUT","ISOCHRONE","LANDING","DASHBOARD","ROUTESCREEN","DATADIAGNOSTIC","NOT_FOUND","typeForPage","page","currentType","types","keys","action","currentPage","currentLocation","drawerOpen","setDrawer","toggleDrawer","activeStyle","fontWeight","cursor","inactiveStyle","edge","Drawer","anchor","List","ListItem","component","NavLink","button","selected","ListItemIcon","ListItemText","Divider","href","matches","exec","requestState","requestName","isLoadingRequest","loading","reduce","accumulator","currentValue","DEFAULT","momentYesterday","Date","now","initialGraphParams","obj","initialRoutes","initialTripMetrics","initialArrivals","initialSpiderSelection","addAveragesForAllDirections","routeStats","total","count","directionValue","addScores","makeStatsByRouteId","agencyMetricsData","interval","rankedRouteStats","dirStats","initialAgencyMetrics","makeSegmentsMap","routeMetricsData","segmentsMap","dirMetrics","dirSegmentsMap","segments","segment","fromStopId","initialRouteMetrics","processDateRangeQuery","dateRangeQuery","initialDateRangeParams","newDateRangeParams","newDaysOfTheWeek","toUpperCase","processQuery","firstDateRangeParams","secondDateRangeParams","dateQueryFromDateRangeParams","dateQuery","fullQueryFromParams","entries","isActive","path","thunk","newParams","allFalse","dictionary","allTrue","secondaryHeading","typography","pxToRem","textAlign","formControl","leftMargin","rightMargin","minWidth","closeButton","right","top","targetRange","localDateRangeParams","setLocalDateRangeParams","resetLocalDateRangeParams","useCallback","useEffect","maxDate","handleCancel","updateLocalDateRangeParams","datePayload","newLocalDateRangeParams","timeRange","normalizedMoment","maxMoment","moment","isAfter","handleDayChange","checked","toggleDays","what","newValue","undefined","FormControl","TextField","InputProps","inputProps","max","min","subtract","textField","InputLabelProps","shrink","onChange","myDate","newDate","newMoment","isBefore","Grid","container","item","xs","daysBack","setDateRange","FormLabel","FormGroup","FormControlLabel","control","Checkbox","indeterminate","marginLeft","InputLabel","htmlFor","Select","myTimeRange","timeRangeParts","split","input","Input","name","MenuItem","alignItems","justify","newGraphParams","applyGraphParams","textTransform","display","justifyContent","heading","flexGrow","dateTime","whiteSpace","flexWrap","isLoading","dateRangeSupported","infoAnchorEl","setInfoAnchorEl","handleClick","handleRemove","convertDate","ymdString","firstOpen","secondOpen","rangeInfo","DatePanelButton","buttonProps","dateLabel","smallLabel","weekdays","weekends","noWeekdays","noWeekends","allDays","checkedDays","uncheckedDay","join","getDaysOfTheWeekLabel","find","firstButton","secondButton","Box","p","CircularProgress","disableShrink","myFetchRoutes","myHandleGraphParams","AppBar","sm","getPercentileValue","graphData","percentile","percentiles","bin","InfoByDay","selectedOption","setSelectedOption","crosshairValues","setCrosshairValues","byDayData","handleOptionChange","changeEvent","onMouseLeave","mapDays","field","attribute","myGraphParams","myRoutes","thisRoute","directionInfo","dir","computeDistance","y","median","scheduleAdherence","scheduledCount","onTimeCount","waitData","tripData","meanWait","accum","meanTrip","meanWaitData","meanTripData","maxWait","maxTrip","legendItems","strokeWidth","onTimeRateData","speedData","maxSpeed","travelVariabilityData","maxTravelVariability","scoreData","grades","maxScore","chartMargins","left","bottom","onNearestXGeneric","Radio","xType","margin","stackBy","yDomain","tickLabelAngle","hideLine","onNearestX","_value","stack","strokeDasharray","includeMargin","xPercent","yPercent","transform","textAnchor","values","orientation","InfoIntervalsOfDay","AVERAGE_TIME","intervalField","intervals","timeRanges","intervals2","timeRanges2","mapInterval","waitData2","tripData2","PLANNING_TIME","cluster","InfoJourneyChart","onValue","firstWaits","secondWaits","firstTravels","secondTravels","verticalAlign","onValueMouseOver","y0","InfoScoreCard","hideRating","largeValue","smallValue","bottomContent","popoverContent","cardStyle","rating","Paper","flexDirection","Rating","readOnly","precision","pt","InfoScoreLegend","rows","InfoTripSummary","typicalAnchorEl","setTypicalAnchorEl","planningAnchorEl","setPlanningAnchorEl","handleTypicalClick","handlePlanningClick","waitTimes","tripTimes","departureScheduleAdherence","waitTimes2","interval2","tripTimes2","scheduleAdherence2","avg","speed2","onTimeRate2","travelTimeVariability2","scores","scores2","whyNoData","uncolored","planningWait","planningTravel","planningWait2","planningTravel2","typicalWait","typicalTravel","typicalWait2","typicalTravel2","popoverContentTotalScore","longWaitScore","popoverContentWait","popoverContentOnTimeRate","popoverContentSpeed","popoverContentTravelVariability","Info","tabValue","setTabValue","tripMetricsError","tripMetricsLoading","headways","byDay","headways2","headwayData","histogram","x0","binStart","binEnd","headwayData2","onNearestXHeadway","headway","a11yProps","Tabs","scrollButtons","Tab","hidden","xDomain","fill","tickFormat","v","wait","MapStops","populateStop","IconType","currentPosition","rotation","onClickHandler","tooltip","stopColor","iconSize","iconAnchor","ReactDOMServer","renderToString","ThemeProvider","sourceTarget","closeTooltip","angleFromTo","fromPoint","toPoint","deltaX","deltaY","populateStops","isStart","isEnd","StartStopIcon","EndStopIcon","stopGeometry","previousPoint","nextPoint","handleStopSelect","populateSpeed","numSegments","startStopIndex","endStopIndex","segmentStartStopId","segmentEndStopId","segmentEndStop","getSpeed","speedColor","firstStopId","nextStopId","segmentMetricsMap","directionMetrics","segmentMetrics","toStopId","time","medianTripTime","SpeedLegend","speedColorValues","speedColorLabels","speedColorValue","float","newDirectionId","mph","selectedRoute","populatedRoutes","mapInstruction","bounds","withTheme","transitionDuration","scrollHandlerDelay","createMuiTheme","focus","selectInput","valueContainer","textContent","placeholder","menu","zIndex","selectStyles","dropdownIndicator","provided","marginRight","overflow","Control","controlProps","children","innerProps","selectProps","labelRef","textRef","textFieldProps","inputLabelProps","fullWidth","inputComponent","onKeyUp","selectRef","setMenuIsOpen","ValueContainer","singleValue","handleInputKeyUp","setTextFieldDOMRect","getBoundingClientRect","handleInputChange","setInputMinWidth","inputMinWidth","Placeholder","SingleValue","DropdownIndicator","Menu","focusedOptionRef","menuRef","menuIsOpenTransition","menuPlacementTop","menuTransition","textFieldDOMRect","menuStyle","timeout","menuStyleRight","setMenuStyleRight","menuStyleBottom","setMenuStyleBottom","document","documentElement","clientHeight","labelHeight","inputHeight","rightWillSlice","clientWidth","leftWillSlice","idealRightPosition","parentNode","scrollTop","offsetTop","Grow","in","Fade","MenuList","maxHeightLimit","optionRef","optionProps","innerRef","isSelected","element","Option","isFocused","handleItemMouseOver","handleItemMouseOut","focusedStyle","handleMenuOpen","setMenuIsOpenTransition","onOpen","allowTransition","handleMenuClose","activeElement","blur","setTimeout","reposition","handleReposition","eventType","inputId","clearTimeout","ReactSelect","useRef","menuIsOpen","replacedComponents","IndicatorSeparator","inputEl","getElementById","onMenuOpen","onMenuClose","styles","options","option","secondStopList","allowHover","setAllowHover","getSelectedRouteInfo","node","classList","setProperty","remove","handleSelectClose","querySelectorAll","selectedDirection","directionStops","mySelectedRoute","ml","querySelector","secondStopId","tripTimeForDirection","distanceForDirection","numTrips","dm","cumulativeSegments","dataSeries","firstStopGeometry","firstStopDistance","stopIndex","trips","getTripDataSeries","coord","tickPadding","arrivalsErr","myFetchArrivals","hintValue","setHintValue","tripHighlight","setTripHighlight","processedArrivals","setProcessedArrivals","timezoneId","mareyChartSupported","myArrivals","byTripId","earliestArrivalTime","latestArrivalTime","start_time","startHourOfDay","unix","tz","hour","route_id","allArrivals","stopsByDirection","arrival","t","directionInfos","myTripData","tripId","vehicleId","series","arrivalMoment","yValue","arrivalTimeString","exitMoment","exitYValue","addArrival","processArrivals","startHour","endHour","routeColor","tripSeriesArray","tripDataKey","onSeriesMouseOver","createSeries","floor","ceil","parseInt","suffix","amPm","toString","padStart","myHintValue","scoreRank","scoreRankCount","onTimeRank","onTimeRankCount","speedRank","speedRankCount","variabilityRank","variabilityRankCount","breadCrumbStyling","darkLinks","breadCrumbsWrapper","TRIP_METRICS","myDirection","startStopInfo","endStopInfo","Breadcrumbs","separator","paths","link","hasNextValue","param","updatedPayload","specialLabels","specialLabel","labels","renderAsH1","breadCrumbs","quadrantData","maxWaitTime","customComponent","cx","cy","tripMinOptions","5","10","15","20","25","30","35","40","45","50","55","60","defaultLayerOptions","redIcon","Icon","iconUrl","shadowUrl","popupAnchor","shadowSize","computeCache","getDirectionInfo","Isochrone","refContainer","disableClickPropagation","disableScrollPropagation","initialZoom","initialCenter","defaultDisabledRoutes","maxTripMin","computedMaxTripMin","computeId","computing","endLatLng","tripInfo","enabledRoutes","noData","workerUrl","random","encodeURIComponent","isochroneWorker","Worker","layers","isochroneLayers","tripLayers","handleToggleRoute","handleMaxTripMinChange","selectAllRoutesClicked","selectNoRoutesClicked","resetMapClicked","onWorkerMessage","recomputeIsochrones","maxTripMinChanged","onmessage","prevProps","tripMin","addReachableLocationsLayer","status","showError","console","log","alert","resetMap","computeIsochrones","reachableCircles","circles","geoJson","layerOptions","diffLayer","bubblingMouseEvents","addTo","on","showTripInfo","layer","curEndLatLng","circle","allOptions","dist","walkMin","clearTripLayers","o1","o2","seenRoutes","numOptions","tripItems","tripItem","polyLine","polyline","bindTooltip","permanent","desc","marker","startTimeStr","endTimeStr","timeStr","enabledRoutesArr","newLatLng","cachedLayer","tripMins","m","postMessage","iso","isochroneLayer","selectAllRoutes","closePopup","clearTripInfo","enabled","colors","times","makeRouteToggle","Components","About","Landing","Dashboard","RouteScreen","DataDiagnostic","NotFound","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","actionCreators","compose","store","preloadedState","connectRoutes","routesMap","querySerializer","qs","reducer","middleware","enhancer","rootReducer","combineReducers","reducers","middlewares","applyMiddleware","enhancers","createStore","configureStore","ReactDOM","render"],"mappings":"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","file":"static/js/main.bab3110b.chunk.js","sourcesContent":["// When running in dev mode via docker-compose or GitPod\r\n// REACT_APP_METRICS_BASE_URL is set\r\n// to the URL of the metrics API server.\r\n// When REACT_APP_METRICS_BASE_URL is not set, metrics\r\n// will be loaded from the same domain as the React app.\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const MetricsBaseURL = process.env.REACT_APP_METRICS_BASE_URL;\r\n\r\n// index.html loads script tag from /api/js_config before React scripts, which sets window.OpentransitConfig object\r\nconst config = window.OpentransitConfig;\r\n\r\nif (!config) {\r\n  throw new Error(`OpentransitConfig not defined (may be a server error)`);\r\n}\r\n\r\nexport const S3Bucket = config.S3Bucket;\r\nexport const Agencies = config.Agencies;\r\nexport const PrecomputedStatsVersion = config.PrecomputedStatsVersion;\r\nexport const RoutesVersion = config.RoutesVersion;\r\nexport const ArrivalsVersion = config.ArrivalsVersion;\r\n\r\nconst agenciesMap = {};\r\nAgencies.forEach(agency => {\r\n  agenciesMap[agency.id] = agency;\r\n});\r\n\r\nexport function getAgency(agencyId) {\r\n  return agenciesMap[agencyId];\r\n}\r\n","/**\r\n * Helper functions for working with routes and stops.  These are used to filter out\r\n * routes, spurious directions, and idiosyncratic stops when listing and scoring entire routes.\r\n *\r\n * Also includes functions for computing distances between coordinates.\r\n */\r\n\r\nimport * as d3 from 'd3';\r\nimport red from '@material-ui/core/colors/red';\r\nimport green from '@material-ui/core/colors/green';\r\nimport yellow from '@material-ui/core/colors/yellow';\r\nimport lightGreen from '@material-ui/core/colors/lightGreen';\r\n\r\nimport { getAgency } from '../config';\r\n\r\nexport function isIgnoredRoute(route) {\r\n  const routeHeuristics = getAgency(route.agencyId).routeHeuristics;\r\n  return (\r\n    routeHeuristics &&\r\n    routeHeuristics[route.id] &&\r\n    routeHeuristics[route.id].ignoreRoute\r\n  );\r\n}\r\n\r\n/**\r\n * Given an array of routes, return only the routes we want to show.\r\n */\r\nexport function filterRoutes(routes) {\r\n  return routes.filter(route => {\r\n    return !isIgnoredRoute(route);\r\n  });\r\n}\r\n\r\n/**\r\n *\r\n * @param meters\r\n * @returns Conversion from meters to miles.\r\n */\r\nexport function metersToMiles(meters) {\r\n  return meters / 1609.344;\r\n}\r\n\r\n/**\r\n * Score computation.\r\n *\r\n * TODO: refactor with Info.jsx's computation of grades once we add in probability\r\n * of long wait and travel variability to RouteSummary.\r\n */\r\nexport function computeScores(medianWait, onTimeRate, speed, variability) {\r\n  const medianWaitScoreScale = d3\r\n    .scaleLinear()\r\n    .domain([5, 10])\r\n    .rangeRound([100, 0])\r\n    .clamp(true);\r\n\r\n  const onTimeRateScoreScale = d3\r\n    .scaleLinear()\r\n    .domain([1, 0])\r\n    .rangeRound([100, 0])\r\n    .clamp(true);\r\n\r\n  const speedScoreScale = d3\r\n    .scaleLinear()\r\n    .domain([5, 10])\r\n    .rangeRound([0, 100])\r\n    .clamp(true);\r\n\r\n  // score for travel time variability\r\n  // where variability is 90th percentile trip time minus 10th percentile trip time\r\n\r\n  const variabilityScoreScale = d3\r\n    .scaleLinear()\r\n    .domain([10, 20])\r\n    .rangeRound([100, 0])\r\n    .clamp(true);\r\n\r\n  const medianWaitScore =\r\n    medianWait != null ? medianWaitScoreScale(medianWait) : null;\r\n  const onTimeRateScore =\r\n    onTimeRate != null ? onTimeRateScoreScale(onTimeRate) : null;\r\n  const speedScore = speed != null ? speedScoreScale(speed) : null;\r\n  const travelVarianceScore =\r\n    variability != null ? variabilityScoreScale(variability) : null;\r\n\r\n  const totalScore =\r\n    medianWaitScore != null &&\r\n    onTimeRateScore != null &&\r\n    speedScore != null &&\r\n    travelVarianceScore != null\r\n      ? Math.round(\r\n          (medianWaitScore +\r\n            onTimeRateScore +\r\n            speedScore +\r\n            travelVarianceScore) /\r\n            4.0,\r\n        )\r\n      : null;\r\n\r\n  return {\r\n    medianWaitScore,\r\n    onTimeRateScore,\r\n    speedScore,\r\n    travelVarianceScore,\r\n    totalScore,\r\n  };\r\n}\r\n\r\nexport const HighestPossibleScore = 100;\r\n\r\nconst backgroundColorScale = d3\r\n  .scaleThreshold()\r\n  .domain([0.25, 0.5, 0.75])\r\n  .range([red[300], yellow[300], lightGreen[700], green[900]]);\r\n\r\nexport const scoreBackgroundColor = score => {\r\n  if (score == null || Number.isNaN(score)) {\r\n    return null;\r\n  }\r\n  return backgroundColorScale(score / HighestPossibleScore);\r\n};\r\n\r\nconst contrastColorScale = d3\r\n  .scaleThreshold()\r\n  .domain([0.25, 0.5, 0.75])\r\n  .range(['rgba(0,0,0,0.87)', 'rgba(0,0,0,0.87)', 'white', 'white']);\r\n\r\nexport const scoreContrastColor = score => {\r\n  if (score == null || Number.isNaN(score)) {\r\n    return null;\r\n  }\r\n  return contrastColorScale(score / HighestPossibleScore);\r\n};\r\n\r\n/**\r\n * Haversine formula for calcuating distance between two coordinates in lat lon\r\n * from bird eye view; seems to be +- 8 meters difference from geopy distance.\r\n *\r\n * From eclipses.py.  Returns distance in meters.\r\n */\r\nexport function haverDistance(degLatStop, degLonStop, degLatBus, degLonBus) {\r\n  const deg2rad = x => (x * Math.PI) / 180;\r\n  const eradius = 6371000;\r\n\r\n  const [radLatStop, radLonStop, radLatBus, radLonBus] = [\r\n    degLatStop,\r\n    degLonStop,\r\n    degLatBus,\r\n    degLonBus,\r\n  ].map(deg2rad);\r\n\r\n  const latDiff = radLatBus - radLatStop;\r\n  const lonDiff = radLonBus - radLonStop;\r\n\r\n  const a =\r\n    Math.sin(latDiff / 2) ** 2 +\r\n    Math.cos(radLatStop) * Math.cos(radLatBus) * Math.sin(lonDiff / 2) ** 2;\r\n  const hypotenuse = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n  const distance = eradius * hypotenuse;\r\n\r\n  return distance;\r\n}\r\n\r\n/**\r\n * Returns the distance between two stops in miles.\r\n */\r\nexport function milesBetween(p1, p2) {\r\n  const meters = haverDistance(p1.lat, p1.lon, p2.lat, p2.lon);\r\n  return metersToMiles(meters);\r\n}\r\n\r\nexport function addRanks(\r\n  statsArr,\r\n  property,\r\n  sortFactor,\r\n  rankProperty,\r\n  rankCountProperty,\r\n) {\r\n  const rankedStats = statsArr.filter(stats => stats[property] != null);\r\n  rankedStats.sort((a, b) => {\r\n    return (a[property] - b[property]) * sortFactor;\r\n  });\r\n\r\n  const rankCount = rankedStats.length;\r\n  rankedStats.forEach(function(stats, index) {\r\n    stats[rankProperty] = index + 1;\r\n    stats[rankCountProperty] = rankCount;\r\n  });\r\n}\r\n","/**\r\n * Helper functions for plotting on maps.\r\n */\r\n\r\nimport * as turf from '@turf/turf';\r\nimport { milesBetween, metersToMiles } from './routeCalculations';\r\nimport { getAgency } from '../config';\r\n\r\nexport function getDownstreamStopIds(routeInfo, dirInfo, stopId) {\r\n  const stopsList = dirInfo.stops;\r\n  const secondStopListIndex = stopId ? stopsList.indexOf(stopId) : 0;\r\n\r\n  const isLoopRoute = dirInfo.loop;\r\n  const oneWaySecondStopsList = stopsList.slice(secondStopListIndex + 1);\r\n\r\n  if (!isLoopRoute) {\r\n    return oneWaySecondStopsList;\r\n  }\r\n  // loop routes display all subsequent stops up to and including origin stop\r\n  return oneWaySecondStopsList.concat(\r\n    stopsList.slice(0, secondStopListIndex + 1),\r\n  );\r\n}\r\n\r\n/**\r\n * Gets coordinates that can be consumed by a Leaflet Polyline.  Uses\r\n * the GTFS stop geometry if possible, otherwise just stop to stop.\r\n *\r\n *  @param routeInfo route from nextbus route config list\r\n *  @param dirInfo direction object from route config\r\n *  @param fromStop stop id (defaults to first stop)\r\n *  @param toStop stop id (defaults to last stop)\r\n */\r\nexport function getTripPoints(\r\n  routeInfo,\r\n  dirInfo,\r\n  fromStop = dirInfo.stops[0],\r\n  toStop = dirInfo.stops[dirInfo.stops.length - 1],\r\n) {\r\n  const fromStopInfo = routeInfo.stops[fromStop];\r\n  const toStopInfo = routeInfo.stops[toStop];\r\n\r\n  const fromStopGeometry = dirInfo.stop_geometry[fromStop];\r\n  const toStopGeometry = dirInfo.stop_geometry[toStop];\r\n  const tripPoints = [];\r\n\r\n  if (fromStopGeometry && toStopGeometry) {\r\n    tripPoints.push(fromStopInfo);\r\n\r\n    const coords = dirInfo.coords;\r\n\r\n    let startIndex = fromStopGeometry.after_index + 1;\r\n\r\n    if (\r\n      dirInfo.loop &&\r\n      toStopGeometry.after_index <= fromStopGeometry.after_index\r\n    ) {\r\n      for (let i = startIndex; i < coords.length; i++) {\r\n        tripPoints.push(coords[i]);\r\n      }\r\n      startIndex = 0;\r\n    }\r\n\r\n    for (let i = startIndex; i <= toStopGeometry.after_index; i++) {\r\n      tripPoints.push(coords[i]);\r\n    }\r\n\r\n    tripPoints.push(toStopInfo);\r\n  } // if unknown geometry, draw straight lines between stops\r\n  else {\r\n    const stopIds = dirInfo.stops;\r\n\r\n    const fromStopIndex = stopIds.indexOf(fromStop);\r\n    const toStopIndex = stopIds.indexOf(toStop);\r\n    if (fromStopIndex !== -1 && toStopIndex !== -1) {\r\n      let startIndex = fromStopIndex;\r\n      if (dirInfo.loop && toStopIndex <= fromStopIndex) {\r\n        for (let i = startIndex; i < stopIds.length; i++) {\r\n          tripPoints.push(routeInfo.stops[stopIds[i]]);\r\n        }\r\n        startIndex = 0;\r\n      }\r\n\r\n      for (let i = startIndex; i <= toStopIndex; i++) {\r\n        tripPoints.push(routeInfo.stops[stopIds[i]]);\r\n      }\r\n    }\r\n  }\r\n  return tripPoints;\r\n}\r\n\r\n/**\r\n * Returns distance in miles between two stops, using GTFS-derived distance along\r\n * route if available, or else haversine distance.\r\n *\r\n *  @param routeInfo route from nextbus route config list\r\n *  @param dirInfo direction object from route config\r\n *  @param fromStop stop id (defaults to first stop)\r\n *  @param toStop stop id (defaults to last stop)\r\n */\r\nexport function getDistanceInMiles(\r\n  routeInfo,\r\n  dirInfo,\r\n  fromStop = dirInfo.stops[0],\r\n  toStop = dirInfo.stops[dirInfo.stops.length - 1],\r\n) {\r\n  const fromStopGeometry = dirInfo.stop_geometry[fromStop];\r\n  const toStopGeometry = dirInfo.stop_geometry[toStop];\r\n\r\n  if (fromStopGeometry && toStopGeometry) {\r\n    let distance = toStopGeometry.distance - fromStopGeometry.distance;\r\n\r\n    if (distance <= 0 && dirInfo.loop) {\r\n      distance += dirInfo.distance;\r\n    }\r\n\r\n    return metersToMiles(distance);\r\n  }\r\n  // if unknown geometry, draw straight lines between stops\r\n  const stopIds = dirInfo.stops;\r\n  const stops = routeInfo.stops;\r\n  const fromStopIndex = stopIds.indexOf(fromStop);\r\n  const toStopIndex = stopIds.indexOf(toStop);\r\n  let miles = 0;\r\n\r\n  if (fromStopIndex !== -1 && toStopIndex !== -1) {\r\n    let startIndex = fromStopIndex;\r\n    const numStops = stopIds.length;\r\n    if (dirInfo.loop && toStopIndex <= fromStopIndex) {\r\n      for (let i = startIndex; i < numStops; i++) {\r\n        miles += milesBetween(\r\n          stops[stopIds[i]],\r\n          stops[stopIds[(i + 1) % numStops]],\r\n        );\r\n      }\r\n      startIndex = 0;\r\n    }\r\n\r\n    for (let i = startIndex; i < toStopIndex; i++) {\r\n      miles += milesBetween(stops[stopIds[i]], stops[stopIds[i + 1]]);\r\n    }\r\n    return miles;\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * Determines whether a given coordinate is within an agency's service area\r\n * @param agencyId - ID of agency in the config\r\n * @param latLng - coordinate as latitude and longitude\r\n * @returns {boolean} - true if the coordinate is in the service area\r\n */\r\nexport function isInServiceArea(agencyId, latLng) {\r\n  const point = turf.point([latLng.lng, latLng.lat]);\r\n\r\n  const serviceArea = getAgency(agencyId).serviceArea;\r\n  if (!serviceArea) {\r\n    return true;\r\n  }\r\n\r\n  return serviceArea.features.some(feature => {\r\n    return turf.booleanWithin(point, feature);\r\n  });\r\n}\r\n","/**\r\n * Constants for the UI that allow for reconfiguration.\r\n */\r\n\r\nimport deepPurple from '@material-ui/core/colors/deepPurple';\r\nimport grey from '@material-ui/core/colors/grey';\r\n\r\n// Colors definition:\r\n// This section its should be use to declare an object color\r\n// that contain the colors used in the application\r\nexport const Colors = {\r\n  GRAY: grey[400],\r\n  GRAY_DARK: grey[600],\r\n  PURPLE: deepPurple[200],\r\n  PURPLE_DARK: deepPurple[400],\r\n  BLUE: 'blue',\r\n  RED: 'red',\r\n  GREEN: 'green',\r\n};\r\n\r\n// placeholder colors: gray and purple from nyc busstats\r\nexport const CHART_COLORS = [\r\n  Colors.GRAY,\r\n  Colors.PURPLE,\r\n  Colors.GRAY_DARK,\r\n  Colors.PURPLE_DARK,\r\n];\r\n\r\n// use this percentile (e.g. 90th) for waits/travel times\r\n// for planning purposes the idea here is to filter out\r\n// extreme/maximum wait/travel values so that the user knows\r\n// long the trip will \"usually\" take.  So for 90th percentile\r\n// this would be the historic performance 9 times out of 10.\r\nexport const PLANNING_PERCENTILE = 90;\r\nexport const TENTH_PERCENTILE = 10;\r\n\r\n// a commonly used style option for react-vis\r\n// Crosshairs (hovers) where we don't want a crosshair line\r\n// spanning the chart, just the hover.\r\nexport const REACT_VIS_CROSSHAIR_NO_LINE = { line: { background: 'none' } };\r\n\r\n// Sentinel value representing the \"All Day\" time range (no start time and no\r\n// end time).  Cannot use empty string because the Select does not match it\r\n// with a MenuItem having an empty value.\r\nexport const TIME_RANGE_ALL_DAY = 'allday';\r\n\r\n// Values and labels for time ranges.  The value gets split on '-' to create\r\n// start and end times for the back end.  The shortLabel plus restOfLabel forms\r\n// the label for the MenuItem, and the shortLabel can be used by itself in read-only\r\n// contexts.\r\nexport const TIME_RANGES = [\r\n  { value: TIME_RANGE_ALL_DAY, shortLabel: 'All Day', restOfLabel: '' },\r\n  { value: '07:00-19:00', shortLabel: 'Daytime', restOfLabel: ' (7AM - 7PM)' },\r\n  {\r\n    value: '03:00-07:00',\r\n    shortLabel: 'Early Morning',\r\n    restOfLabel: ' (3AM - 7AM)',\r\n  },\r\n  { value: '07:00-10:00', shortLabel: 'AM Peak', restOfLabel: ' (7AM - 10AM)' },\r\n  { value: '10:00-16:00', shortLabel: 'Midday', restOfLabel: ' (10AM - 4PM)' },\r\n  { value: '16:00-19:00', shortLabel: 'PM Peak', restOfLabel: ' (4PM - 7PM)' },\r\n  {\r\n    value: '19:00-03:00+1',\r\n    shortLabel: 'Late Evening',\r\n    restOfLabel: ' (7PM - 3AM)',\r\n  },\r\n];\r\n\r\nexport const MAX_DATE_RANGE = 90; // largest date range allowed, in days (30 might be more performant)\r\n\r\n// RadioGroup expects values to be strings, not numbers.\r\nexport const DATE_RANGES = [\r\n  { value: '1', label: 'Yesterday' },\r\n  { value: '7', label: 'Last week' },\r\n  { value: '30', label: 'Last 30 days' },\r\n  { value: '90', label: 'Last 90 days' },\r\n];\r\n\r\n// Values are Moment days of the week (0-6)\r\nexport const WEEKDAYS = [\r\n  { value: '1', label: 'Monday', shortLabel: 'M' },\r\n  { value: '2', label: 'Tuesday', shortLabel: 'Tu' },\r\n  { value: '3', label: 'Wednesday', shortLabel: 'W' },\r\n  { value: '4', label: 'Thursday', shortLabel: 'Th' },\r\n  { value: '5', label: 'Friday', shortLabel: 'F' },\r\n];\r\n\r\nexport const WEEKENDS = [\r\n  { value: '6', label: 'Saturday', shortLabel: 'Sa' },\r\n  { value: '0', label: 'Sunday', shortLabel: 'Su' },\r\n];\r\n\r\n// Marey chart:  how long of a dwell at a stop results in a second data point for exit.\r\nexport const DWELL_THRESHOLD_SECS = 120;\r\n\r\nexport const APP_NAME = 'OpenTransit';\r\n","import axios from 'axios';\r\nimport Moment from 'moment';\r\nimport {\r\n  MetricsBaseURL,\r\n  S3Bucket,\r\n  RoutesVersion,\r\n  ArrivalsVersion,\r\n  Agencies,\r\n} from '../config';\r\nimport { MAX_DATE_RANGE } from '../UIConstants';\r\n\r\n/**\r\n * Helper function to compute the list of days for the GraphQL query.\r\n *\r\n * @param dateRangeParams Current UI state.\r\n * @returns {Array} List of days to query for.\r\n */\r\nfunction computeDates(dateRangeParams) {\r\n  let endMoment = Moment(dateRangeParams.date);\r\n\r\n  // If this is a custom date range, compute the number of days back\r\n  // based on the start date.\r\n\r\n  const startMoment = Moment(dateRangeParams.startDate);\r\n  const deltaDays = endMoment.diff(startMoment, 'days');\r\n  let numberOfDaysBack = Math.abs(deltaDays) + 1; // add one for the end date itself\r\n  if (deltaDays < 0) {\r\n    // if the start date is after end date, use the start date as the \"end\"\r\n    endMoment = startMoment;\r\n  }\r\n\r\n  if (numberOfDaysBack > MAX_DATE_RANGE) {\r\n    // guard rail\r\n    numberOfDaysBack = MAX_DATE_RANGE;\r\n  }\r\n\r\n  // Generate the list of days, filtering by the days of the week checkboxes.\r\n\r\n  const dates = [];\r\n  for (let i = 0; i < numberOfDaysBack; i++) {\r\n    if (dateRangeParams.daysOfTheWeek[startMoment.day()]) {\r\n      dates.push(startMoment.format('YYYY-MM-DD'));\r\n    }\r\n    startMoment.add(1, 'days');\r\n  }\r\n  return dates;\r\n}\r\n\r\n// S3 URL to route configuration\r\nexport function generateRoutesURL(agencyId) {\r\n  return `https://${S3Bucket}.s3.amazonaws.com/routes/${RoutesVersion}/routes_${RoutesVersion}_${agencyId}.json.gz?u`;\r\n}\r\n\r\n/**\r\n * Generate S3 url for arrivals\r\n * @param dateStr {string} date\r\n * @param routeId {string} route id\r\n * @returns {string} S3 url\r\n */\r\nexport function generateArrivalsURL(agencyId, dateStr, routeId) {\r\n  return `https://${S3Bucket}.s3.amazonaws.com/arrivals/${ArrivalsVersion}/${agencyId}/${dateStr.replace(\r\n    /-/g,\r\n    '/',\r\n  )}/arrivals_${ArrivalsVersion}_${agencyId}_${dateStr}_${routeId}.json.gz?ai`;\r\n}\r\n\r\n/**\r\n * The functions below here are Redux \"thunks\" (see https://github.com/reduxjs/redux-thunk),\r\n * a kind of Redux action that can do asynchronous processing.\r\n */\r\n\r\n/**\r\n * Redux \"thunk\" that calls the GraphQL API and then processes the results.\r\n *\r\n * @param params {Object} The query parameters from Redux state.\r\n */\r\nexport function fetchTripMetrics(params) {\r\n  const singleDateRangeQuery = `query($agencyId:String!, $routeId:String!, $startStopId:String!, $endStopId:String,\r\n    $directionId:String, $dates:[String!], $startTime:String, $endTime:String) {\r\n  agency(agencyId:$agencyId) {\r\n    route(routeId:$routeId) {\r\n      trip(startStopId:$startStopId, endStopId:$endStopId, directionId:$directionId) {\r\n        interval(dates:$dates, startTime:$startTime, endTime:$endTime) {\r\n          headways {\r\n            count median max\r\n            percentiles(percentiles:[90]) { percentile value }\r\n            histogram { binStart binEnd count }\r\n          }\r\n          tripTimes {\r\n            count median avg max\r\n            percentiles(percentiles:[90]) { percentile value }\r\n            histogram { binStart binEnd count }\r\n          }\r\n          waitTimes {\r\n            median max\r\n            percentiles(percentiles:[90]) { percentile value }\r\n            histogram { binStart binEnd count }\r\n          }\r\n          departureScheduleAdherence {\r\n            onTimeCount\r\n            scheduledCount\r\n          }\r\n        }\r\n        byDay(dates:$dates, startTime:$startTime, endTime:$endTime) {\r\n          dates\r\n          startTime\r\n          endTime\r\n          tripTimes {\r\n            median\r\n            percentiles(percentiles:[10,90]) { percentile value }\r\n           }\r\n          waitTimes {\r\n            median\r\n            percentiles(percentiles:[90]) { percentile value }\r\n          }\r\n          departureScheduleAdherence {\r\n            onTimeCount\r\n            scheduledCount\r\n          }\r\n        }\r\n        timeRanges(dates:$dates) {\r\n          startTime endTime\r\n          waitTimes {\r\n            percentiles(percentiles:[50,90]) { percentile value }\r\n          }\r\n          tripTimes {\r\n            percentiles(percentiles:[50,90]) { percentile value }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}`;\r\n\r\n  const dualDateRangeQuery = `\r\n    fragment intervalFields on TripIntervalMetrics {\r\n        headways {\r\n          count median max\r\n          percentiles(percentiles:[90]) { percentile value }\r\n          histogram { binStart binEnd count }\r\n        }\r\n        tripTimes {\r\n          count median avg max\r\n          percentiles(percentiles:[90]) { percentile value }\r\n          histogram { binStart binEnd count }\r\n        }\r\n        waitTimes {\r\n          median max\r\n          percentiles(percentiles:[90]) { percentile value }\r\n          histogram { binStart binEnd count }\r\n        }\r\n        departureScheduleAdherence {\r\n          onTimeCount\r\n          scheduledCount\r\n        }\r\n    }\r\n\r\n    fragment timeRangeFields on TripIntervalMetrics {\r\n        startTime endTime\r\n        waitTimes {\r\n          percentiles(percentiles:[50,90]) { percentile value }\r\n        }\r\n        tripTimes {\r\n          percentiles(percentiles:[50,90]) { percentile value }\r\n        }\r\n    }\r\n\r\n    query($agencyId:String!, $routeId:String!,\r\n      $startStopId:String!, $endStopId:String, $directionId:String,\r\n      $dates:[String!], $startTime:String, $endTime:String,\r\n      $dates2:[String!], $startTime2:String, $endTime2:String) {\r\n\r\n    agency(agencyId:$agencyId) {\r\n      route(routeId:$routeId) {\r\n        trip(startStopId:$startStopId, endStopId:$endStopId, directionId:$directionId) {\r\n          interval(dates:$dates, startTime:$startTime, endTime:$endTime) {\r\n              ...intervalFields\r\n          }\r\n          interval2: interval(dates:$dates2, startTime:$startTime2, endTime:$endTime2) {\r\n              ...intervalFields\r\n          }\r\n          timeRanges(dates:$dates) {\r\n              ...timeRangeFields\r\n          }\r\n          timeRanges2: timeRanges(dates:$dates2) {\r\n              ...timeRangeFields\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  `;\r\n\r\n  return function(dispatch) {\r\n    const firstDays = computeDates(params.firstDateRange);\r\n    const secondDays =\r\n      params.secondDateRange && computeDates(params.secondDateRange);\r\n\r\n    let query = secondDays ? dualDateRangeQuery : singleDateRangeQuery;\r\n\r\n    const queryParams = Object.assign(\r\n      {\r\n        dates: firstDays,\r\n        startTime: params.firstDateRange.startTime,\r\n        endTime: params.firstDateRange.endTime,\r\n      },\r\n      secondDays\r\n        ? {\r\n            dates2: secondDays,\r\n            startTime2: params.secondDateRange.startTime,\r\n            endTime2: params.secondDateRange.endTime,\r\n          }\r\n        : null,\r\n      params,\r\n    );\r\n\r\n    // remove unneeded object references in params\r\n\r\n    delete queryParams.firstDateRange;\r\n    delete queryParams.secondDateRange;\r\n\r\n    query = query.replace(/\\s+/g, ' ');\r\n\r\n    dispatch({ type: 'REQUEST_TRIP_METRICS' });\r\n    axios\r\n      .get('/api/graphql', {\r\n        params: {\r\n          query,\r\n          variables: JSON.stringify(queryParams),\r\n        }, // computed dates aren't in graphParams so add here\r\n        baseURL: MetricsBaseURL,\r\n      })\r\n      .then(response => {\r\n        const responseData = response.data;\r\n        if (responseData && responseData.errors) {\r\n          // assume there is at least one error, but only show the first one\r\n          dispatch({\r\n            type: 'ERROR_TRIP_METRICS',\r\n            error: responseData.errors[0].message,\r\n          });\r\n        } else {\r\n          const agencyMetrics =\r\n            responseData && responseData.data ? responseData.data.agency : null;\r\n          const routeMetrics = agencyMetrics ? agencyMetrics.route : null;\r\n          const tripMetrics = routeMetrics ? routeMetrics.trip : null;\r\n          dispatch({\r\n            type: 'RECEIVED_TRIP_METRICS',\r\n            data: tripMetrics,\r\n          });\r\n        }\r\n      })\r\n      .catch(err => {\r\n        const errStr =\r\n          err.response && err.response.data && err.response.data.errors\r\n            ? err.response.data.errors[0].message\r\n            : err.message;\r\n        dispatch({ type: 'ERROR_TRIP_METRICS', error: errStr });\r\n      });\r\n  };\r\n}\r\n\r\nexport function resetTripMetrics() {\r\n  return function(dispatch) {\r\n    dispatch({ type: 'RECEIVED_TRIP_METRICS', data: null });\r\n  };\r\n}\r\n\r\nexport function fetchRoutes() {\r\n  return function(dispatch, getState) {\r\n    const agencyId = Agencies[0].id;\r\n\r\n    if (agencyId !== getState().routes.agencyId) {\r\n      dispatch({ type: 'REQUEST_ROUTES', agencyId });\r\n      axios\r\n        .get(generateRoutesURL(agencyId))\r\n        .then(response => {\r\n          const routes = response.data.routes;\r\n          routes.forEach(route => {\r\n            route.agencyId = agencyId;\r\n          });\r\n          dispatch({\r\n            type: 'RECEIVED_ROUTES',\r\n            data: routes,\r\n            agencyId,\r\n          });\r\n        })\r\n        .catch(err => {\r\n          dispatch({ type: 'ERROR_ROUTES', error: err });\r\n        });\r\n    }\r\n  };\r\n}\r\n\r\nexport function fetchRouteMetrics(params) {\r\n  const dates = computeDates(params.firstDateRange);\r\n\r\n  return function(dispatch, getState) {\r\n    const query = `query($agencyId:String!, $routeId:String!, $dates:[String!], $startTime:String, $endTime:String) {\r\n  agency(agencyId:$agencyId) {\r\n    route(routeId:$routeId) {\r\n      interval(dates:$dates, startTime:$startTime, endTime:$endTime) {\r\n        directions {\r\n          directionId\r\n          segments {\r\n            fromStopId\r\n            toStopId\r\n            medianTripTime\r\n            trips\r\n          }\r\n          cumulativeSegments {\r\n            fromStopId\r\n            toStopId\r\n            medianTripTime\r\n            trips\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}`.replace(/\\s+/g, ' ');\r\n\r\n    const variablesJson = JSON.stringify({\r\n      agencyId: Agencies[0].id,\r\n      routeId: params.routeId,\r\n      dates,\r\n      startTime: params.firstDateRange.startTime,\r\n      endTime: params.firstDateRange.endTime,\r\n    });\r\n\r\n    if (getState().routeMetrics.variablesJson !== variablesJson) {\r\n      dispatch({\r\n        type: 'REQUEST_ROUTE_METRICS',\r\n        variablesJson,\r\n      });\r\n      axios\r\n        .get('/api/graphql', {\r\n          params: { query, variables: variablesJson }, // computed dates aren't in graphParams so add here\r\n          baseURL: MetricsBaseURL,\r\n        })\r\n        .then(response => {\r\n          const responseData = response.data;\r\n          if (responseData && responseData.errors) {\r\n            // assume there is at least one error, but only show the first one\r\n            dispatch({\r\n              type: 'ERROR_ROUTE_METRICS',\r\n              error: responseData.errors[0].message,\r\n            });\r\n          } else {\r\n            const agencyMetrics =\r\n              responseData && responseData.data\r\n                ? responseData.data.agency\r\n                : null;\r\n            const routeMetrics = agencyMetrics ? agencyMetrics.route : null;\r\n            dispatch({\r\n              type: 'RECEIVED_ROUTE_METRICS',\r\n              variablesJson,\r\n              data: routeMetrics,\r\n            });\r\n          }\r\n        })\r\n        .catch(err => {\r\n          const errStr =\r\n            err.response && err.response.data && err.response.data.errors\r\n              ? err.response.data.errors[0].message\r\n              : err.message;\r\n          dispatch({ type: 'ERROR_ROUTE_METRICS', error: errStr });\r\n        });\r\n    }\r\n  };\r\n}\r\n\r\nexport function fetchAgencyMetrics(params) {\r\n  const dates = computeDates(params.firstDateRange);\r\n\r\n  return function(dispatch, getState) {\r\n    const query = `query($agencyId:String!, $dates:[String!], $startTime:String, $endTime:String) {\r\n  agency(agencyId:$agencyId) {\r\n    agencyId\r\n    interval(dates:$dates, startTime:$startTime, endTime:$endTime) {\r\n      routes {\r\n        routeId\r\n        directions {\r\n          directionId\r\n          medianWaitTime\r\n          averageSpeed(units:\"mph\")\r\n          travelTimeVariability\r\n          onTimeRate\r\n        }\r\n      }\r\n    }\r\n  }\r\n}`.replace(/\\s+/g, ' ');\r\n\r\n    const variablesJson = JSON.stringify({\r\n      agencyId: Agencies[0].id,\r\n      dates,\r\n      startTime: params.firstDateRange.startTime,\r\n      endTime: params.firstDateRange.endTime,\r\n    });\r\n\r\n    if (getState().agencyMetrics.variablesJson !== variablesJson) {\r\n      dispatch({\r\n        type: 'REQUEST_AGENCY_METRICS',\r\n        variablesJson,\r\n      });\r\n      axios\r\n        .get('/api/graphql', {\r\n          params: { query, variables: variablesJson },\r\n          baseURL: MetricsBaseURL,\r\n        })\r\n        .then(response => {\r\n          const responseData = response.data;\r\n          if (responseData && responseData.errors) {\r\n            // assume there is at least one error, but only show the first one\r\n            dispatch({\r\n              type: 'ERROR_AGENCY_METRICS',\r\n              error: responseData.errors[0].message,\r\n            });\r\n          } else {\r\n            const agencyMetrics =\r\n              responseData && responseData.data\r\n                ? responseData.data.agency\r\n                : null;\r\n            dispatch({\r\n              type: 'RECEIVED_AGENCY_METRICS',\r\n              variablesJson,\r\n              data: agencyMetrics,\r\n            });\r\n          }\r\n        })\r\n        .catch(err => {\r\n          const errStr =\r\n            err.response && err.response.data && err.response.data.errors\r\n              ? err.response.data.errors[0].message\r\n              : err.message;\r\n          dispatch({ type: 'ERROR_AGENCY_METRICS', error: errStr });\r\n        });\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Action creator that fetches arrival history from S3 corresponding to the\r\n * day and route specified by params.\r\n *\r\n * @param params graphParams object\r\n */\r\nexport function fetchArrivals(params) {\r\n  return function(dispatch, getState) {\r\n    const dateStr = params.firstDateRange.date;\r\n    const agencyId = params.agencyId;\r\n\r\n    const s3Url = generateArrivalsURL(agencyId, dateStr, params.routeId);\r\n\r\n    if (getState().arrivals.url !== s3Url) {\r\n      dispatch({ type: 'REQUEST_ARRIVALS' });\r\n      axios\r\n        .get(s3Url)\r\n        .then(response => {\r\n          dispatch({\r\n            type: 'RECEIVED_ARRIVALS',\r\n            data: response.data,\r\n            url: s3Url,\r\n          });\r\n        })\r\n        .catch(() => {\r\n          dispatch({ type: 'ERROR_ARRIVALS', error: 'No data.' });\r\n        });\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Action creator that clears arrival history.\r\n */\r\nexport function resetArrivals() {\r\n  return function(dispatch) {\r\n    dispatch({ type: 'RECEIVED_ARRIVALS', url: null, data: null });\r\n  };\r\n}\r\n\r\nexport function handleSpiderMapClick(stops, latLng) {\r\n  return function(dispatch) {\r\n    dispatch({ type: 'RECEIVED_SPIDER_MAP_CLICK', stops, latLng });\r\n  };\r\n}\r\n\r\nexport function handleGraphParams(params) {\r\n  return function(dispatch, getState) {\r\n    const oldParams = getState().graphParams;\r\n    dispatch({ type: 'RECEIVED_GRAPH_PARAMS', params });\r\n    const graphParams = getState().graphParams;\r\n\r\n    if (\r\n      oldParams.firstDateRange.date !== graphParams.firstDateRange.date ||\r\n      oldParams.routeId !== graphParams.routeId ||\r\n      oldParams.agencyId !== graphParams.agencyId\r\n    ) {\r\n      // Clear out stale data.  We have arrivals for a different route, day, or agency\r\n      // from what is currently selected.\r\n      dispatch(resetArrivals());\r\n    }\r\n\r\n    if (graphParams.firstDateRange.date) {\r\n      dispatch(fetchAgencyMetrics(graphParams));\r\n    }\r\n\r\n    if (graphParams.agencyId && graphParams.routeId) {\r\n      dispatch(fetchRouteMetrics(graphParams));\r\n    }\r\n\r\n    // fetch graph data if all params provided\r\n\r\n    if (\r\n      graphParams.agencyId &&\r\n      graphParams.routeId &&\r\n      graphParams.directionId &&\r\n      graphParams.startStopId &&\r\n      graphParams.endStopId\r\n    ) {\r\n      dispatch(fetchTripMetrics(graphParams));\r\n    } else {\r\n      // when we don't have all params, clear graph data\r\n      dispatch(resetTripMetrics());\r\n    }\r\n  };\r\n}\r\n","/**\r\n * Renders an SVG \"shield\" representing a transit route.\r\n */\r\nexport default function MapShield(props) {\r\n  const routeText = props.routeText;\r\n  const color = props.color;\r\n  const waitScaled = props.waitScaled; // 0, 1, or 2\r\n\r\n  let html = null;\r\n\r\n  const r = 9 + waitScaled * 1.25;\r\n\r\n  // rapid and express routes get rectangular/rounded rect shields respectively\r\n\r\n  if (routeText.endsWith('R') || routeText.endsWith('X')) {\r\n    html =\r\n      `<div style=\"width:30px; height:${r * 2}px; ` +\r\n      `border-radius:${routeText.endsWith('X') ? r : 0}px; `;\r\n  } else {\r\n    // all other routes get circular shields\r\n\r\n    html =\r\n      `<div style=\"width:${r * 2}px; height:${r * 2}px; ` +\r\n      `border-radius: ${r + 1}px; `;\r\n  }\r\n\r\n  html +=\r\n    `${'position:relative; top:5px; left:5px; ' +\r\n      'border-style:solid; border-color:'}${color}; ` +\r\n    `border-width: ${waitScaled / 1.5 + 1.0}px;` +\r\n    `background-color:white;` +\r\n    `font-size:${75 + waitScaled * 15}%; font-weight: ${400 + waitScaled * 75};\r\n     display:flex; align-items: center;\r\n     justify-content: center;\">${routeText}</div>`;\r\n\r\n  return html;\r\n}\r\n","import React, { Component, createRef, Fragment } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport GpsIcon from '@material-ui/icons/GpsFixed';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  Map,\r\n  TileLayer,\r\n  CircleMarker,\r\n  Marker,\r\n  Tooltip,\r\n  Polyline,\r\n} from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport Control from 'react-leaflet-control';\r\nimport * as d3 from 'd3';\r\nimport { Snackbar } from '@material-ui/core';\r\nimport {\r\n  getDownstreamStopIds,\r\n  getTripPoints,\r\n  isInServiceArea,\r\n} from '../helpers/mapGeometry';\r\nimport { filterRoutes, milesBetween } from '../helpers/routeCalculations';\r\nimport { handleSpiderMapClick } from '../actions';\r\nimport { Agencies } from '../config';\r\n\r\nimport MapShield from './MapShield';\r\n\r\nconst CLICK_RADIUS_MI = 0.25; // maximum radius for stops near a point\r\n\r\n// Displays alert when an invalid location is set\r\nfunction ValidLocationAlert(props) {\r\n  return (\r\n    <Snackbar\r\n      message=\"Location is not in service area\"\r\n      open={props.showAlert}\r\n    />\r\n  );\r\n}\r\n\r\nclass MapSpider extends Component {\r\n  /**\r\n   * A function that returns one of ten colors given a route index.\r\n   * (index modulo 10).\r\n   */\r\n\r\n  routeColorOptions = d3.scaleQuantize([0, 9], d3.schemeCategory10);\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // for now, only supports 1 agency at a time.\r\n    // todo: support multiple agencies on one map\r\n    this.agency = Agencies[0];\r\n\r\n    this.state = {\r\n      // Should be true by default, so that we don't display the snackbar\r\n      isValidLocation: true,\r\n      height: this.computeHeight(),\r\n    };\r\n\r\n    this.mapRef = createRef(); // used for geolocating\r\n\r\n    this.handleLocationFound = this.handleLocationFound.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.boundUpdate = this.updateDimensions.bind(this);\r\n    window.addEventListener('resize', this.boundUpdate);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateDimensions.bind(this));\r\n  }\r\n\r\n  /**\r\n   * Places a Leaflet Marker (blue pin) at the clicked or geolocated map location.\r\n   * Like the isochrone, the marker can be dragged to get new results.\r\n   */\r\n  SpiderOriginMarker = props => {\r\n    let latlng = null;\r\n\r\n    return props.spiderLatLng ? (\r\n      <Marker\r\n        position={props.spiderLatLng}\r\n        draggable\r\n        onMove={e => {\r\n          latlng = e.latlng;\r\n        }}\r\n        onMoveEnd={() => {\r\n          this.handleLocationFound({ latlng });\r\n        }}\r\n      />\r\n    ) : null;\r\n  };\r\n\r\n  /**\r\n   * Gets color associated with route or one of routeColorOptions\r\n   */\r\n\r\n  getRouteColor = startMarker => {\r\n    const routeColor = startMarker.routeInfo.color\r\n      ? `#${startMarker.routeInfo.color}`\r\n      : this.routeColorOptions(startMarker.routeIndex % 10);\r\n\r\n    return routeColor;\r\n  };\r\n\r\n  /**\r\n   * Creates a clickable Marker with a custom svg icon (MapShield) for the route\r\n   * represented by startMarker.\r\n   *\r\n   * https://medium.com/@nikjohn/creating-a-dynamic-jsx-marker-with-react-leaflet-f75fff2ddb9\r\n   */\r\n\r\n  generateShield = (startMarker, waitScaled) => {\r\n    const lastStop =\r\n      startMarker.downstreamStops[startMarker.downstreamStops.length - 1];\r\n    const shieldPosition = [lastStop.lat, lastStop.lon];\r\n\r\n    const icon = L.divIcon({\r\n      className: 'custom-icon', // this is needed to turn off the default icon styling (blank square)\r\n      html: MapShield({\r\n        waitScaled,\r\n        color: this.getRouteColor(startMarker),\r\n        routeText: startMarker.routeId,\r\n      }),\r\n    });\r\n\r\n    return (\r\n      <Marker\r\n        key={`${startMarker.routeId}-${startMarker.direction.id}-Shield`}\r\n        position={shieldPosition}\r\n        icon={icon}\r\n        riseOnHover\r\n        onClick={e => {\r\n          e.originalEvent.view.L.DomEvent.stopPropagation(e);\r\n          this.props.dispatch({\r\n            type: 'ROUTESCREEN',\r\n            payload: {\r\n              routeId: startMarker.routeId,\r\n              directionId: startMarker.direction.id,\r\n              startStopId: startMarker.stopId,\r\n              endStopId: lastStop.stopId,\r\n            },\r\n            query: this.props.query,\r\n          });\r\n        }}\r\n      ></Marker>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Rendering of stops nearest to click or current location\r\n   */\r\n\r\n  getStartMarkers = () => {\r\n    let items = null;\r\n\r\n    /* eslint-disable react/no-array-index-key */\r\n\r\n    const selectedStops = this.props.spiderSelection.stops;\r\n\r\n    if (selectedStops) {\r\n      items = selectedStops.map((startMarker, index) => {\r\n        const position = [startMarker.stop.lat, startMarker.stop.lon];\r\n\r\n        return (\r\n          <CircleMarker\r\n            key={`startMarker-${index}`}\r\n            center={position}\r\n            radius=\"8\"\r\n            fillColor={this.getRouteColor(startMarker)}\r\n            fillOpacity={0.2}\r\n            stroke={false}\r\n          >\r\n            <Tooltip>\r\n              {startMarker.routeTitle}\r\n              <br />\r\n              {startMarker.direction.title}\r\n              <br />\r\n              {startMarker.stop.title}\r\n              <br />\r\n              {Math.round(startMarker.miles * 5280)} feet\r\n            </Tooltip>\r\n          </CircleMarker>\r\n        );\r\n      });\r\n    }\r\n    return items;\r\n  };\r\n\r\n  // Rendering of route from nearest stop to terminal.\r\n\r\n  DownstreamLines = () => {\r\n    const statsByRouteId = this.props.statsByRouteId;\r\n\r\n    // One polyline for each start marker\r\n\r\n    let items = null;\r\n\r\n    const selectedStops = this.props.spiderSelection.stops;\r\n\r\n    if (selectedStops) {\r\n      items = selectedStops.map(startMarker => {\r\n        const downstreamStops = startMarker.downstreamStops;\r\n\r\n        const polylines = [];\r\n\r\n        // Add a base polyline connecting the stops.  One polyline between each stop gives better tooltips\r\n        // when selecting a line.\r\n\r\n        const stats = statsByRouteId[startMarker.routeId] || {};\r\n\r\n        const waitScaled = stats.waitRankCount\r\n          ? Math.trunc((1 - stats.waitRank / stats.waitRankCount) * 3)\r\n          : 0;\r\n\r\n        for (let i = 0; i < downstreamStops.length - 1; i++) {\r\n          // for each stop\r\n          polylines.push(this.generatePolyline(startMarker, waitScaled, i));\r\n        }\r\n\r\n        // Add a solid circle at the terminal stop.\r\n        polylines.push(this.generateTerminalCircle(startMarker, waitScaled));\r\n\r\n        // Add a route shield next to the terminal stop.\r\n        polylines.push(this.generateShield(startMarker, waitScaled));\r\n\r\n        return polylines;\r\n      });\r\n    }\r\n\r\n    return <Fragment>{items}</Fragment>;\r\n  };\r\n\r\n  // Creates a circle at the terminal of a route.\r\n\r\n  generateTerminalCircle = (startMarker, waitScaled) => {\r\n    const lastStop =\r\n      startMarker.downstreamStops[startMarker.downstreamStops.length - 1];\r\n    const terminalPosition = [lastStop.lat, lastStop.lon];\r\n\r\n    return (\r\n      <CircleMarker\r\n        key={`startMarker-${startMarker.routeId}-terminal-${lastStop.id}`}\r\n        center={terminalPosition}\r\n        radius={3.0 + waitScaled / 2.0}\r\n        fillColor={this.getRouteColor(startMarker)}\r\n        fillOpacity={0.75}\r\n        stroke={false}\r\n      ></CircleMarker>\r\n    );\r\n  };\r\n\r\n  // Creates a line between two stops.\r\n\r\n  generatePolyline = (startMarker, waitScaled, i) => {\r\n    const downstreamStops = startMarker.downstreamStops;\r\n\r\n    const computedWeight = waitScaled * 1.5 + 3;\r\n\r\n    return (\r\n      <Polyline\r\n        key={`poly-${startMarker.routeId}-${downstreamStops[i].id}`}\r\n        positions={getTripPoints(\r\n          startMarker.routeInfo,\r\n          startMarker.direction,\r\n          downstreamStops[i].id,\r\n          downstreamStops[i + 1].id,\r\n        )}\r\n        color={this.getRouteColor(startMarker)}\r\n        opacity={0.5}\r\n        weight={computedWeight}\r\n        onMouseOver={e => {\r\n          // on hover, draw segment wider\r\n          e.target.setStyle({ opacity: 1, weight: computedWeight + 4 });\r\n          return true;\r\n        }}\r\n        onFocus={e => {\r\n          this.onMouseOver(e);\r\n        }}\r\n        onMouseOut={e => {\r\n          e.target.setStyle({ opacity: 0.5, weight: computedWeight });\r\n          return true;\r\n        }}\r\n        onBlur={e => {\r\n          this.onMouseOut(e);\r\n        }}\r\n        // when this route segment is clicked, plot only the stops for this route/dir by setting the first stop\r\n        onClick={e => {\r\n          e.originalEvent.view.L.DomEvent.stopPropagation(e);\r\n\r\n          this.props.dispatch({\r\n            type: 'ROUTESCREEN',\r\n            payload: {\r\n              routeId: startMarker.routeId,\r\n              directionId: startMarker.direction.id,\r\n              startStopId: startMarker.stopId,\r\n              endStopId: downstreamStops[i + 1].id,\r\n            },\r\n            query: this.props.query,\r\n          });\r\n        }}\r\n      >\r\n        <Tooltip>\r\n          {/* should this hover text be a leaflet control in a fixed position? */}\r\n          {startMarker.routeTitle}\r\n          <br />\r\n          {startMarker.direction.title}\r\n          <br />\r\n          {downstreamStops[i + 1].title}\r\n          <br />\r\n        </Tooltip>\r\n      </Polyline>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Geolocation button handler.\r\n   */\r\n  handleGeoLocate = e => {\r\n    e.preventDefault();\r\n    const map = this.mapRef.current;\r\n    if (map != null) {\r\n      map.leafletElement.locate(); // this is for geolocation, see https://leafletjs.com/examples/mobile/\r\n    }\r\n  };\r\n\r\n  /**\r\n   * When the map is clicked on, pass the event on to the location handler.\r\n   */\r\n  handleMapClick = e => {\r\n    const map = this.mapRef.current;\r\n    if (map != null) {\r\n      this.handleLocationFound(e);\r\n    }\r\n  };\r\n\r\n  updateDimensions() {\r\n    const height = this.computeHeight();\r\n    this.setState({ height });\r\n  }\r\n\r\n  /* Make the map full height unless the window is smaller than the sm breakpoint (640px), in which\r\n   * case make the map half height.\r\n   *\r\n   * TODO: Need to convert this component to a functional component.  Then we can use the useTheme\r\n   * hook to programatically access the breakpoint widths.\r\n   *\r\n   * Note: This code has to be adjusted to be kept in sync with the UI layout.\r\n   */\r\n\r\n  computeHeight() {\r\n    return (\r\n      (window.innerWidth >= 640 ? window.innerHeight : window.innerHeight / 2) -\r\n      64 /* blue app bar */\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handles events with a location (either click, or geolocation call).\r\n   * Find nearby stops for each route/direction and plot the rest of the route to its terminal.\r\n   */\r\n  handleLocationFound(e) {\r\n    const { latlng } = e;\r\n\r\n    // const icon = L.divIcon({\r\n    //   className: 'custom-icon', // this is needed to turn off the default icon styling (blank square)\r\n    //   html: MapShield({\r\n    //     waitScaled,\r\n    //     color: routeColor,\r\n    //     routeText: startMarker.routeId,\r\n    //   }),\r\n    // });\r\n    // Set whether the location is valid\r\n    this.setState({ isValidLocation: isInServiceArea(this.agency.id, latlng) });\r\n\r\n    const stops = this.findStops(latlng); // note: all lowercase name in event.\r\n\r\n    // Add the downstream stops to the terminal.\r\n\r\n    stops.forEach(stop => {\r\n      this.addDownstreamStops(stop);\r\n    });\r\n\r\n    // Fire events here indicating that the route list should be filtered to just the\r\n    // routes corresponding to \"stops\".\r\n\r\n    const { onSpiderMapClick } = this.props;\r\n    onSpiderMapClick(stops, latlng);\r\n  }\r\n\r\n  /**\r\n   * Append info about the downstream stops to the given stop object for plotting on the map.\r\n   */\r\n  addDownstreamStops(targetStop) {\r\n    const routeInfo = targetStop.routeInfo;\r\n\r\n    const stopIds = getDownstreamStopIds(\r\n      routeInfo,\r\n      targetStop.direction,\r\n      targetStop.stopId,\r\n    );\r\n    stopIds.unshift(targetStop.stopId);\r\n\r\n    targetStop.downstreamStops = stopIds.map(stopId => {\r\n      return routeInfo.stops[stopId];\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Use brute force iteration to find the nearest stop for each direction of each route.\r\n   *\r\n   * Take only stops within CLICK_RADIUS_MI miles and sort by distance.\r\n   */\r\n  findStops(latLng) {\r\n    const { routes } = this.props;\r\n    const latLon = { lat: latLng.lat, lon: latLng.lng };\r\n    let stopsByRouteAndDir = [];\r\n\r\n    const filteredRoutes = filterRoutes(routes);\r\n    for (let i = 0; i < filteredRoutes.length; i++) {\r\n      // optimize this on back end\r\n      const route = filteredRoutes[i];\r\n\r\n      if (route.directions) {\r\n        // eslint-disable-next-line no-loop-func\r\n        route.directions.forEach(direction => {\r\n          const stopList = direction.stops;\r\n          const nearest = this.findNearestStop(latLon, stopList, route.stops);\r\n          nearest.routeId = route.id;\r\n          nearest.routeIndex = i;\r\n          nearest.routeTitle = route.title;\r\n          nearest.direction = direction;\r\n          nearest.routeInfo = route;\r\n          stopsByRouteAndDir.push(nearest);\r\n        });\r\n      }\r\n    }\r\n    // truncate by distance (CLICK_RADIUS_MI miles) and then sort\r\n\r\n    stopsByRouteAndDir = stopsByRouteAndDir.filter(\r\n      stop => stop.miles < CLICK_RADIUS_MI,\r\n    );\r\n    stopsByRouteAndDir.sort((a, b) => a.miles - b.miles);\r\n\r\n    return stopsByRouteAndDir;\r\n  }\r\n\r\n  /**\r\n   * Returns the nearest stop Object to the given latLon coordinates.\r\n   *\r\n   * stopList is an array of strings (stop ids) that are keys into the stopHash,\r\n   * a dictionary of stops (as found in route config objects).\r\n   */\r\n  findNearestStop(latLon, stopList, stopHash) {\r\n    let nearest = { miles: -1, stop: null, stopId: null };\r\n    stopList.forEach(stop => {\r\n      const miles = milesBetween(latLon, stopHash[stop]);\r\n      if (nearest.miles === -1 || miles < nearest.miles) {\r\n        nearest = { miles, stop: stopHash[stop], stopId: stop };\r\n      }\r\n    });\r\n    return nearest;\r\n  }\r\n\r\n  /**\r\n   * Main React render method.\r\n   */\r\n  render() {\r\n    const { position, zoom, spiderSelection } = this.props;\r\n    const { isValidLocation } = this.state;\r\n    const mapClass = { width: '100%', height: this.state.height };\r\n    const startMarkers = this.getStartMarkers();\r\n\r\n    return (\r\n      <div>\r\n        <ValidLocationAlert showAlert={!isValidLocation} />\r\n        <Map\r\n          center={position || this.agency.initialMapCenter}\r\n          zoom={zoom || this.agency.initialMapZoom}\r\n          style={mapClass}\r\n          minZoom={5}\r\n          maxZoom={18}\r\n          onClick={this.handleMapClick}\r\n          onLocationfound={this.handleLocationFound}\r\n          ref={this.mapRef}\r\n        >\r\n          <TileLayer\r\n            attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.'\r\n            url=\"https://stamen-tiles.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}.png\"\r\n            opacity={0.3}\r\n          />\r\n          {/* see http://maps.stamen.com for details */}\r\n          <this.DownstreamLines />\r\n          {startMarkers}\r\n          <this.SpiderOriginMarker spiderLatLng={spiderSelection.latLng} />\r\n          <Control position=\"topright\">\r\n            <div className=\"map-instructions\">\r\n              {spiderSelection.latLng && startMarkers && startMarkers.length\r\n                ? 'Click anywhere along a route to see statistics for trips between the two stops.'\r\n                : 'Click anywhere in the city to see the routes near that point.'}\r\n            </div>\r\n          </Control>\r\n          <Control position=\"bottomleft\">\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={this.handleGeoLocate}\r\n            >\r\n              <GpsIcon />\r\n              &nbsp; Routes near me\r\n            </Button>\r\n            &nbsp;\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={() => this.props.onSpiderMapClick([], null)}\r\n            >\r\n              Clear map\r\n            </Button>\r\n            <br />\r\n            <br />\r\n          </Control>\r\n        </Map>\r\n      </div>\r\n    );\r\n  } // end render\r\n} // end class\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    routes: state.routes.data,\r\n    statsByRouteId: state.agencyMetrics.statsByRouteId,\r\n    graphParams: state.graphParams,\r\n    spiderSelection: state.spiderSelection,\r\n    query: state.location.query,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSpiderMapClick: (stops, latLng) =>\r\n      dispatch(handleSpiderMapClick(stops, latLng)),\r\n    dispatch,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(MapSpider);\r\n","import React, { useState, Fragment } from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport { lighten, makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport InfoIcon from '@material-ui/icons/InfoOutlined';\r\nimport { connect } from 'react-redux';\r\nimport Navlink from 'redux-first-router-link';\r\nimport {\r\n  filterRoutes,\r\n  scoreBackgroundColor,\r\n  scoreContrastColor,\r\n} from '../helpers/routeCalculations';\r\n\r\nfunction getComparisonFunction(order, orderBy) {\r\n  // Sort null values to bottom regardless of ascending/descending\r\n  const factor = order === 'desc' ? 1 : -1;\r\n  return (a, b) => {\r\n    const aValue = a[orderBy];\r\n    const bValue = b[orderBy];\r\n\r\n    if (aValue == null && bValue == null) {\r\n      return 0;\r\n    }\r\n    if (aValue == null) {\r\n      return 1;\r\n    }\r\n    if (bValue == null) {\r\n      return -1;\r\n    }\r\n\r\n    if (bValue < aValue) {\r\n      return -factor;\r\n    }\r\n    if (bValue > aValue) {\r\n      return factor;\r\n    }\r\n    return 0;\r\n  };\r\n}\r\n\r\n/**\r\n * Sorts the given array by an object property.  Equal values are ordered by array index.\r\n *\r\n * Sorting by title is a special case because the original order of the routes array is\r\n * better than sorting route title alphabetically.  For example, 1 should be followed by\r\n * 1AX rather than 10 and 12.\r\n *\r\n * @param {Array} array      Array to sort\r\n * @param {String} sortOrder Either 'desc' or 'asc'\r\n * @param {String} orderBy   Property to sort by\r\n * @returns {Array}          The sorted array\r\n */\r\nfunction stableSort(array, sortOrder, orderBy) {\r\n  // special case for title sorting that short circuits the use of the comparator\r\n\r\n  if (orderBy === 'title') {\r\n    if (sortOrder === 'desc') {\r\n      const newArray = [...array].reverse();\r\n      return newArray;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  const cmp = getComparisonFunction(sortOrder, orderBy);\r\n\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = cmp(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map(el => el[0]);\r\n}\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { order, orderBy, onRequestSort, columns } = props;\r\n  const createSortHandler = property => event => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {columns.map(column => (\r\n          <TableCell\r\n            key={column.id}\r\n            align={column.numeric ? 'right' : 'left'}\r\n            padding=\"none\"\r\n            style={{ paddingRight: 6, paddingBottom: 3 }}\r\n            sortDirection={orderBy === column.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === column.id}\r\n              direction={order}\r\n              onClick={createSortHandler(column.id)}\r\n            >\r\n              {column.label}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  order: PropTypes.string.isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles(theme => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  spacer: {\r\n    flex: '1 1 100%',\r\n  },\r\n  actions: {\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  title: {\r\n    flex: '0 0 auto',\r\n  },\r\n  popover: {\r\n    padding: theme.spacing(2),\r\n    maxWidth: 500,\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = props => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected, columns } = props;\r\n\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  function handleClick(event) {\r\n    setAnchorEl(event.currentTarget);\r\n  }\r\n\r\n  function handleClose() {\r\n    setAnchorEl(null);\r\n  }\r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      <div className={classes.title}>\r\n        {numSelected > 0 ? (\r\n          <Typography color=\"inherit\" variant=\"subtitle1\">\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography variant=\"h6\" id=\"tableTitle\">\r\n            Routes\r\n            <IconButton size=\"small\" onClick={handleClick}>\r\n              <InfoIcon fontSize=\"small\" />\r\n            </IconButton>\r\n          </Typography>\r\n        )}\r\n      </div>\r\n      <div className={classes.spacer} />\r\n      <div className={classes.actions}>\r\n        <Tooltip title=\"Filter list\">\r\n          <IconButton aria-label=\"Filter list\">\r\n            <FilterListIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </div>\r\n\r\n      <Popover\r\n        open={Boolean(anchorEl)}\r\n        anchorEl={anchorEl}\r\n        onClose={handleClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'center',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'center',\r\n        }}\r\n      >\r\n        <div className={classes.popover}>\r\n          {columns.map(column => {\r\n            return column.helpContent ? (\r\n              <p key={column.id}>{column.helpContent}</p>\r\n            ) : null;\r\n          })}\r\n        </div>\r\n      </Popover>\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  tableWrapper: {\r\n    overflowX: 'auto',\r\n  },\r\n}));\r\n\r\nfunction makeChip(label, score) {\r\n  return (\r\n    <Chip\r\n      style={{\r\n        color: scoreContrastColor(score),\r\n        backgroundColor: scoreBackgroundColor(score),\r\n      }}\r\n      label={label}\r\n    />\r\n  );\r\n}\r\n\r\nfunction RouteTable(props) {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState('asc');\r\n  const [orderBy, setOrderBy] = React.useState('title');\r\n  const dense = true;\r\n  const theme = useTheme();\r\n\r\n  const { statsByRouteId } = props;\r\n\r\n  function handleRequestSort(event, property) {\r\n    const isDesc = orderBy === property && order === 'desc';\r\n    setOrder(isDesc ? 'asc' : 'desc');\r\n    setOrderBy(property);\r\n  }\r\n\r\n  let routes = props.routes ? filterRoutes(props.routes) : [];\r\n  const spiderStops = props.spiderSelection.stops;\r\n\r\n  // filter the route list down to the spider routes if needed\r\n\r\n  if (spiderStops && spiderStops.length > 0) {\r\n    const spiderRouteIds = spiderStops.map(spider => spider.routeId);\r\n    routes = routes.filter(myRoute => spiderRouteIds.includes(myRoute.id));\r\n  }\r\n\r\n  const displayedRouteStats = routes.map(route => {\r\n    return {\r\n      route,\r\n      ...(statsByRouteId[route.id] || {}),\r\n    };\r\n  });\r\n\r\n  const columns = [\r\n    {\r\n      id: 'title',\r\n      numeric: false,\r\n      label: 'Name',\r\n      rowValue: row => {\r\n        return (\r\n          <Navlink\r\n            style={{\r\n              color: theme.palette.primary.dark,\r\n              textDecoration: 'none',\r\n            }}\r\n            to={{\r\n              type: 'ROUTESCREEN',\r\n              payload: {\r\n                agencyId: row.route.agencyId,\r\n                routeId: row.route.id,\r\n              },\r\n              query: props.query,\r\n            }}\r\n          >\r\n            {row.route.title}\r\n          </Navlink>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      id: 'totalScore',\r\n      numeric: true,\r\n      label: 'Score',\r\n      rowValue: row => {\r\n        return makeChip(\r\n          row.totalScore == null ? '--' : row.totalScore,\r\n          row.totalScore,\r\n        );\r\n      },\r\n      helpContent: (\r\n        <Fragment>\r\n          <b>Score</b> is the average of subscores (0-100) for median wait,\r\n          on-time %, average speed, and travel time variability. Click on a\r\n          route to see its metrics and explanations of how the subscores are\r\n          calculated.\r\n        </Fragment>\r\n      ),\r\n    },\r\n    {\r\n      id: 'medianWaitTime',\r\n      numeric: true,\r\n      label: 'Median Wait',\r\n      rowValue: row => {\r\n        return makeChip(\r\n          row.medianWaitTime == null\r\n            ? '--'\r\n            : `${row.medianWaitTime.toFixed(0)} min`,\r\n          row.medianWaitScore,\r\n        );\r\n      },\r\n      helpContent: (\r\n        <Fragment>\r\n          <b>Median Wait</b> is the 50th percentile (typical) wait time for a\r\n          rider arriving randomly at a stop while the route is running.\r\n        </Fragment>\r\n      ),\r\n    },\r\n    {\r\n      id: 'onTimeRate',\r\n      numeric: true,\r\n      label: 'On-Time %',\r\n      rowValue: row => {\r\n        return makeChip(\r\n          row.onTimeRate == null\r\n            ? '--'\r\n            : `${(row.onTimeRate * 100).toFixed(0)}%`,\r\n          row.onTimeRateScore,\r\n        );\r\n      },\r\n      helpContent: (\r\n        <Fragment>\r\n          <b>On-Time %</b> is the percentage of scheduled departure times where\r\n          a vehicle departed less than 5 minutes after the scheduled departure\r\n          time or less than 1 minute before the scheduled departure time.\r\n        </Fragment>\r\n      ),\r\n    },\r\n    {\r\n      id: 'averageSpeed',\r\n      numeric: true,\r\n      label: 'Average Speed',\r\n      rowValue: row => {\r\n        return makeChip(\r\n          row.averageSpeed == null\r\n            ? '--'\r\n            : `${row.averageSpeed.toFixed(0)} mph`,\r\n          row.speedScore,\r\n        );\r\n      },\r\n      helpContent: (\r\n        <Fragment>\r\n          <b>Average Speed</b> is the speed of the 50th percentile (typical) end\r\n          to end trip, averaged for all directions.\r\n        </Fragment>\r\n      ),\r\n    },\r\n    {\r\n      id: 'travelTimeVariability',\r\n      numeric: true,\r\n      label: 'Travel Time Variability',\r\n      rowValue: row => {\r\n        return makeChip(\r\n          row.travelTimeVariability == null\r\n            ? '--'\r\n            : `\\u00b1 ${(row.travelTimeVariability / 2).toFixed(0)} min`,\r\n          row.travelVarianceScore,\r\n        );\r\n      },\r\n      helpContent: (\r\n        <Fragment>\r\n          <b>Travel time variability</b> is the 90th percentile end to end\r\n          travel time minus the 10th percentile travel time. This measures how\r\n          much extra travel time is needed for some trips.\r\n        </Fragment>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <EnhancedTableToolbar columns={columns} numSelected={0} />\r\n      <div className={classes.tableWrapper}>\r\n        <Table aria-labelledby=\"tableTitle\" size={dense ? 'small' : 'medium'}>\r\n          <EnhancedTableHead\r\n            order={order}\r\n            orderBy={orderBy}\r\n            onRequestSort={handleRequestSort}\r\n            rowCount={displayedRouteStats.length}\r\n            columns={columns}\r\n          />\r\n          <TableBody>\r\n            {stableSort(displayedRouteStats, order, orderBy).map(row => {\r\n              return (\r\n                <TableRow\r\n                  hover\r\n                  role=\"checkbox\"\r\n                  tabIndex={-1}\r\n                  key={row.route.id}\r\n                >\r\n                  {columns.map(column => {\r\n                    return (\r\n                      <TableCell\r\n                        key={column.id}\r\n                        align={column.numeric ? 'right' : 'left'}\r\n                        padding=\"none\"\r\n                        style={{\r\n                          border: 'none',\r\n                          paddingTop: 6,\r\n                          paddingBottom: 6,\r\n                        }}\r\n                      >\r\n                        {column.rowValue(row)}\r\n                      </TableCell>\r\n                    );\r\n                  })}\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  spiderSelection: state.spiderSelection,\r\n  statsByRouteId: state.agencyMetrics.statsByRouteId,\r\n  query: state.location.query,\r\n});\r\n\r\nexport default connect(mapStateToProps)(RouteTable);\r\n","import React, { Fragment } from 'react';\r\nimport { NavLink } from 'redux-first-router-link';\r\n\r\nexport default function AppBarLogo(props) {\r\n  const logoStyle = {\r\n    maxHeight: '38px',\r\n    paddingTop: '5px',\r\n    paddingLeft: '5px',\r\n    paddingRight: '14px',\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <NavLink to={{ type: 'DASHBOARD', query: props.query }} exact strict>\r\n        <img\r\n          src={`${process.env.PUBLIC_URL}/images/OpenTransit.png?v3`}\r\n          style={logoStyle}\r\n          alt=\"logo\"\r\n        />\r\n      </NavLink>\r\n    </Fragment>\r\n  );\r\n}\r\n","import { NOT_FOUND } from 'redux-first-router';\r\n\r\nexport const components = {\r\n  ABOUT: 'About',\r\n  ISOCHRONE: 'Isochrone',\r\n  LANDING: 'Landing',\r\n  DASHBOARD: 'Dashboard',\r\n  ROUTESCREEN: 'RouteScreen',\r\n  DATADIAGNOSTIC: 'DataDiagnostic',\r\n  [NOT_FOUND]: 'NotFound',\r\n};\r\n\r\n/**\r\n * Find the current dispatch type.  This is the key of the \"components\" object\r\n * whose value matches the current page name.\r\n */\r\nexport function typeForPage(page) {\r\n  let currentType = null;\r\n  const types = Object.keys(components);\r\n  for (let i = 0; i < types.length; i++) {\r\n    if (page === components[types[i]]) {\r\n      currentType = types[i];\r\n      break;\r\n    }\r\n  }\r\n  return currentType;\r\n}\r\n\r\nexport default (state = 'DASHBOARD', action = {}) =>\r\n  components[action.type] || state;\r\n","import React from 'react';\r\nimport { NavLink } from 'redux-first-router-link';\r\nimport { connect } from 'react-redux';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport MapRoundedIcon from '@material-ui/icons/MapRounded';\r\nimport TimelineRoundedIcon from '@material-ui/icons/TimelineRounded';\r\nimport CodeRoundedIcon from '@material-ui/icons/CodeRounded';\r\nimport InfoRoundedIcon from '@material-ui/icons/InfoRounded';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { components } from '../reducers/page';\r\n\r\nfunction SidebarButton(props) {\r\n  const currentPage = props.currentPage;\r\n  const [drawerOpen, setDrawer] = React.useState(false);\r\n  const theme = useTheme();\r\n\r\n  function toggleDrawer() {\r\n    setDrawer(!drawerOpen);\r\n  }\r\n\r\n  const activeStyle = {\r\n    fontWeight: 'bold',\r\n    color: theme.palette.primary.dark,\r\n    textDecoration: 'none',\r\n    cursor: 'default',\r\n  };\r\n\r\n  const inactiveStyle = {\r\n    fontWeight: 'normal',\r\n    color: '#000000',\r\n    textDecoration: 'none',\r\n    cursor: 'pointer',\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <IconButton\r\n        color=\"inherit\"\r\n        aria-label=\"Open drawer\"\r\n        onClick={toggleDrawer}\r\n        edge=\"start\"\r\n      >\r\n        <MenuIcon />\r\n      </IconButton>\r\n      <Drawer anchor=\"left\" open={drawerOpen} onClose={toggleDrawer}>\r\n        <div style={{ width: 250 }}>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"Open drawer\"\r\n            onClick={toggleDrawer}\r\n            edge=\"start\"\r\n          >\r\n            <ChevronLeftIcon color=\"primary\" />\r\n          </IconButton>\r\n          <List>\r\n            <ListItem\r\n              component={NavLink}\r\n              to={{\r\n                type: 'DASHBOARD',\r\n                query: props.currentLocation.query,\r\n              }}\r\n              activeStyle={activeStyle}\r\n              exact\r\n              style={inactiveStyle}\r\n              button\r\n              selected={currentPage === components.DASHBOARD}\r\n            >\r\n              <ListItemIcon>\r\n                <MapRoundedIcon color=\"primary\" />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Dashboard\" />\r\n            </ListItem>\r\n            <ListItem\r\n              component={NavLink}\r\n              to={{\r\n                type: 'ISOCHRONE',\r\n                query: props.currentLocation.query,\r\n              }}\r\n              activeStyle={activeStyle}\r\n              exact\r\n              style={inactiveStyle}\r\n              button\r\n              selected={currentPage === components.ISOCHRONE}\r\n            >\r\n              <ListItemIcon>\r\n                <TimelineRoundedIcon color=\"primary\" />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Isochrone\" />\r\n            </ListItem>\r\n            <ListItem\r\n              component={NavLink}\r\n              to={{\r\n                type: 'DATADIAGNOSTIC',\r\n                query: props.currentLocation.query,\r\n              }}\r\n              activeStyle={activeStyle}\r\n              exact\r\n              style={inactiveStyle}\r\n              button\r\n              selected={currentPage === components.DATADIAGNOSTIC}\r\n            >\r\n              <ListItemIcon>\r\n                <CodeRoundedIcon color=\"primary\" />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Developer Tools\" />\r\n            </ListItem>\r\n            <Divider light />\r\n            <ListItem\r\n              component=\"a\"\r\n              href=\"https://sites.google.com/view/opentransit\"\r\n              target=\"_blank\"\r\n              onClick={toggleDrawer}\r\n              button\r\n            >\r\n              <ListItemIcon>\r\n                <InfoRoundedIcon color=\"primary\" />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"About\" style={inactiveStyle} />\r\n            </ListItem>\r\n          </List>\r\n        </div>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  currentPage: state.page,\r\n  currentLocation: state.location,\r\n});\r\n\r\nexport default connect(mapStateToProps)(SidebarButton);\r\n","/* eslint-disable no-case-declarations */\r\n\r\n/**\r\n * This reducer tracks the loading (is fetching) state of all asynchronous\r\n * data calls, as described in:\r\n * https://medium.com/stashaway-engineering/react-redux-tips-better-way-to-handle-loading-flags-in-your-reducers-afda42a804c6\r\n *\r\n * The action names must follow this pattern:\r\n *\r\n * - REQUEST_XXX\r\n * - RECEIVED_XXX\r\n * - ERROR_XXX\r\n *\r\n * where XXX is something like GRAPH_DATA.\r\n *\r\n * Then state.loading.GRAPH_DATA will be true if the REQUEST was the last action and\r\n * false otherwise.\r\n *\r\n */\r\nexport default (state = {}, action) => {\r\n  const { type } = action;\r\n  const matches = /(REQUEST|RECEIVED|ERROR)_(.*)/.exec(type);\r\n\r\n  // not a REQUEST_* / RECEIVED_* / FAILURE_* action, so we ignore them\r\n\r\n  if (!matches) return state;\r\n\r\n  const [, requestState, requestName] = matches;\r\n  return {\r\n    ...state,\r\n    // Store whether a request is happening at the moment or not\r\n    // e.g. will be true when receiving REQUEST_TRIP_METRICS\r\n    //      and false when receiving REQUEST_TRIP_METRICS / REQUEST_TRIP_METRICS\r\n    [requestName]: requestState === 'REQUEST',\r\n  };\r\n};\r\n\r\n/**\r\n * Selector function returnig whether a loading indicator is needed.\r\n * This is a simplistic function that returns true if anything is being\r\n * fetched.  It could be enhanced to accept an argument specifying which\r\n * kinds of requests to return true for.\r\n *\r\n * @param state App state passed in via mapStateToProps\r\n * @returns Whether any loading is going on\r\n */\r\nexport function isLoadingRequest(state) {\r\n  const isLoading = Object.keys(state.loading).reduce(\r\n    (accumulator, currentValue) => accumulator || state.loading[currentValue],\r\n    false,\r\n  );\r\n  return isLoading;\r\n}\r\n","import { APP_NAME } from '../UIConstants';\r\n\r\nconst DEFAULT = APP_NAME;\r\n\r\nexport default (state = DEFAULT, action = {}) => {\r\n  switch (action.type) {\r\n    case 'DASHBOARD':\r\n      return `Dashboard | ${DEFAULT}`;\r\n    case 'ABOUT':\r\n      return `About | ${DEFAULT}`;\r\n    case 'ISOCHRONE':\r\n      return `Isochrone | ${DEFAULT}`;\r\n    case 'ROUTESCREEN':\r\n      return `Routes | ${DEFAULT}`;\r\n    case 'DATADIAGNOSTIC':\r\n      return `Developer Tools | ${DEFAULT}`;\r\n    case 'LANDING':\r\n      return `Landing | ${DEFAULT}`;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import Moment from 'moment';\r\nimport { WEEKDAYS, WEEKENDS } from '../UIConstants';\r\nimport {\r\n  isIgnoredRoute,\r\n  addRanks,\r\n  computeScores,\r\n} from '../helpers/routeCalculations';\r\n\r\nexport { default as loading } from './loadingReducer';\r\nexport { default as title } from './titleReducer';\r\nexport { default as page } from './page';\r\n\r\nconst momentYesterday = Moment(Date.now() - 24 * 60 * 60 * 1000);\r\n\r\nexport const initialGraphParams = {\r\n  agencyId: null,\r\n  routeId: null,\r\n  directionId: null,\r\n  startStopId: null,\r\n  endStopId: null,\r\n  firstDateRange: {\r\n    startTime: null,\r\n    endTime: null,\r\n    date: momentYesterday.format('YYYY-MM-DD'), // used where date ranges are not supported\r\n    startDate: momentYesterday.format('YYYY-MM-DD'),\r\n    // days of the week is an Object, where the keys are the day's values (0-6), and the value is true for enabled\r\n    daysOfTheWeek: {\r\n      ...WEEKDAYS.reduce((map, obj) => {\r\n        map[obj.value] = true;\r\n        return map;\r\n      }, {}),\r\n      ...WEEKENDS.reduce((map, obj) => {\r\n        map[obj.value] = true;\r\n        return map;\r\n      }, {}),\r\n    },\r\n  },\r\n  secondDateRange: null,\r\n};\r\n\r\nexport function graphParams(state = initialGraphParams, action) {\r\n  switch (action.type) {\r\n    case 'RECEIVED_GRAPH_PARAMS':\r\n      return { ...state, ...action.params };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialRoutes = {\r\n  agencyId: null,\r\n  data: null, // array of route config objects for Agencies[0]\r\n};\r\n\r\nexport function routes(state = initialRoutes, action) {\r\n  switch (action.type) {\r\n    case 'REQUEST_ROUTES':\r\n      return { ...state, agencyId: action.agencyId };\r\n    case 'RECEIVED_ROUTES':\r\n      return { ...state, data: action.data, agencyId: action.agencyId };\r\n    case 'ERROR_ROUTES':\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialTripMetrics = {\r\n  data: null, // TripMetrics object returned by GraphQL API, containing 'interval' and 'timeRanges' properties\r\n  error: null,\r\n};\r\n\r\nexport function tripMetrics(state = initialTripMetrics, action) {\r\n  switch (action.type) {\r\n    case 'REQUEST_TRIP_METRICS':\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        data: null,\r\n      };\r\n    case 'RECEIVED_TRIP_METRICS':\r\n      return {\r\n        ...state,\r\n        error: null,\r\n        data: action.data,\r\n      };\r\n    case 'ERROR_TRIP_METRICS':\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n        data: null,\r\n      };\r\n    default:\r\n      break;\r\n  }\r\n  return state;\r\n}\r\n\r\nconst initialArrivals = {\r\n  data: null,\r\n  url: null,\r\n  error: null,\r\n};\r\n\r\nexport function arrivals(state = initialArrivals, action) {\r\n  switch (action.type) {\r\n    case 'RECEIVED_ARRIVALS':\r\n      return {\r\n        ...state,\r\n        data: action.data,\r\n        url: action.url,\r\n        error: null,\r\n      };\r\n    case 'ERROR_ARRIVALS':\r\n      return {\r\n        ...state,\r\n        data: null,\r\n        error: action.error,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialSpiderSelection = {\r\n  stops: [],\r\n  latLng: null,\r\n};\r\n\r\nexport function spiderSelection(state = initialSpiderSelection, action) {\r\n  switch (action.type) {\r\n    case 'RECEIVED_SPIDER_MAP_CLICK':\r\n      return {\r\n        ...state,\r\n        stops: action.stops,\r\n        latLng: action.latLng,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction addAveragesForAllDirections(routeStats, property) {\r\n  routeStats.forEach(function(stats) {\r\n    let total = 0;\r\n    let count = 0;\r\n    stats.directions.forEach(function(direction) {\r\n      const directionValue = direction[property];\r\n      if (directionValue != null) {\r\n        total += directionValue;\r\n        count += 1;\r\n      }\r\n    });\r\n    stats[property] = count > 0 ? total / count : null;\r\n  });\r\n}\r\n\r\nfunction addScores(stats) {\r\n  Object.assign(\r\n    stats,\r\n    computeScores(\r\n      stats.medianWaitTime,\r\n      stats.onTimeRate,\r\n      stats.averageSpeed,\r\n      stats.travelTimeVariability,\r\n    ),\r\n  );\r\n}\r\n\r\nfunction makeStatsByRouteId(agencyMetricsData) {\r\n  const routeStats = agencyMetricsData ? agencyMetricsData.interval.routes : [];\r\n  const rankedRouteStats = routeStats.filter(\r\n    stats =>\r\n      !isIgnoredRoute({\r\n        agencyId: agencyMetricsData.agencyId,\r\n        id: stats.routeId,\r\n      }),\r\n  );\r\n\r\n  addAveragesForAllDirections(routeStats, 'medianWaitTime');\r\n  addAveragesForAllDirections(routeStats, 'averageSpeed');\r\n  addAveragesForAllDirections(routeStats, 'onTimeRate');\r\n  addAveragesForAllDirections(routeStats, 'travelTimeVariability');\r\n\r\n  addRanks(rankedRouteStats, 'medianWaitTime', 1, 'waitRank', 'waitRankCount');\r\n  addRanks(rankedRouteStats, 'averageSpeed', -1, 'speedRank', 'speedRankCount');\r\n  addRanks(rankedRouteStats, 'onTimeRate', -1, 'onTimeRank', 'onTimeRankCount');\r\n  addRanks(\r\n    rankedRouteStats,\r\n    'travelTimeVariability',\r\n    1,\r\n    'variabilityRank',\r\n    'variabilityRankCount',\r\n  );\r\n\r\n  routeStats.forEach(function(stats) {\r\n    addScores(stats);\r\n    stats.directions.forEach(function(dirStats) {\r\n      addScores(dirStats);\r\n    });\r\n  });\r\n\r\n  addRanks(rankedRouteStats, 'totalScore', -1, 'scoreRank', 'scoreRankCount');\r\n\r\n  const statsByRouteId = {};\r\n  routeStats.forEach(stats => {\r\n    statsByRouteId[stats.routeId] = stats;\r\n  });\r\n\r\n  return statsByRouteId;\r\n}\r\n\r\nconst initialAgencyMetrics = {\r\n  variablesJson: null,\r\n  data: null,\r\n  statsByRouteId: {},\r\n};\r\n\r\nexport function agencyMetrics(state = initialAgencyMetrics, action) {\r\n  switch (action.type) {\r\n    case 'RECEIVED_AGENCY_METRICS':\r\n      return {\r\n        ...state,\r\n        variablesJson: action.variablesJson,\r\n        data: action.data,\r\n        statsByRouteId: makeStatsByRouteId(action.data),\r\n      };\r\n    case 'REQUEST_AGENCY_METRICS':\r\n      return {\r\n        ...state,\r\n        variablesJson: action.variablesJson,\r\n        data: null,\r\n        statsByRouteId: {},\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction makeSegmentsMap(routeMetricsData) {\r\n  const segmentsMap = {};\r\n\r\n  routeMetricsData.interval.directions.forEach(function(dirMetrics) {\r\n    const dirSegmentsMap = {};\r\n    dirMetrics.segments.forEach(function(segment) {\r\n      dirSegmentsMap[segment.fromStopId] = segment;\r\n    });\r\n\r\n    segmentsMap[dirMetrics.directionId] = dirSegmentsMap;\r\n  });\r\n  return segmentsMap;\r\n}\r\n\r\nconst initialRouteMetrics = {\r\n  variablesJson: null,\r\n  data: null,\r\n  segmentsMap: {},\r\n};\r\n\r\nexport function routeMetrics(state = initialRouteMetrics, action) {\r\n  switch (action.type) {\r\n    case 'RECEIVED_ROUTE_METRICS':\r\n      return {\r\n        ...state,\r\n        variablesJson: action.variablesJson,\r\n        data: action.data,\r\n        segmentsMap: makeSegmentsMap(action.data),\r\n      };\r\n    case 'REQUEST_ROUTE_METRICS':\r\n      return {\r\n        ...state,\r\n        variablesJson: action.variablesJson,\r\n        data: null,\r\n        segmentsMap: {},\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { handleGraphParams } from './actions';\r\nimport { Agencies } from './config';\r\nimport { initialGraphParams } from './reducers';\r\n\r\nexport const DATE = 'date';\r\nexport const START_DATE = 'startDate';\r\nexport const START_TIME = 'startTime';\r\nexport const END_TIME = 'endTime';\r\nexport const DAYS_OF_THE_WEEK = 'daysOfTheWeek';\r\n\r\n/**\r\n * Gets the string values from a date range object within a query string.\r\n *\r\n * @param dateRangeQuery A query subobject representing a date range.\r\n * @returns A graphParams subobject representing a date range.\r\n */\r\nfunction processDateRangeQuery(dateRangeQuery) {\r\n  const initialDateRangeParams = initialGraphParams.firstDateRange;\r\n\r\n  if (!dateRangeQuery) {\r\n    return null;\r\n  }\r\n  const { date, startDate, startTime, endTime, daysOfTheWeek } = dateRangeQuery;\r\n\r\n  // If the values are missing, we must use the defaults, in case the user is changing\r\n  // from a nondefault to default value.\r\n\r\n  const newDateRangeParams = {\r\n    date: date || initialDateRangeParams.date,\r\n    startDate: startDate || initialDateRangeParams.startDate,\r\n    startTime: startTime || null,\r\n    endTime: endTime || null,\r\n  };\r\n\r\n  if (daysOfTheWeek) {\r\n    // Deserialization via the actual query string gives us an object with values of strings\r\n    // \"true\" or \"false\", which we need to convert to booleans.  When we get here via\r\n    // dispatch, then the values are already primitive booleans.\r\n\r\n    newDateRangeParams.daysOfTheWeek = Object.keys(daysOfTheWeek).reduce(\r\n      (newDaysOfTheWeek, key) => {\r\n        if (typeof daysOfTheWeek[key] === 'string') {\r\n          newDaysOfTheWeek[key] = daysOfTheWeek[key].toUpperCase() === 'TRUE';\r\n        } else {\r\n          newDaysOfTheWeek[key] = daysOfTheWeek[key];\r\n        }\r\n        return newDaysOfTheWeek;\r\n      },\r\n      {},\r\n    );\r\n  } else {\r\n    newDateRangeParams.daysOfTheWeek = initialDateRangeParams.daysOfTheWeek;\r\n  }\r\n  return newDateRangeParams;\r\n}\r\n\r\n/**\r\n * Gets the string values from the query into an object that can be used as graphParams\r\n * if the route does not provide any values, or merged into graphParams if the route does\r\n * provide values.\r\n *\r\n * @param getState\r\n * @returns The new graphParams.\r\n */\r\nfunction processQuery(getState) {\r\n  const { location } = getState();\r\n\r\n  // Assume defaults\r\n  let firstDateRangeParams = initialGraphParams.firstDateRange;\r\n  let secondDateRangeParams = null;\r\n\r\n  // Then if there is a date range object in the query, use that.\r\n  if (location.query) {\r\n    firstDateRangeParams = processDateRangeQuery(location.query.firstDateRange);\r\n    if (!firstDateRangeParams) {\r\n      // If there is a query but no first date range values, then\r\n      // use defaults.\r\n      firstDateRangeParams = initialGraphParams.firstDateRange;\r\n    }\r\n    secondDateRangeParams = processDateRangeQuery(\r\n      location.query.secondDateRange,\r\n    );\r\n  }\r\n\r\n  const newParams = {\r\n    agencyId: Agencies[0].id, // todo: add agency to path to support multiple agencies\r\n    firstDateRange: firstDateRangeParams,\r\n    secondDateRange: secondDateRangeParams,\r\n  };\r\n\r\n  return newParams;\r\n}\r\n\r\n/**\r\n * Helper function to build a query's date range subobject.\r\n * @param params The graphParams subobject.\r\n * @returns The query subobject.\r\n */\r\nfunction dateQueryFromDateRangeParams(params) {\r\n  const dateQuery = {};\r\n  const initialDateRangeParams = initialGraphParams.firstDateRange;\r\n\r\n  if (!params) {\r\n    return undefined; // this range should not be serialized at all\r\n  }\r\n  if (params.startDate !== initialDateRangeParams.startDate) {\r\n    dateQuery.startDate = params.startDate;\r\n  }\r\n  if (params.date !== initialDateRangeParams.date) {\r\n    dateQuery.date = params.date;\r\n  }\r\n  if (params.startTime !== initialDateRangeParams.startTime) {\r\n    dateQuery.startTime = params.startTime;\r\n  }\r\n  if (params.endTime !== initialDateRangeParams.endTime) {\r\n    dateQuery.endTime = params.endTime;\r\n  }\r\n  if (\r\n    JSON.stringify(initialDateRangeParams.daysOfTheWeek) !==\r\n    JSON.stringify(params.daysOfTheWeek)\r\n  ) {\r\n    dateQuery.daysOfTheWeek = params.daysOfTheWeek;\r\n  }\r\n  return dateQuery;\r\n}\r\n\r\n/**\r\n * Builds a query object from a graphParams object. This should be used by any code\r\n * that needs to update/regenerate the query string in the url.\r\n *\r\n * @param {Object} params The current Redux state.\r\n * @returns The query object to dispatch.\r\n */\r\nexport function fullQueryFromParams(params) {\r\n  const query = {};\r\n  query.firstDateRange = dateQueryFromDateRangeParams(params.firstDateRange);\r\n  query.secondDateRange = dateQueryFromDateRangeParams(params.secondDateRange);\r\n\r\n  // Edge case:  second date range matches defaults and thus is empty.  Use a flag\r\n  // to signify that it is active.\r\n\r\n  if (\r\n    query.secondDateRange &&\r\n    Object.entries(query.secondDateRange).length === 0\r\n  ) {\r\n    // this goes in the query string just to get the second range populated\r\n    query.secondDateRange.isActive = true;\r\n  }\r\n  return query;\r\n}\r\n\r\nexport default {\r\n  ABOUT: '/about',\r\n  LANDING: '/landing',\r\n  ISOCHRONE: {\r\n    path: '/isochrone',\r\n    thunk: async (dispatch, getState) => {\r\n      const newParams = processQuery(getState);\r\n      dispatch(handleGraphParams(newParams));\r\n    },\r\n  },\r\n  DASHBOARD: {\r\n    path: '/',\r\n    thunk: async (dispatch, getState) => {\r\n      const newParams = processQuery(getState);\r\n      dispatch(handleGraphParams(newParams));\r\n    },\r\n  },\r\n  DATADIAGNOSTIC: {\r\n    path: '/dataDiagnostic',\r\n    thunk: async (dispatch, getState) => {\r\n      const newParams = processQuery(getState);\r\n      dispatch(handleGraphParams(newParams));\r\n    },\r\n  },\r\n  ROUTESCREEN: {\r\n    /*\r\n    Redux first router path syntax\r\n    https://github.com/faceyspacey/redux-first-router/issues/83\r\n    the : symbol signifies variables\r\n    the ? after the : means an optional paramter variable\r\n    ()* shows am optional parameter label\r\n    */\r\n    path: `/route/:routeId/:directionId?/:startStopId?/:endStopId?`,\r\n    thunk: async (dispatch, getState) => {\r\n      const { location } = getState();\r\n      const { routeId, directionId, startStopId, endStopId } = location.payload;\r\n\r\n      const newParams = {\r\n        routeId,\r\n        directionId,\r\n        startStopId,\r\n        endStopId,\r\n      };\r\n\r\n      Object.assign(newParams, processQuery(getState));\r\n      dispatch(handleGraphParams(newParams));\r\n    },\r\n  },\r\n};\r\n","/**\r\n * Helper functions for manipulating date and time.\r\n */\r\n\r\nimport { WEEKDAYS, WEEKENDS } from '../UIConstants';\r\n\r\n/**\r\n * Whether all of array's entries in the dictionary are false.\r\n */\r\nexport const allFalse = (dictionary, array) => {\r\n  for (let i = 0; i < array.length; i++) {\r\n    if (dictionary[array[i].value]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\n/**\r\n * Whether all of array's entries in the dictionary are true.\r\n */\r\nexport const allTrue = (dictionary, array) => {\r\n  for (let i = 0; i < array.length; i++) {\r\n    if (!dictionary[array[i].value]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\n/**\r\n * Returns a string describing the selected days of the week.\r\n *\r\n * @param {Object} daysOfTheWeek Dictionary of booleans\r\n */\r\nexport function getDaysOfTheWeekLabel(daysOfTheWeek) {\r\n  const weekdays = allTrue(daysOfTheWeek, WEEKDAYS);\r\n  const weekends = allTrue(daysOfTheWeek, WEEKENDS);\r\n  const noWeekdays = allFalse(daysOfTheWeek, WEEKDAYS);\r\n  const noWeekends = allFalse(daysOfTheWeek, WEEKENDS);\r\n\r\n  if (weekdays && weekends) {\r\n    return 'Every day';\r\n  }\r\n  if (weekdays && noWeekends) {\r\n    return 'Weekdays';\r\n  }\r\n  if (noWeekdays && weekends) {\r\n    return 'Weekends';\r\n  }\r\n\r\n  // Look at all the checked days\r\n\r\n  const allDays = WEEKDAYS.concat(WEEKENDS);\r\n  const checkedDays = allDays.filter(\r\n    currentValue => daysOfTheWeek[currentValue.value],\r\n  );\r\n\r\n  if (checkedDays.length === 0) {\r\n    // no days checked\r\n\r\n    return 'No days';\r\n  }\r\n  if (checkedDays.length === allDays.length - 1) {\r\n    // just one unchecked day\r\n\r\n    const uncheckedDay = allDays.filter(\r\n      currentValue => !daysOfTheWeek[currentValue.value],\r\n    );\r\n    return `Except ${uncheckedDay[0].shortLabel}`;\r\n  } // more than one unchecked\r\n\r\n  const checkedLabels = checkedDays.reduce((accumulator, currentValue) => {\r\n    accumulator.push(currentValue.shortLabel);\r\n    return accumulator;\r\n  }, []);\r\n  return checkedLabels.join();\r\n}\r\n","import React, { useEffect, useState, useCallback } from 'react';\r\nimport Moment from 'moment';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport Button from '@material-ui/core/Button';\r\nimport { connect } from 'react-redux';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport Select from '@material-ui/core/Select';\r\nimport { List, ListItem } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport {\r\n  TIME_RANGES,\r\n  TIME_RANGE_ALL_DAY,\r\n  DATE_RANGES,\r\n  MAX_DATE_RANGE,\r\n  WEEKDAYS,\r\n  WEEKENDS,\r\n} from '../UIConstants';\r\nimport { typeForPage } from '../reducers/page';\r\nimport { initialGraphParams } from '../reducers';\r\nimport { fullQueryFromParams } from '../routesMap';\r\nimport { allTrue, allFalse } from '../helpers/dateTime';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(12),\r\n    color: theme.palette.text.secondary,\r\n    textAlign: 'left',\r\n  },\r\n  formControl: {\r\n    leftMargin: theme.spacing(1),\r\n    rightMargin: theme.spacing(1),\r\n    minWidth: 240,\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n}));\r\n\r\n/**\r\n * Displays the current date and time selections and an \"expand\" icon as\r\n * a large button.  Clicking the button reveals a Popper with a date and\r\n * time picker.\r\n *\r\n * This button is meant to appear on every screen of the UI, currently\r\n * at the right end of the app bar.\r\n *\r\n * @param {any} props\r\n */\r\nfunction DateTimePopover(props) {\r\n  const { graphParams, anchorEl, setAnchorEl } = props;\r\n  const targetRange = anchorEl ? anchorEl.id : 'firstDateRange';\r\n\r\n  // Initialize our local data range parameters state to the appropriate date range object.\r\n\r\n  const [localDateRangeParams, setLocalDateRangeParams] = useState(\r\n    graphParams[targetRange] || initialGraphParams.firstDateRange,\r\n  );\r\n\r\n  // React wants this method to be memoized via useCallback, otherwise\r\n  // an exhaustive-deps warning is issued for the useEffect call below.\r\n\r\n  const resetLocalDateRangeParams = useCallback(() => {\r\n    setLocalDateRangeParams(\r\n      graphParams[targetRange] || initialGraphParams.firstDateRange,\r\n    );\r\n  }, [graphParams, targetRange]);\r\n\r\n  // Whenever targetRange changes, we need to resync our local state with Redux\r\n\r\n  useEffect(() => {\r\n    resetLocalDateRangeParams();\r\n  }, [targetRange, graphParams, resetLocalDateRangeParams]);\r\n\r\n  const classes = useStyles();\r\n  const maxDate = Moment(Date.now()).format('YYYY-MM-DD');\r\n\r\n  /**\r\n   * Compute and dispatch new graph params.\r\n   */\r\n  function applyGraphParams() {\r\n    const newGraphParams = Object.assign({}, graphParams);\r\n    newGraphParams[targetRange] = localDateRangeParams;\r\n\r\n    const currentType = typeForPage(props.currentPage);\r\n\r\n    props.dispatch({\r\n      type: currentType,\r\n      payload: graphParams, // not affected by date changes\r\n      query: fullQueryFromParams(newGraphParams),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * On close (x), we don't apply changes and revert the local form state.\r\n   */\r\n  function handleCancel() {\r\n    resetLocalDateRangeParams();\r\n    setAnchorEl(null);\r\n  }\r\n\r\n  /**\r\n   * Apply to local changes to the Redux state then close the popover.\r\n   */\r\n  function handleApply() {\r\n    applyGraphParams();\r\n    setAnchorEl(null);\r\n  }\r\n\r\n  function handleReset() {\r\n    setLocalDateRangeParams(initialGraphParams.firstDateRange);\r\n  }\r\n\r\n  function updateLocalDateRangeParams(datePayload) {\r\n    const newLocalDateRangeParams = { ...localDateRangeParams, ...datePayload };\r\n    setLocalDateRangeParams(newLocalDateRangeParams);\r\n  }\r\n\r\n  // convert the state's current time range to a string or the sentinel value\r\n  const timeRange =\r\n    localDateRangeParams.startTime && localDateRangeParams.endTime\r\n      ? `${localDateRangeParams.startTime}-${localDateRangeParams.endTime}`\r\n      : TIME_RANGE_ALL_DAY;\r\n\r\n  /**\r\n   * Handler that takes the time range as a string and sets\r\n   * the start and end time state.\r\n   *\r\n   * @param {any} myTimeRange\r\n   */\r\n  const setTimeRange = myTimeRange => {\r\n    if (myTimeRange.target.value === TIME_RANGE_ALL_DAY) {\r\n      updateLocalDateRangeParams({ startTime: null, endTime: null });\r\n    } else {\r\n      const timeRangeParts = myTimeRange.target.value.split('-');\r\n      updateLocalDateRangeParams({\r\n        startTime: timeRangeParts[0],\r\n        endTime: timeRangeParts[1],\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Normalizes date input strings.  Keeps them to the past and today.\r\n   *\r\n   * @param {String} date\r\n   * @returns {Object} Moment object\r\n   */\r\n  const normalizedMoment = date => {\r\n    const maxMoment = Moment(Date.now());\r\n    let moment = Moment(date);\r\n\r\n    // end date cannot be later than now, so set to now\r\n    if (moment.isAfter(maxMoment)) {\r\n      moment = maxMoment;\r\n    }\r\n    return moment;\r\n  };\r\n\r\n  /**\r\n   * Handler that updates the end date in the state.\r\n   *\r\n   * @param {any} myDate\r\n   */\r\n  const setEndDate = myDate => {\r\n    const newDate = myDate.target.value;\r\n    if (!newDate) {\r\n      // ignore empty date and leave at current value\r\n    } else {\r\n      const startMoment = Moment(localDateRangeParams.startDate);\r\n      const newMoment = normalizedMoment(newDate);\r\n\r\n      const payload = {\r\n        date: newMoment.format('YYYY-MM-DD'),\r\n      };\r\n\r\n      if (newMoment.isBefore(startMoment)) {\r\n        // end date cannot before start, so adjust the start\r\n        payload.startDate = newDate;\r\n      } else if (newMoment.diff(startMoment, 'days') > MAX_DATE_RANGE) {\r\n        // end date cannot be more than 90 from start, so adjust the start\r\n        payload.startDate = newMoment\r\n          .subtract(MAX_DATE_RANGE, 'days')\r\n          .format('YYYY-MM-DD');\r\n      }\r\n      updateLocalDateRangeParams(payload);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handler that updates the start date in the state.\r\n   *\r\n   * @param {any} myDate\r\n   */\r\n  const setStartDate = myDate => {\r\n    if (!myDate.target.value) {\r\n      // ignore empty date and leave at current value\r\n    } else {\r\n      const startMoment = normalizedMoment(myDate.target.value);\r\n      updateLocalDateRangeParams({\r\n        startDate: startMoment.format('YYYY-MM-DD'),\r\n      });\r\n    }\r\n  };\r\n\r\n  const setDateRange = daysBack => {\r\n    const initialParams = initialGraphParams.firstDateRange;\r\n    const date = initialParams.date;\r\n    const startMoment = Moment(date).subtract(daysBack - 1, 'days'); // include end date\r\n\r\n    updateLocalDateRangeParams({\r\n      date,\r\n      startDate: startMoment.format('YYYY-MM-DD'),\r\n    });\r\n  };\r\n\r\n  const handleDayChange = event => {\r\n    const day = event.target.value;\r\n    const newDaysOfTheWeek = { ...localDateRangeParams.daysOfTheWeek };\r\n    newDaysOfTheWeek[day] = event.target.checked;\r\n    updateLocalDateRangeParams({\r\n      daysOfTheWeek: newDaysOfTheWeek,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Bulk toggle.\r\n   */\r\n  const toggleDays = event => {\r\n    const what = event.target.value === 'weekdays' ? WEEKDAYS : WEEKENDS;\r\n\r\n    const newDaysOfTheWeek = { ...localDateRangeParams.daysOfTheWeek };\r\n\r\n    // If all false -> set all to true; some false/true -> set all true; all true -> set all false;\r\n    // That is, if all true, set to all false, otherwise set to all true.\r\n\r\n    const newValue = !allTrue(newDaysOfTheWeek, what);\r\n\r\n    for (let i = 0; i < what.length; i++) {\r\n      newDaysOfTheWeek[what[i].value] = newValue;\r\n    }\r\n\r\n    updateLocalDateRangeParams({\r\n      daysOfTheWeek: newDaysOfTheWeek,\r\n    });\r\n  };\r\n\r\n  const open = Boolean(anchorEl);\r\n  const id = open ? 'simple-popover' : undefined;\r\n\r\n  return (\r\n    <Popover\r\n      id={id}\r\n      open={open}\r\n      anchorEl={anchorEl}\r\n      onClose={handleCancel}\r\n      anchorOrigin={{\r\n        vertical: 'bottom',\r\n        horizontal: 'right',\r\n      }}\r\n      transformOrigin={{\r\n        vertical: 'top',\r\n        horizontal: 'right',\r\n      }}\r\n    >\r\n      <IconButton\r\n        size=\"small\"\r\n        aria-label=\"close\"\r\n        className={classes.closeButton}\r\n        onClick={handleCancel}\r\n      >\r\n        <CloseIcon />\r\n      </IconButton>\r\n\r\n      <List style={{ color: 'black', marginTop: 32 }}>\r\n        <ListItem>\r\n          <FormControl className={classes.formControl}>\r\n            <TextField\r\n              id=\"startDate\"\r\n              label=\"Start Date\"\r\n              type=\"date\"\r\n              value={localDateRangeParams.startDate}\r\n              InputProps={{\r\n                inputProps: {\r\n                  max: localDateRangeParams.date,\r\n                  min: Moment(localDateRangeParams.date)\r\n                    .subtract(MAX_DATE_RANGE, 'days')\r\n                    .format('YYYY-MM-DD'),\r\n                },\r\n              }}\r\n              className={classes.textField}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              onChange={setStartDate}\r\n            />\r\n          </FormControl>\r\n        </ListItem>\r\n\r\n        <ListItem>\r\n          <FormControl className={classes.formControl}>\r\n            <TextField\r\n              id=\"date\"\r\n              label=\"End Date\"\r\n              type=\"date\"\r\n              value={localDateRangeParams.date}\r\n              InputProps={{\r\n                inputProps: {\r\n                  max: maxDate,\r\n                },\r\n              }}\r\n              className={classes.textField}\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              onChange={setEndDate}\r\n            />\r\n          </FormControl>\r\n        </ListItem>\r\n\r\n        <ListItem>\r\n          <Grid container style={{ maxWidth: 250 }}>\r\n            {DATE_RANGES.map(range => (\r\n              <Grid item xs={6} key={range.value}>\r\n                <Button\r\n                  key={range.value}\r\n                  onClick={() => {\r\n                    setDateRange(range.value);\r\n                  }}\r\n                >\r\n                  {range.label}\r\n                </Button>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </ListItem>\r\n\r\n        <ListItem>\r\n          <FormControl component=\"fieldset\" className={classes.formControl}>\r\n            <FormLabel component=\"legend\" className={classes.secondaryHeading}>\r\n              Days of the Week\r\n            </FormLabel>\r\n\r\n            <Grid container>\r\n              <Grid item>\r\n                <FormGroup>\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        value=\"weekdays\"\r\n                        checked={\r\n                          !allFalse(\r\n                            localDateRangeParams.daysOfTheWeek,\r\n                            WEEKDAYS,\r\n                          )\r\n                        }\r\n                        indeterminate={\r\n                          !allFalse(\r\n                            localDateRangeParams.daysOfTheWeek,\r\n                            WEEKDAYS,\r\n                          ) &&\r\n                          !allTrue(localDateRangeParams.daysOfTheWeek, WEEKDAYS)\r\n                        }\r\n                        onChange={toggleDays}\r\n                      />\r\n                    }\r\n                    label=\"Weekdays\"\r\n                  />\r\n\r\n                  <Divider\r\n                    variant=\"middle\"\r\n                    style={{ marginLeft: 0 } /* divider with a right margin */}\r\n                  />\r\n\r\n                  {WEEKDAYS.map(day => (\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={\r\n                            localDateRangeParams.daysOfTheWeek[day.value]\r\n                          }\r\n                          onChange={handleDayChange}\r\n                          value={day.value}\r\n                        />\r\n                      }\r\n                      key={day.value}\r\n                      label={day.label}\r\n                    />\r\n                  ))}\r\n                </FormGroup>\r\n              </Grid>\r\n              <Grid item>\r\n                <FormGroup>\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        value=\"weekends\"\r\n                        checked={\r\n                          !allFalse(\r\n                            localDateRangeParams.daysOfTheWeek,\r\n                            WEEKENDS,\r\n                          )\r\n                        }\r\n                        indeterminate={\r\n                          !allFalse(\r\n                            localDateRangeParams.daysOfTheWeek,\r\n                            WEEKENDS,\r\n                          ) &&\r\n                          !allTrue(localDateRangeParams.daysOfTheWeek, WEEKENDS)\r\n                        }\r\n                        onChange={toggleDays}\r\n                      />\r\n                    }\r\n                    label=\"Weekends\"\r\n                  />\r\n\r\n                  <Divider\r\n                    variant=\"middle\"\r\n                    style={{ marginLeft: 0 } /* divider with a right margin */}\r\n                  />\r\n\r\n                  {WEEKENDS.map(day => (\r\n                    <FormControlLabel\r\n                      control={\r\n                        <Checkbox\r\n                          checked={\r\n                            localDateRangeParams.daysOfTheWeek[day.value]\r\n                          }\r\n                          onChange={handleDayChange}\r\n                          value={day.value}\r\n                        />\r\n                      }\r\n                      key={day.value}\r\n                      label={day.label}\r\n                    />\r\n                  ))}\r\n                </FormGroup>\r\n              </Grid>\r\n            </Grid>\r\n          </FormControl>\r\n        </ListItem>\r\n\r\n        <ListItem>\r\n          <FormControl className={classes.formControl}>\r\n            <InputLabel htmlFor=\"time-helper\">Time Range</InputLabel>\r\n            <Select\r\n              value={timeRange}\r\n              onChange={setTimeRange}\r\n              input={<Input name=\"time_range\" id=\"time_range\" />}\r\n            >\r\n              {TIME_RANGES.map(range => (\r\n                <MenuItem value={range.value} key={range.value}>\r\n                  {range.shortLabel}\r\n                  {range.restOfLabel}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </ListItem>\r\n        <ListItem>\r\n          <Grid\r\n            container\r\n            alignItems=\"flex-start\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n          >\r\n            <Button onClick={handleReset}>Reset</Button>\r\n            <Button onClick={handleApply} color=\"primary\" variant=\"contained\">\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </ListItem>\r\n      </List>\r\n    </Popover>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  graphParams: state.graphParams,\r\n  currentPage: state.page,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    dispatch,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(DateTimePopover);\r\n","import React, { useState, Fragment } from 'react';\r\nimport Moment from 'moment';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { connect } from 'react-redux';\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\r\nimport InfoIcon from '@material-ui/icons/InfoOutlined';\r\nimport DateTimePopover from './DateTimePopover';\r\nimport { TIME_RANGES, TIME_RANGE_ALL_DAY } from '../UIConstants';\r\nimport { typeForPage } from '../reducers/page';\r\nimport { fullQueryFromParams } from '../routesMap';\r\nimport { isLoadingRequest } from '../reducers/loadingReducer';\r\nimport { getDaysOfTheWeekLabel } from '../helpers/dateTime';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  button: {\r\n    textTransform: 'none',\r\n    display: 'flex',\r\n    justifyContent: 'flex-start',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(12),\r\n    color: theme.palette.text.secondary,\r\n    textAlign: 'left',\r\n  },\r\n  column: {\r\n    flexGrow: '1',\r\n  },\r\n  dateTime: {\r\n    whiteSpace: 'nowrap',\r\n    display: 'flex',\r\n  },\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  popover: {\r\n    padding: theme.spacing(2),\r\n    maxWidth: 400,\r\n  },\r\n}));\r\n\r\n/**\r\n * Displays the current date and time selections and an \"expand\" icon as\r\n * a large button.  Clicking the button reveals a Popper with a date and\r\n * time picker.\r\n *\r\n * This button is meant to appear on every screen of the UI, currently\r\n * at the right end of the app bar.\r\n *\r\n * @param {any} props\r\n */\r\nfunction DateTimePanel(props) {\r\n  const { graphParams, dateRangeSupported } = props;\r\n\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [infoAnchorEl, setInfoAnchorEl] = useState(null);\r\n\r\n  function handleClick(event) {\r\n    setAnchorEl(event.currentTarget);\r\n  }\r\n\r\n  function handleInfoClick(event) {\r\n    setInfoAnchorEl(event.currentTarget);\r\n  }\r\n\r\n  function handleInfoClose() {\r\n    setInfoAnchorEl(null);\r\n  }\r\n\r\n  /**\r\n   * Remove second date range params and dispatch.\r\n   */\r\n\r\n  function handleRemove() {\r\n    const newGraphParams = Object.assign({}, graphParams);\r\n    newGraphParams.secondDateRange = null;\r\n\r\n    const currentType = typeForPage(props.currentPage);\r\n\r\n    props.dispatch({\r\n      type: currentType,\r\n      payload: graphParams, // not affected by date changes\r\n      query: fullQueryFromParams(newGraphParams),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * convert yyyy/mm/dd to mm/dd/yyyy\r\n   */\r\n  function convertDate(ymdString) {\r\n    return Moment(ymdString).format('MM/DD/YYYY');\r\n  }\r\n\r\n  const firstOpen = Boolean(anchorEl) && anchorEl.id === 'firstDateRange';\r\n  const secondOpen = Boolean(anchorEl) && anchorEl.id === 'secondDateRange';\r\n\r\n  let rangeInfo = null;\r\n\r\n  //\r\n  // If a date range is set, either update the date label to the full\r\n  // range if we support it, or else show an info icon that explains\r\n  // that we are only showing one day's data.\r\n  //\r\n\r\n  if (\r\n    graphParams.firstDateRange.startDate !== graphParams.firstDateRange.date ||\r\n    (graphParams.secondDateRange &&\r\n      graphParams.secondDateRange.startDate !==\r\n        graphParams.secondDateRange.date)\r\n  ) {\r\n    if (!dateRangeSupported) {\r\n      rangeInfo = (\r\n        <Fragment>\r\n          <IconButton size=\"small\" color=\"inherit\" onClick={handleInfoClick}>\r\n            <InfoIcon fontSize=\"small\" />\r\n          </IconButton>\r\n          <Popover\r\n            open={Boolean(infoAnchorEl)}\r\n            anchorEl={infoAnchorEl}\r\n            onClose={handleInfoClose}\r\n            anchorOrigin={{\r\n              vertical: 'bottom',\r\n              horizontal: 'center',\r\n            }}\r\n            transformOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'center',\r\n            }}\r\n          >\r\n            <div className={classes.popover}>\r\n              Date ranges are not implemented for the current screen. Currently\r\n              showing data for one day.\r\n            </div>\r\n          </Popover>\r\n        </Fragment>\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Object} buttonProps Object including a \"target\" indicating which field\r\n   *   in graphParams this is for.\r\n   */\r\n  function DatePanelButton(buttonProps) {\r\n    const target = buttonProps.target;\r\n\r\n    // short circuit to a placeholder button if second range is null\r\n\r\n    if (target === 'secondDateRange' && graphParams.secondDateRange === null) {\r\n      return (\r\n        <Button\r\n          variant=\"contained\"\r\n          className={classes.button}\r\n          onClick={handleClick}\r\n          id={target}\r\n        >\r\n          <Typography className={classes.secondaryHeading}>\r\n            Compare Dates\r\n          </Typography>\r\n          {secondOpen ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n        </Button>\r\n      );\r\n    }\r\n\r\n    const dateRangeParams = graphParams[target];\r\n\r\n    // these are the read-only representations of the date and time range\r\n    let dateLabel = convertDate(dateRangeParams.date);\r\n    let smallLabel = '';\r\n\r\n    if (dateRangeParams.startDate !== dateRangeParams.date) {\r\n      dateLabel = `${convertDate(dateRangeParams.startDate)} - ${dateLabel}`;\r\n\r\n      // generate a days of the week label\r\n\r\n      smallLabel = `${getDaysOfTheWeekLabel(dateRangeParams.daysOfTheWeek)}, `;\r\n    }\r\n\r\n    // convert the state's current time range to a string or the sentinel value\r\n    const timeRange =\r\n      dateRangeParams.startTime && dateRangeParams.endTime\r\n        ? `${dateRangeParams.startTime}-${dateRangeParams.endTime}`\r\n        : TIME_RANGE_ALL_DAY;\r\n\r\n    smallLabel += TIME_RANGES.find(range => range.value === timeRange)\r\n      .shortLabel;\r\n\r\n    return (\r\n      <Fragment>\r\n        <Button\r\n          variant=\"contained\"\r\n          className={classes.button}\r\n          onClick={handleClick}\r\n          id={target}\r\n        >\r\n          <div className={classes.dateTime}>\r\n            <span>\r\n              <Typography className={classes.heading} display=\"inline\">\r\n                {dateLabel}&nbsp;\r\n              </Typography>\r\n              <Typography className={classes.secondaryHeading} display=\"inline\">\r\n                {smallLabel}\r\n              </Typography>\r\n            </span>\r\n            {(target === 'firstDateRange' && firstOpen) ||\r\n            (target === 'secondDateRange' && secondOpen) ? (\r\n              <ExpandLessIcon />\r\n            ) : (\r\n              <ExpandMoreIcon />\r\n            )}\r\n          </div>\r\n        </Button>\r\n        {target === 'secondDateRange' ? (\r\n          <IconButton\r\n            color=\"inherit\"\r\n            size=\"small\"\r\n            onClick={handleRemove}\r\n            aria-label=\"Remove\"\r\n          >\r\n            <RemoveCircleOutlineIcon />\r\n          </IconButton>\r\n        ) : null}\r\n      </Fragment>\r\n    );\r\n  }\r\n\r\n  // For some reason, invoking this as a component causes anchorEl not to have a bounding box\r\n  // and thus the popover appears at the upper left corner of the window.  So invoking it as\r\n  // just a plain old function instead.\r\n\r\n  const firstButton = DatePanelButton({ target: 'firstDateRange' });\r\n  const secondButton = DatePanelButton({ target: 'secondDateRange' });\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {props.isLoading ? (\r\n        <Box p={1}>\r\n          <CircularProgress\r\n            variant=\"indeterminate\"\r\n            disableShrink\r\n            style={{ color: 'white' }}\r\n            size={24}\r\n          />\r\n        </Box>\r\n      ) : null}\r\n      {rangeInfo}\r\n      {firstButton}\r\n      &nbsp;\r\n      {secondButton}\r\n      <DateTimePopover anchorEl={anchorEl} setAnchorEl={setAnchorEl} />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  graphParams: state.graphParams,\r\n  isLoading: isLoadingRequest(state),\r\n  currentPage: state.page,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    dispatch,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(DateTimePanel);\r\n","import React, { useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport AppBar from '@material-ui/core/AppBar';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Agencies } from '../config';\r\nimport MapSpider from '../components/MapSpider';\r\nimport RouteTable from '../components/RouteTable';\r\nimport AppBarLogo from '../components/AppBarLogo';\r\nimport SidebarButton from '../components/SidebarButton';\r\nimport DateTimePanel from '../components/DateTimePanel';\r\n\r\nimport { fetchRoutes, handleGraphParams } from '../actions';\r\n\r\nfunction Dashboard(props) {\r\n  const { routes } = props;\r\n  const myFetchRoutes = props.fetchRoutes;\r\n  const myHandleGraphParams = props.handleGraphParams;\r\n\r\n  const agency = Agencies[0];\r\n\r\n  useEffect(() => {\r\n    if (!routes) {\r\n      myFetchRoutes();\r\n    }\r\n    // trigger action to fetch precomputed stats for initial graphParams\r\n    myHandleGraphParams({});\r\n  }, [routes, myFetchRoutes, myHandleGraphParams]); // like componentDidMount, this runs only on first render\r\n\r\n  return (\r\n    <div className=\"flex-screen\">\r\n      <AppBar position=\"relative\">\r\n        <Toolbar>\r\n          <SidebarButton />\r\n          <AppBarLogo />\r\n          <div className=\"page-title\">{agency.title}</div>\r\n          <DateTimePanel dateRangeSupported />\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Grid container spacing={0}>\r\n        {/* Using spacing causes horizontal scrolling, see https://material-ui.com/components/grid/#negative-margin */}\r\n        <Grid item xs={12} sm={6}>\r\n          {/* map and table are both full width for 640px windows or smaller, else half width */}\r\n          <MapSpider />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} style={{ padding: 12 }}>\r\n          {/* Doing the spacing between Grid items ourselves.  See previous comment. */}\r\n          <RouteTable routes={routes} />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  routes: state.routes.data,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchRoutes: params => dispatch(fetchRoutes(params)),\r\n  handleGraphParams: params => dispatch(handleGraphParams(params)),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(Dashboard);\r\n","/**\r\n * Helper functions for working with graph data.\r\n */\r\n\r\n/* eslint import/prefer-default-export: \"off\" */\r\n\r\n/**\r\n * Helper method to get a specific percentile out of histogram graph data\r\n * where percentile is 0-100.\r\n */\r\nexport function getPercentileValue(graphData, percentile) {\r\n  if (!graphData.percentiles) {\r\n    return null;\r\n  }\r\n  const bin = graphData.percentiles.find(x => x.percentile === percentile);\r\n  if (bin) {\r\n    return bin.value;\r\n  }\r\n  return 0;\r\n}\r\n","import React, { useState } from 'react';\r\nimport { FormControl, FormControlLabel, Radio } from '@material-ui/core';\r\nimport {\r\n  XYPlot,\r\n  HorizontalGridLines,\r\n  XAxis,\r\n  YAxis,\r\n  LineSeries,\r\n  LineMarkSeries,\r\n  VerticalBarSeries,\r\n  ChartLabel,\r\n  Crosshair,\r\n} from 'react-vis';\r\nimport DiscreteColorLegend from 'react-vis/dist/legends/discrete-color-legend';\r\nimport Moment from 'moment';\r\nimport {\r\n  CHART_COLORS,\r\n  PLANNING_PERCENTILE,\r\n  REACT_VIS_CROSSHAIR_NO_LINE,\r\n} from '../UIConstants';\r\nimport { computeScores } from '../helpers/routeCalculations';\r\nimport { getPercentileValue } from '../helpers/graphData';\r\nimport { getDistanceInMiles } from '../helpers/mapGeometry';\r\nimport '../../node_modules/react-vis/dist/style.css';\r\n\r\n/**\r\n * Bar chart of average and planning percentile wait and time across the day.\r\n */\r\nfunction InfoByDay(props) {\r\n  const AVERAGE_TIME = 'average_time';\r\n  const PLANNING_TIME = 'planning_time';\r\n  const ON_TIME_RATE = 'on_time_rate';\r\n  const SPEED = 'speed';\r\n  const TRAVEL_VARIABILITY = 'travel_variability';\r\n\r\n  const [selectedOption, setSelectedOption] = useState(AVERAGE_TIME); // radio button starts on average time\r\n  const [crosshairValues, setCrosshairValues] = useState([]); // tooltip starts out empty\r\n\r\n  const { byDayData, routes, graphParams } = props;\r\n\r\n  /**\r\n   * Event handler for radio buttons\r\n   * @param {changeEvent} The change event on the radio buttons.\r\n   * @private\r\n   */\r\n  const handleOptionChange = changeEvent => {\r\n    setSelectedOption(changeEvent.target.value);\r\n  };\r\n\r\n  /**\r\n   * Event handler for onMouseLeave.\r\n   * @private\r\n   */\r\n  const onMouseLeave = () => {\r\n    setCrosshairValues([]);\r\n  };\r\n\r\n  const computeDistance = (myGraphParams, myRoutes) => {\r\n    if (myGraphParams && myGraphParams.endStopId) {\r\n      const directionId = myGraphParams.directionId;\r\n      const routeId = myGraphParams.routeId;\r\n      const route = myRoutes.find(thisRoute => thisRoute.id === routeId);\r\n      const directionInfo = route.directions.find(\r\n        dir => dir.id === directionId,\r\n      );\r\n      return getDistanceInMiles(\r\n        route,\r\n        directionInfo,\r\n        myGraphParams.startStopId,\r\n        myGraphParams.endStopId,\r\n      );\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  /**\r\n   * Returns a mapping function for creating a react-vis XYPlot data series out of interval data.\r\n   * Example of interval data is shown at end of this file.\r\n   * Mapping function is for either wait time or trip time, and for either average or planning percentile time.\r\n   *\r\n   * It's possible that an interval will have null wait/travel times due to lack of data (no vehicles\r\n   * running in that interval), in which case we replace with zero values (best effort).\r\n   *\r\n   * @param {intervalField} One of wait_times or travel_times.\r\n   */\r\n  const mapDays = (field, attribute) => {\r\n    let distance;\r\n    if (attribute === SPEED) {\r\n      distance = routes ? computeDistance(graphParams, routes) : null;\r\n    }\r\n\r\n    return day => {\r\n      let y = 0;\r\n\r\n      if (day[field] != null) {\r\n        if (attribute === AVERAGE_TIME) {\r\n          y = day[field].median;\r\n        } else if (attribute === PLANNING_TIME) {\r\n          y = getPercentileValue(day[field], 90);\r\n        } else if (attribute === ON_TIME_RATE) {\r\n          const scheduleAdherence = day[field];\r\n          y =\r\n            scheduleAdherence && scheduleAdherence.scheduledCount > 0\r\n              ? (100 * scheduleAdherence.onTimeCount) /\r\n                scheduleAdherence.scheduledCount\r\n              : null;\r\n        } else if (attribute === SPEED) {\r\n          y = distance ? distance / (day[field].median / 60.0) : 0; // convert avg trip time to hours for mph\r\n        } else if (attribute === TRAVEL_VARIABILITY) {\r\n          y =\r\n            (getPercentileValue(day[field], 90) -\r\n              getPercentileValue(day[field], 10)) /\r\n            2;\r\n        }\r\n      }\r\n\r\n      if (y === undefined) {\r\n        y = 0;\r\n      }\r\n\r\n      return {\r\n        x: Moment(day.dates[0]).format('dd MM/DD'),\r\n        y,\r\n      };\r\n    };\r\n  };\r\n\r\n  const waitData =\r\n    byDayData && byDayData.map(mapDays('waitTimes', selectedOption));\r\n\r\n  const tripData =\r\n    byDayData && byDayData.map(mapDays('tripTimes', selectedOption));\r\n\r\n  const meanWait =\r\n    waitData &&\r\n    waitData.length > 0 &&\r\n    waitData.reduce((accum, value) => accum + value.y, 0) / waitData.length;\r\n  const meanTrip =\r\n    tripData &&\r\n    tripData.length > 0 &&\r\n    tripData.reduce((accum, value) => accum + value.y, 0) / tripData.length;\r\n  const meanWaitData = waitData && [\r\n    { x: waitData[0].x, y: meanWait },\r\n    { x: waitData[waitData.length - 1].x, y: meanWait },\r\n  ];\r\n  const meanTripData = tripData && [\r\n    { x: tripData[0].x, y: meanWait + meanTrip },\r\n    { x: tripData[tripData.length - 1].x, y: meanWait + meanTrip },\r\n  ];\r\n\r\n  const maxWait =\r\n    waitData &&\r\n    waitData.length > 0 &&\r\n    waitData.reduce((max, value) => (max > value.y ? max : value.y), 0);\r\n  const maxTrip =\r\n    tripData &&\r\n    tripData.length > 0 &&\r\n    tripData.reduce((max, value) => (max > value.y ? max : value.y), 0);\r\n\r\n  const legendItems = [\r\n    { title: 'Travel time', color: CHART_COLORS[1], strokeWidth: 10 },\r\n    { title: 'Wait time', color: CHART_COLORS[0], strokeWidth: 10 },\r\n  ];\r\n\r\n  // 2nd chart: on time %\r\n\r\n  const onTimeRateData =\r\n    byDayData &&\r\n    byDayData.map(mapDays('departureScheduleAdherence', ON_TIME_RATE));\r\n\r\n  // 3rd chart: speed\r\n\r\n  const speedData = byDayData && byDayData.map(mapDays('tripTimes', SPEED));\r\n  const maxSpeed =\r\n    speedData &&\r\n    speedData.length > 0 &&\r\n    speedData.reduce((max, value) => (max > value.y ? max : value.y), 0);\r\n\r\n  // 4th chart: travel variability\r\n\r\n  const travelVariabilityData =\r\n    byDayData && byDayData.map(mapDays('tripTimes', TRAVEL_VARIABILITY));\r\n  const maxTravelVariability =\r\n    travelVariabilityData &&\r\n    travelVariabilityData.length > 0 &&\r\n    travelVariabilityData.reduce(\r\n      (max, value) => (max > value.y ? max : value.y),\r\n      0,\r\n    );\r\n\r\n  // 5th chart: score\r\n\r\n  const scoreData =\r\n    byDayData &&\r\n    byDayData.map((day, index) => {\r\n      const grades = computeScores(\r\n        waitData[index].y,\r\n        onTimeRateData[index].y / 100,\r\n        speedData[index].y,\r\n        travelVariabilityData[index].y,\r\n      );\r\n      return {\r\n        x: Moment(day.dates[0]).format('dd MM/DD'),\r\n        y: grades.totalScore,\r\n      };\r\n    });\r\n  const maxScore =\r\n    scoreData &&\r\n    scoreData.length > 0 &&\r\n    scoreData.reduce((max, value) => (max > value.y ? max : value.y), 0);\r\n\r\n  // Non-default chart margins for rotated x-axis tick marks.\r\n  // Default is {left: 40, right: 10, top: 10, bottom: 40}\r\n\r\n  const chartMargins = { left: 40, right: 10, top: 10, bottom: 60 };\r\n\r\n  // Currently not showing by day data for date range comparisons.\r\n\r\n  if (graphParams.secondDateRange) {\r\n    return (\r\n      <div>\r\n        <p />\r\n        Performance by day is not available when comparing date ranges. Remove\r\n        the second date range to see performance by day.\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Show a prompt to choose a date range if a date range is not selected.\r\n\r\n  if (\r\n    graphParams.firstDateRange.date === graphParams.firstDateRange.startDate\r\n  ) {\r\n    return (\r\n      <div>\r\n        <p />\r\n        To see performance by day, select a start date and end date.\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Event handler for onNearestX.\r\n   * @param {Object} value Selected value.\r\n   * @param {index} index Index of the value in the data array.\r\n   * @private\r\n   */\r\n  const onNearestX = (_value, { index }) => {\r\n    setCrosshairValues([waitData[index], tripData[index]]);\r\n  };\r\n\r\n  const onNearestXGeneric = (/* _value, { index } */) => {\r\n    // TODO: need to make only one chart's crosshair visible at a time,\r\n    // this currently makes it appear on all charts: setCrosshairValues([_value]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {byDayData ? (\r\n        <div>\r\n          <FormControl>\r\n            <div className=\"controls\">\r\n              <FormControlLabel\r\n                control={\r\n                  <Radio\r\n                    id=\"average_time\"\r\n                    type=\"radio\"\r\n                    value={AVERAGE_TIME}\r\n                    checked={selectedOption === AVERAGE_TIME}\r\n                    onChange={handleOptionChange}\r\n                  />\r\n                }\r\n                label=\"Median\"\r\n              />\r\n\r\n              <FormControlLabel\r\n                control={\r\n                  <Radio\r\n                    id=\"planning_time\"\r\n                    type=\"radio\"\r\n                    value={PLANNING_TIME}\r\n                    checked={selectedOption === PLANNING_TIME}\r\n                    onChange={handleOptionChange}\r\n                  />\r\n                }\r\n                label={`Planning (${PLANNING_PERCENTILE}th percentile)`}\r\n              />\r\n            </div>\r\n          </FormControl>\r\n          <XYPlot\r\n            xType=\"ordinal\"\r\n            height={300}\r\n            width={400}\r\n            margin={chartMargins}\r\n            stackBy=\"y\"\r\n            yDomain={[0, maxWait + maxTrip]}\r\n            onMouseLeave={onMouseLeave}\r\n          >\r\n            <HorizontalGridLines />\r\n            <XAxis tickLabelAngle={-90} />\r\n            <YAxis hideLine />\r\n\r\n            <VerticalBarSeries\r\n              data={waitData}\r\n              color={CHART_COLORS[0]}\r\n              onNearestX={onNearestX}\r\n              stack\r\n            />\r\n            <VerticalBarSeries data={tripData} color={CHART_COLORS[1]} stack />\r\n            <LineSeries\r\n              data={meanWaitData}\r\n              color={CHART_COLORS[2]}\r\n              strokeDasharray=\"5, 5\"\r\n            />\r\n            <LineSeries\r\n              data={meanTripData}\r\n              color={CHART_COLORS[3]}\r\n              strokeDasharray=\"5, 5\"\r\n            />\r\n\r\n            <ChartLabel\r\n              text=\"minutes\"\r\n              className=\"alt-y-label\"\r\n              includeMargin={false}\r\n              xPercent={0.06}\r\n              yPercent={0.06}\r\n              style={{\r\n                transform: 'rotate(-90)',\r\n                textAnchor: 'end',\r\n              }}\r\n            />\r\n\r\n            {crosshairValues.length > 0 && (\r\n              <Crosshair\r\n                values={crosshairValues}\r\n                style={REACT_VIS_CROSSHAIR_NO_LINE}\r\n              >\r\n                <div className=\"rv-crosshair__inner__content\">\r\n                  <p>\r\n                    Onboard time:{' '}\r\n                    {crosshairValues[1] ? Math.round(crosshairValues[1].y) : ''}\r\n                  </p>\r\n                  <p>Wait time: {Math.round(crosshairValues[0].y)}</p>\r\n                </div>\r\n              </Crosshair>\r\n            )}\r\n          </XYPlot>\r\n          <DiscreteColorLegend\r\n            orientation=\"horizontal\"\r\n            width={300}\r\n            items={legendItems}\r\n          />\r\n          On-Time %\r\n          <XYPlot\r\n            xType=\"ordinal\"\r\n            height={300}\r\n            width={400}\r\n            margin={chartMargins}\r\n            yDomain={[0, 100]}\r\n            onMouseLeave={onMouseLeave}\r\n          >\r\n            <HorizontalGridLines />\r\n            <XAxis tickLabelAngle={-90} />\r\n            <YAxis hideLine />\r\n\r\n            <LineMarkSeries\r\n              data={onTimeRateData}\r\n              color={CHART_COLORS[0]}\r\n              onNearestX={onNearestXGeneric}\r\n              stack\r\n            />\r\n\r\n            <ChartLabel\r\n              text=\"Long Wait %\"\r\n              className=\"alt-y-label\"\r\n              includeMargin={false}\r\n              xPercent={0.06}\r\n              yPercent={0.06}\r\n              style={{\r\n                transform: 'rotate(-90)',\r\n                textAnchor: 'end',\r\n              }}\r\n            />\r\n\r\n            {crosshairValues.length > 0 &&\r\n            false /* need separate state for each crosshair */ && (\r\n                <Crosshair\r\n                  values={crosshairValues}\r\n                  style={REACT_VIS_CROSSHAIR_NO_LINE}\r\n                ></Crosshair>\r\n              )}\r\n          </XYPlot>\r\n          Median Speed\r\n          <XYPlot\r\n            xType=\"ordinal\"\r\n            height={300}\r\n            width={400}\r\n            margin={chartMargins}\r\n            yDomain={[0, maxSpeed]}\r\n            onMouseLeave={onMouseLeave}\r\n          >\r\n            <HorizontalGridLines />\r\n            <XAxis tickLabelAngle={-90} />\r\n            <YAxis hideLine />\r\n\r\n            <LineMarkSeries\r\n              data={speedData}\r\n              color={CHART_COLORS[1]}\r\n              onNearestX={onNearestXGeneric}\r\n              stack\r\n            />\r\n\r\n            <ChartLabel\r\n              text=\"Median Speed (mph)\"\r\n              className=\"alt-y-label\"\r\n              includeMargin={false}\r\n              xPercent={0.06}\r\n              yPercent={0.06}\r\n              style={{\r\n                transform: 'rotate(-90)',\r\n                textAnchor: 'end',\r\n              }}\r\n            />\r\n\r\n            {crosshairValues.length > 0 &&\r\n            false /* need separate state for each crosshair */ && (\r\n                <Crosshair\r\n                  values={crosshairValues}\r\n                  style={REACT_VIS_CROSSHAIR_NO_LINE}\r\n                ></Crosshair>\r\n              )}\r\n          </XYPlot>\r\n          Travel Variability\r\n          <XYPlot\r\n            xType=\"ordinal\"\r\n            height={300}\r\n            width={400}\r\n            margin={chartMargins}\r\n            yDomain={[0, maxTravelVariability]}\r\n            onMouseLeave={onMouseLeave}\r\n          >\r\n            <HorizontalGridLines />\r\n            <XAxis tickLabelAngle={-90} />\r\n            <YAxis hideLine />\r\n\r\n            <LineMarkSeries\r\n              data={travelVariabilityData}\r\n              color={CHART_COLORS[1]}\r\n              onNearestX={onNearestXGeneric}\r\n              stack\r\n            />\r\n\r\n            <ChartLabel\r\n              text={'Variability (\\u00b1 min)'}\r\n              className=\"alt-y-label\"\r\n              includeMargin={false}\r\n              xPercent={0.06}\r\n              yPercent={0.06}\r\n              style={{\r\n                transform: 'rotate(-90)',\r\n                textAnchor: 'end',\r\n              }}\r\n            />\r\n\r\n            {crosshairValues.length > 0 &&\r\n            false /* need separate state for each crosshair */ && (\r\n                <Crosshair\r\n                  values={crosshairValues}\r\n                  style={REACT_VIS_CROSSHAIR_NO_LINE}\r\n                ></Crosshair>\r\n              )}\r\n          </XYPlot>\r\n          Score\r\n          <XYPlot\r\n            xType=\"ordinal\"\r\n            height={300}\r\n            width={400}\r\n            margin={chartMargins}\r\n            yDomain={[0, maxScore]}\r\n            onMouseLeave={onMouseLeave}\r\n          >\r\n            <HorizontalGridLines />\r\n            <XAxis tickLabelAngle={-90} />\r\n            <YAxis hideLine />\r\n\r\n            <LineMarkSeries\r\n              data={scoreData}\r\n              color={CHART_COLORS[2]}\r\n              onNearestX={onNearestXGeneric}\r\n              stack\r\n            />\r\n\r\n            <ChartLabel\r\n              text=\"Score\"\r\n              className=\"alt-y-label\"\r\n              includeMargin={false}\r\n              xPercent={0.06}\r\n              yPercent={0.06}\r\n              style={{\r\n                transform: 'rotate(-90)',\r\n                textAnchor: 'end',\r\n              }}\r\n            />\r\n\r\n            {crosshairValues.length > 0 &&\r\n            false /* need separate state for each crosshair */ && (\r\n                <Crosshair\r\n                  values={crosshairValues}\r\n                  style={REACT_VIS_CROSSHAIR_NO_LINE}\r\n                ></Crosshair>\r\n              )}\r\n          </XYPlot>\r\n        </div>\r\n      ) : (\r\n        <code>No data.</code>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InfoByDay;\r\n","import React, { Component } from 'react';\r\nimport { FormControl, FormControlLabel, Radio } from '@material-ui/core';\r\nimport {\r\n  XYPlot,\r\n  HorizontalGridLines,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalBarSeries,\r\n  ChartLabel,\r\n  Crosshair,\r\n} from 'react-vis';\r\nimport DiscreteColorLegend from 'react-vis/dist/legends/discrete-color-legend';\r\nimport { getPercentileValue } from '../helpers/graphData';\r\nimport {\r\n  CHART_COLORS,\r\n  PLANNING_PERCENTILE,\r\n  REACT_VIS_CROSSHAIR_NO_LINE,\r\n} from '../UIConstants';\r\nimport '../../node_modules/react-vis/dist/style.css';\r\n\r\n/**\r\n * Bar chart of average and planning percentile wait and time across the day.\r\n */\r\nclass InfoIntervalsOfDay extends Component {\r\n  static AVERAGE_TIME = 'average_time';\r\n\r\n  static PLANNING_TIME = 'planning_time';\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      selectedOption: InfoIntervalsOfDay.AVERAGE_TIME, // radio button starts on average time\r\n      crosshairValues: [], // tooltip starts out empty\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Event handler for radio buttons\r\n   * @param {changeEvent} The change event on the radio buttons.\r\n   * @private\r\n   */\r\n  handleOptionChange = changeEvent => {\r\n    this.setState({\r\n      selectedOption: changeEvent.target.value,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Event handler for onMouseLeave.\r\n   * @private\r\n   */\r\n  onMouseLeave = () => {\r\n    this.setState({ crosshairValues: [] });\r\n  };\r\n\r\n  /**\r\n   * Event handler for onNearestX.\r\n   * @param {Object} value Selected value.\r\n   * @param {index} index Index of the value in the data array.\r\n   * @private\r\n   */\r\n  onNearestX = (_value, { index }) => {\r\n    this.setState({\r\n      crosshairValues: [this.waitData[index], this.tripData[index]],\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Returns a mapping function for creating a react-vis XYPlot data series out of interval data.\r\n   * Example of interval data is shown at end of this file.\r\n   * Mapping function is for either wait time or trip time, and for either average or planning percentile time.\r\n   *\r\n   * It's possible that an interval will have null wait/travel times due to lack of data (no vehicles\r\n   * running in that interval), in which case we replace with zero values (best effort).\r\n   *\r\n   * @param {intervalField} One of wait_times or travel_times.\r\n   */\r\n  mapInterval(intervalField) {\r\n    return interval => {\r\n      let y = 0;\r\n\r\n      if (interval[intervalField] != null) {\r\n        if (this.state.selectedOption === InfoIntervalsOfDay.AVERAGE_TIME) {\r\n          y = getPercentileValue(interval[intervalField], 50);\r\n        } else {\r\n          y = getPercentileValue(interval[intervalField], PLANNING_PERCENTILE);\r\n        }\r\n      }\r\n\r\n      if (y === undefined) {\r\n        y = 0;\r\n      }\r\n\r\n      return {\r\n        x: `${interval.startTime} - ${interval.endTime}`,\r\n        y,\r\n      };\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { tripMetrics } = this.props;\r\n\r\n    const intervals = tripMetrics.timeRanges;\r\n    const intervals2 = tripMetrics.timeRanges2;\r\n    this.waitData = intervals\r\n      ? intervals.map(this.mapInterval('waitTimes'))\r\n      : null;\r\n    this.tripData = intervals\r\n      ? intervals.map(this.mapInterval('tripTimes'))\r\n      : null;\r\n    this.waitData2 = intervals2\r\n      ? intervals2.map(this.mapInterval('waitTimes'))\r\n      : null;\r\n    this.tripData2 = intervals2\r\n      ? intervals2.map(this.mapInterval('tripTimes'))\r\n      : null;\r\n\r\n    const legendItems = [\r\n      { title: 'Travel time', color: CHART_COLORS[1], strokeWidth: 10 },\r\n      { title: 'Wait time', color: CHART_COLORS[0], strokeWidth: 10 },\r\n    ];\r\n\r\n    return (\r\n      <div>\r\n        {intervals ? (\r\n          <div>\r\n            <FormControl>\r\n              <div className=\"controls\">\r\n                <FormControlLabel\r\n                  control={\r\n                    <Radio\r\n                      id=\"average_time\"\r\n                      type=\"radio\"\r\n                      value={InfoIntervalsOfDay.AVERAGE_TIME}\r\n                      checked={\r\n                        this.state.selectedOption ===\r\n                        InfoIntervalsOfDay.AVERAGE_TIME\r\n                      }\r\n                      onChange={this.handleOptionChange}\r\n                    />\r\n                  }\r\n                  label=\"Median\"\r\n                />\r\n\r\n                <FormControlLabel\r\n                  control={\r\n                    <Radio\r\n                      id=\"planning_time\"\r\n                      type=\"radio\"\r\n                      value={InfoIntervalsOfDay.PLANNING_TIME}\r\n                      checked={\r\n                        this.state.selectedOption ===\r\n                        InfoIntervalsOfDay.PLANNING_TIME\r\n                      }\r\n                      onChange={this.handleOptionChange}\r\n                    />\r\n                  }\r\n                  label={`Planning (${PLANNING_PERCENTILE}th percentile)`}\r\n                />\r\n              </div>\r\n            </FormControl>\r\n\r\n            <XYPlot\r\n              xType=\"ordinal\"\r\n              height={300}\r\n              width={400}\r\n              stackBy=\"y\"\r\n              onMouseLeave={this.onMouseLeave}\r\n            >\r\n              <HorizontalGridLines />\r\n              <XAxis />\r\n              <YAxis hideLine />\r\n\r\n              <VerticalBarSeries\r\n                cluster=\"first\"\r\n                data={this.waitData}\r\n                color={CHART_COLORS[0]}\r\n                onNearestX={this.onNearestX}\r\n              />\r\n              <VerticalBarSeries\r\n                cluster=\"first\"\r\n                data={this.tripData}\r\n                color={CHART_COLORS[1]}\r\n              />\r\n              {this.waitData2 ? (\r\n                <VerticalBarSeries\r\n                  cluster=\"second\"\r\n                  data={this.waitData2}\r\n                  color={CHART_COLORS[2]}\r\n                  onNearestX={this.onNearestX}\r\n                />\r\n              ) : null}\r\n              {this.waitData2 ? (\r\n                <VerticalBarSeries\r\n                  cluster=\"second\"\r\n                  data={this.tripData2}\r\n                  color={CHART_COLORS[3]}\r\n                />\r\n              ) : null}\r\n\r\n              <ChartLabel\r\n                text=\"minutes\"\r\n                className=\"alt-y-label\"\r\n                includeMargin={false}\r\n                xPercent={0.06}\r\n                yPercent={0.06}\r\n                style={{\r\n                  transform: 'rotate(-90)',\r\n                  textAnchor: 'end',\r\n                }}\r\n              />\r\n\r\n              {this.state.crosshairValues.length >\r\n                0 /* TODO: add second cluster values */ && (\r\n                <Crosshair\r\n                  values={this.state.crosshairValues}\r\n                  style={REACT_VIS_CROSSHAIR_NO_LINE}\r\n                >\r\n                  <div className=\"rv-crosshair__inner__content\">\r\n                    <p>\r\n                      Onboard time:{' '}\r\n                      {Math.round(this.state.crosshairValues[1].y)}\r\n                    </p>\r\n                    <p>\r\n                      Wait time: {Math.round(this.state.crosshairValues[0].y)}\r\n                    </p>\r\n                  </div>\r\n                </Crosshair>\r\n              )}\r\n            </XYPlot>\r\n            <DiscreteColorLegend\r\n              orientation=\"horizontal\"\r\n              width={300}\r\n              items={legendItems}\r\n            />\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InfoIntervalsOfDay;\r\n","import React, { Fragment, useState } from 'react';\r\nimport {\r\n  XYPlot,\r\n  HorizontalGridLines,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalBarSeries,\r\n  ChartLabel,\r\n  Crosshair,\r\n} from 'react-vis';\r\nimport DiscreteColorLegend from 'react-vis/dist/legends/discrete-color-legend';\r\nimport StartStopIcon from '@material-ui/icons/DirectionsTransit';\r\nimport WatchLaterOutlinedIcon from '@material-ui/icons/WatchLaterOutlined';\r\nimport { CHART_COLORS, REACT_VIS_CROSSHAIR_NO_LINE } from '../UIConstants';\r\nimport '../../node_modules/react-vis/dist/style.css';\r\n\r\n/**\r\n * Bar chart of average and planning percentile wait and time across the day.\r\n */\r\nfunction InfoJourneyChart(props) {\r\n  const [crosshairValues, setCrosshairValues] = useState([]); // tooltip starts out empty\r\n\r\n  /**\r\n   * Event handler for onMouseLeave.\r\n   * @private\r\n   */\r\n  const onMouseLeave = () => {\r\n    setCrosshairValues([]);\r\n  };\r\n\r\n  /**\r\n   * Event handler for onValueMouseOver.\r\n   * @param {Object} value Data point hovered over..\r\n   * @private\r\n   */\r\n  const onValue = value => {\r\n    setCrosshairValues([value]);\r\n  };\r\n\r\n  const { firstWaits, secondWaits, firstTravels, secondTravels } = props;\r\n\r\n  const legendItems = [\r\n    {\r\n      title: (\r\n        <Fragment>\r\n          <StartStopIcon fontSize=\"small\" style={{ verticalAlign: 'sub' }} />\r\n          &nbsp;Travel\r\n        </Fragment>\r\n      ),\r\n      color: CHART_COLORS[1],\r\n      strokeWidth: 10,\r\n    },\r\n    {\r\n      title: (\r\n        <Fragment>\r\n          <WatchLaterOutlinedIcon\r\n            fontSize=\"small\"\r\n            style={{ verticalAlign: 'sub' }}\r\n          />\r\n          &nbsp;Wait\r\n        </Fragment>\r\n      ),\r\n      color: CHART_COLORS[0],\r\n      strokeWidth: 10,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ display: 'flex' }}>\r\n        <XYPlot\r\n          xType=\"ordinal\"\r\n          height={125}\r\n          width={175}\r\n          margin={{ left: 40, right: 10, top: 0, bottom: 30 }}\r\n          stackBy=\"y\"\r\n          onMouseLeave={onMouseLeave}\r\n        >\r\n          <HorizontalGridLines />\r\n          <XAxis />\r\n          <YAxis hideLine />\r\n\r\n          <VerticalBarSeries\r\n            cluster=\"first\"\r\n            color={CHART_COLORS[0]}\r\n            onValueMouseOver={onValue}\r\n            data={[\r\n              { x: 'Typical', y: firstWaits[0] },\r\n              { x: 'Planning', y: firstWaits[1] },\r\n            ]}\r\n          />\r\n\r\n          <VerticalBarSeries\r\n            cluster=\"first\"\r\n            color={CHART_COLORS[1]}\r\n            onValueMouseOver={onValue}\r\n            data={[\r\n              { x: 'Typical', y: firstTravels[0] },\r\n              { x: 'Planning', y: firstTravels[1] },\r\n            ]}\r\n          />\r\n\r\n          <VerticalBarSeries\r\n            cluster=\"second\"\r\n            color={CHART_COLORS[2]}\r\n            onValueMouseOver={onValue}\r\n            data={[\r\n              { x: 'Typical', y: secondWaits[0] },\r\n              { x: 'Planning', y: secondWaits[1] },\r\n            ]}\r\n          />\r\n\r\n          <VerticalBarSeries\r\n            cluster=\"second\"\r\n            color={CHART_COLORS[3]}\r\n            onValueMouseOver={onValue}\r\n            data={[\r\n              { x: 'Typical', y: secondTravels[0] },\r\n              { x: 'Planning', y: secondTravels[1] },\r\n            ]}\r\n          />\r\n\r\n          <ChartLabel\r\n            text=\"minutes\"\r\n            className=\"alt-y-label\"\r\n            includeMargin={false}\r\n            xPercent={0.0}\r\n            yPercent={0.06}\r\n            style={{\r\n              transform: 'rotate(-90)',\r\n              textAnchor: 'end',\r\n            }}\r\n          />\r\n\r\n          {crosshairValues.length > 0 && (\r\n            <Crosshair\r\n              values={crosshairValues}\r\n              style={REACT_VIS_CROSSHAIR_NO_LINE}\r\n            >\r\n              <div className=\"rv-crosshair__inner__content\">\r\n                {Math.round(\r\n                  crosshairValues[0].y -\r\n                    (crosshairValues[0].y0 ? crosshairValues[0].y0 : 0),\r\n                )}{' '}\r\n                min\r\n              </div>\r\n            </Crosshair>\r\n          )}\r\n        </XYPlot>\r\n        <DiscreteColorLegend\r\n          orientation=\"vertical\"\r\n          width={110}\r\n          items={legendItems}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InfoJourneyChart;\r\n","/**\r\n * Card for displaying one metric.\r\n */\r\n\r\nimport React, { Fragment, useState } from 'react';\r\n\r\nimport { Typography } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InfoIcon from '@material-ui/icons/InfoOutlined';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport Box from '@material-ui/core/Box';\r\nimport {\r\n  scoreBackgroundColor,\r\n  scoreContrastColor,\r\n} from '../helpers/routeCalculations';\r\n\r\n/**\r\n * Renders an \"nyc bus stats\" style summary of a route and direction.\r\n *\r\n * @param {any} props\r\n */\r\nexport default function InfoScoreCard(props) {\r\n  const {\r\n    score,\r\n    hideRating,\r\n    title,\r\n    largeValue,\r\n    smallValue,\r\n    bottomContent,\r\n    popoverContent,\r\n  } = props;\r\n\r\n  const useStyles = makeStyles(theme => ({\r\n    popover: {\r\n      padding: theme.spacing(2),\r\n      maxWidth: 500,\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  function handleClick(event) {\r\n    setAnchorEl(event.currentTarget);\r\n  }\r\n\r\n  function handleClose() {\r\n    setAnchorEl(null);\r\n  }\r\n\r\n  const cardStyle = {\r\n    background: score != null ? scoreBackgroundColor(score) : 'gray',\r\n    color: score != null ? scoreContrastColor(score) : 'black',\r\n    margin: 4,\r\n  };\r\n\r\n  const rating =\r\n    score != null ? Math.max(Math.round(score / 10.0) / 2.0, 0.5) : 0;\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid item xs component={Paper} style={cardStyle}>\r\n        <Box\r\n          display=\"flex\"\r\n          flexDirection=\"column\"\r\n          justifyContent=\"flex-start\"\r\n          height=\"100%\"\r\n        >\r\n          <Typography variant=\"overline\">{title}</Typography>\r\n\r\n          <Box flexGrow={1}>\r\n            {' '}\r\n            {/* middle area takes all possible height */}\r\n            <Typography variant=\"h3\" display=\"inline\">\r\n              {largeValue}\r\n            </Typography>\r\n            <Typography variant=\"h5\" display=\"inline\">\r\n              {smallValue}\r\n            </Typography>\r\n            {hideRating ? null : (\r\n              <Rating readOnly size=\"small\" value={rating} precision={0.5} />\r\n            )}\r\n          </Box>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"flex-end\"\r\n            pt={2}\r\n          >\r\n            {bottomContent}\r\n            <IconButton size=\"small\" onClick={handleClick}>\r\n              <InfoIcon fontSize=\"small\" />\r\n            </IconButton>\r\n          </Box>\r\n        </Box>\r\n      </Grid>\r\n\r\n      <Popover\r\n        open={Boolean(anchorEl)}\r\n        anchorEl={anchorEl}\r\n        onClose={handleClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'center',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'center',\r\n        }}\r\n      >\r\n        <div className={classes.popover}>{popoverContent}</div>\r\n      </Popover>\r\n    </Fragment>\r\n  );\r\n}\r\n","/**\r\n * New legend for explaining how scores are derived from metrics.\r\n */\r\n\r\nimport React from 'react';\r\n\r\nimport { Table, TableBody, TableCell, TableRow } from '@material-ui/core';\r\n\r\nimport {\r\n  scoreBackgroundColor,\r\n  scoreContrastColor,\r\n} from '../helpers/routeCalculations';\r\n\r\nexport default function InfoScoreLegend(props) {\r\n  const { rows } = props;\r\n\r\n  return (\r\n    <Table>\r\n      <TableBody>\r\n        {rows.map(row => {\r\n          return (\r\n            <TableRow key={row.value}>\r\n              <TableCell>{row.label}</TableCell>\r\n              <TableCell\r\n                align=\"right\"\r\n                style={{\r\n                  color: scoreContrastColor(row.value),\r\n                  backgroundColor: scoreBackgroundColor(row.value),\r\n                }}\r\n              >\r\n                {row.value}\r\n              </TableCell>\r\n            </TableRow>\r\n          );\r\n        })}\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n}\r\n","/**\r\n * Stop to stop trip summary component.\r\n */\r\n\r\nimport React, { Fragment, useState } from 'react';\r\n\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport InfoIcon from '@material-ui/icons/InfoOutlined';\r\nimport StartStopIcon from '@material-ui/icons/DirectionsTransit';\r\nimport WatchLaterOutlinedIcon from '@material-ui/icons/WatchLaterOutlined';\r\nimport {\r\n  computeScores,\r\n  HighestPossibleScore,\r\n} from '../helpers/routeCalculations';\r\nimport { getDistanceInMiles } from '../helpers/mapGeometry';\r\nimport { PLANNING_PERCENTILE, TENTH_PERCENTILE } from '../UIConstants';\r\nimport { getPercentileValue } from '../helpers/graphData';\r\nimport InfoJourneyChart from './InfoJourneyChart';\r\nimport InfoScoreCard from './InfoScoreCard';\r\nimport InfoScoreLegend from './InfoScoreLegend';\r\n\r\n/**\r\n * Renders an \"nyc bus stats\" style summary of a route and direction.\r\n *\r\n * @param {any} props\r\n */\r\nexport default function InfoTripSummary(props) {\r\n  const [typicalAnchorEl, setTypicalAnchorEl] = useState(null);\r\n  const [planningAnchorEl, setPlanningAnchorEl] = useState(null);\r\n\r\n  function handleTypicalClick(event) {\r\n    setTypicalAnchorEl(event.currentTarget);\r\n  }\r\n\r\n  function handleTypicalClose() {\r\n    setTypicalAnchorEl(null);\r\n  }\r\n\r\n  function handlePlanningClick(event) {\r\n    setPlanningAnchorEl(event.currentTarget);\r\n  }\r\n\r\n  function handlePlanningClose() {\r\n    setPlanningAnchorEl(null);\r\n  }\r\n\r\n  const { tripMetrics, graphParams, routes } = props;\r\n  const waitTimes = tripMetrics ? tripMetrics.interval.waitTimes : null;\r\n  const tripTimes = tripMetrics ? tripMetrics.interval.tripTimes : null;\r\n  const scheduleAdherence = tripMetrics\r\n    ? tripMetrics.interval.departureScheduleAdherence\r\n    : null;\r\n  const waitTimes2 =\r\n    tripMetrics && tripMetrics.interval2\r\n      ? tripMetrics.interval2.waitTimes\r\n      : null;\r\n  const tripTimes2 =\r\n    tripMetrics && tripMetrics.interval2\r\n      ? tripMetrics.interval2.tripTimes\r\n      : null;\r\n  const scheduleAdherence2 =\r\n    tripMetrics && tripMetrics.interval2\r\n      ? tripMetrics.interval2.departureScheduleAdherence\r\n      : null;\r\n\r\n  const computeDistance = (myGraphParams, myRoutes) => {\r\n    if (myGraphParams && myGraphParams.endStopId) {\r\n      const directionId = myGraphParams.directionId;\r\n      const routeId = myGraphParams.routeId;\r\n      const route = myRoutes.find(thisRoute => thisRoute.id === routeId);\r\n      const directionInfo = route.directions.find(\r\n        dir => dir.id === directionId,\r\n      );\r\n      return getDistanceInMiles(\r\n        route,\r\n        directionInfo,\r\n        myGraphParams.startStopId,\r\n        myGraphParams.endStopId,\r\n      );\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  const distance = routes ? computeDistance(graphParams, routes) : null;\r\n\r\n  const speed =\r\n    tripTimes && tripTimes.count > 0 && distance\r\n      ? distance / (tripTimes.avg / 60.0)\r\n      : 0; // convert avg trip time to hours for mph\r\n  const speed2 =\r\n    tripTimes2 && tripTimes2.count > 0 && distance\r\n      ? distance / (tripTimes2.avg / 60.0)\r\n      : 0; // convert avg trip time to hours for mph\r\n\r\n  const onTimeRate =\r\n    scheduleAdherence && scheduleAdherence.scheduledCount > 0\r\n      ? scheduleAdherence.onTimeCount / scheduleAdherence.scheduledCount\r\n      : null;\r\n  const onTimeRate2 =\r\n    scheduleAdherence2 && scheduleAdherence2.scheduledCount > 0\r\n      ? scheduleAdherence2.onTimeCount / scheduleAdherence2.scheduledCount\r\n      : null;\r\n\r\n  let travelTimeVariability = null;\r\n  if (tripTimes) {\r\n    travelTimeVariability =\r\n      getPercentileValue(tripTimes, PLANNING_PERCENTILE) -\r\n      getPercentileValue(tripTimes, TENTH_PERCENTILE);\r\n  }\r\n  let travelTimeVariability2 = 0;\r\n  if (tripTimes2) {\r\n    travelTimeVariability2 =\r\n      getPercentileValue(tripTimes2, PLANNING_PERCENTILE) -\r\n      getPercentileValue(tripTimes2, TENTH_PERCENTILE);\r\n  }\r\n\r\n  const scores =\r\n    speed && waitTimes.median\r\n      ? computeScores(\r\n          waitTimes.median,\r\n          onTimeRate,\r\n          speed,\r\n          travelTimeVariability,\r\n        )\r\n      : null;\r\n\r\n  const scores2 =\r\n    speed2 && waitTimes2.median\r\n      ? computeScores(\r\n          waitTimes2.median,\r\n          onTimeRate2,\r\n          speed2,\r\n          travelTimeVariability2,\r\n        )\r\n      : {};\r\n\r\n  let whyNoData = null;\r\n  if (!distance) {\r\n    whyNoData = 'Unable to determine distance between selected stops.';\r\n  } else if (!tripTimes || !tripTimes.count) {\r\n    whyNoData = 'No trip data between selected stops.';\r\n  } else if (!speed) {\r\n    whyNoData = 'Unable to determine speed between selected stops.';\r\n  } else if (!waitTimes.median) {\r\n    whyNoData = 'No median wait time available.';\r\n  }\r\n\r\n  const useStyles = makeStyles(theme => ({\r\n    uncolored: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    popover: {\r\n      padding: theme.spacing(2),\r\n      maxWidth: 500,\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  const planningWait = Math.round(\r\n    getPercentileValue(waitTimes, PLANNING_PERCENTILE),\r\n  );\r\n  const planningTravel = Math.round(\r\n    getPercentileValue(tripTimes, PLANNING_PERCENTILE),\r\n  );\r\n  const planningWait2 = waitTimes2\r\n    ? Math.round(getPercentileValue(waitTimes2, PLANNING_PERCENTILE))\r\n    : null;\r\n  const planningTravel2 = tripTimes2\r\n    ? Math.round(getPercentileValue(tripTimes2, PLANNING_PERCENTILE))\r\n    : null;\r\n\r\n  const typicalWait = Math.round(waitTimes.median);\r\n  const typicalTravel = Math.round(tripTimes.median); // note: can have NaN issues here due to lack of trip data between stops\r\n  const typicalWait2 = waitTimes2 ? Math.round(waitTimes2.median) : null;\r\n  const typicalTravel2 = waitTimes2 ? Math.round(tripTimes2.median) : null;\r\n\r\n  const popoverContentTotalScore = (\r\n    <Fragment>\r\n      Trip score of {scores.totalScore} is the average of the following\r\n      subscores:\r\n      <Box pt={2}>\r\n        <Table>\r\n          <TableBody>\r\n            <TableRow>\r\n              <TableCell>Median wait</TableCell>\r\n              <TableCell align=\"right\">{scores.medianWaitScore}</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>Long wait probability</TableCell>\r\n              <TableCell align=\"right\">{scores.longWaitScore}</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>Speed for median trip</TableCell>\r\n              <TableCell align=\"right\"> {scores.speedScore}</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>Travel time variability</TableCell>\r\n              <TableCell align=\"right\"> {scores.travelVarianceScore}</TableCell>\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </Box>\r\n    </Fragment>\r\n  );\r\n\r\n  const popoverContentWait = (\r\n    <Fragment>\r\n      Median wait of{' '}\r\n      {waitTimes && waitTimes.median != null\r\n        ? waitTimes.median.toFixed(1)\r\n        : '--'}{' '}\r\n      min gets a score of {scores.medianWaitScore}.\r\n      <Box pt={2}>\r\n        <InfoScoreLegend\r\n          rows={[\r\n            { label: '5 min or less', value: 100 },\r\n            { label: '6.25 min', value: 75 },\r\n            { label: '7.5 min', value: 50 },\r\n            { label: '8.75', value: 25 },\r\n            { label: '10 min or more', value: 0 },\r\n          ]}\r\n        />\r\n      </Box>\r\n    </Fragment>\r\n  );\r\n\r\n  const popoverContentOnTimeRate = (\r\n    <Fragment>\r\n      The on-time percentage is the percentage of scheduled departure times\r\n      where a vehicle departed less than 5 minutes after the scheduled departure\r\n      time or less than 1 minute before the scheduled departure time.\r\n      Probability of{' '}\r\n      {(onTimeRate * 100).toFixed(1) /* be more precise than card */}% gets a\r\n      score of {scores.onTimeRateScore}.\r\n    </Fragment>\r\n  );\r\n\r\n  const popoverContentSpeed = (\r\n    <Fragment>\r\n      Speed for median trip of {speed.toFixed(1)} mph gets a score of{' '}\r\n      {scores.speedScore}.\r\n      <Box pt={2}>\r\n        <InfoScoreLegend\r\n          rows={[\r\n            { label: '10 mph or more', value: 100 },\r\n            { label: '8.75 mph', value: 75 },\r\n            { label: '7.5 mph', value: 50 },\r\n            { label: '6.25 mph', value: 25 },\r\n            { label: '5 mph or less', value: 0 },\r\n          ]}\r\n        />\r\n      </Box>\r\n    </Fragment>\r\n  );\r\n\r\n  const popoverContentTravelVariability = (\r\n    <Fragment>\r\n      Travel time variability is the difference between the 90th percentile\r\n      travel time and the 10th percentile travel time. This measures how much\r\n      extra travel time is needed for some trips. Variability of{' '}\r\n      {`\\u00b1${(travelTimeVariability / 2).toFixed(1)}`} min gets a score of{' '}\r\n      {scores.travelVarianceScore}.\r\n      <Box pt={2}>\r\n        <InfoScoreLegend\r\n          rows={[\r\n            { label: '5 min or less', value: 100 },\r\n            { label: '6.25 min', value: 75 },\r\n            { label: '7.5 min', value: 50 },\r\n            { label: '8.75 min', value: 25 },\r\n            { label: '10 min or more', value: 0 },\r\n          ]}\r\n        />\r\n      </Box>\r\n    </Fragment>\r\n  );\r\n\r\n  const infoTripCards = () => (\r\n    <Fragment>\r\n      <Grid item xs component={Paper} className={classes.uncolored}>\r\n        <Typography variant=\"overline\">Typical journey</Typography>\r\n        <br />\r\n\r\n        <Typography variant=\"h3\" display=\"inline\">\r\n          {typicalWait + typicalTravel}\r\n        </Typography>\r\n        <Typography variant=\"h5\" display=\"inline\">\r\n          &nbsp;min\r\n        </Typography>\r\n\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"space-between\"\r\n          alignItems=\"flex-end\"\r\n          pt={2}\r\n        >\r\n          <Typography variant=\"body1\">\r\n            <WatchLaterOutlinedIcon\r\n              fontSize=\"small\"\r\n              style={{ verticalAlign: 'sub' }}\r\n            />\r\n            &nbsp;\r\n            {typicalWait} min\r\n            <br />\r\n            <StartStopIcon fontSize=\"small\" style={{ verticalAlign: 'sub' }} />\r\n            &nbsp;\r\n            {typicalTravel} min\r\n          </Typography>\r\n          <IconButton size=\"small\" onClick={handleTypicalClick}>\r\n            <InfoIcon fontSize=\"small\" />\r\n          </IconButton>\r\n        </Box>\r\n      </Grid>\r\n\r\n      <Grid item xs component={Paper} className={classes.uncolored}>\r\n        <Typography variant=\"overline\">Journey planning</Typography>\r\n        <br />\r\n\r\n        <Typography variant=\"h3\" display=\"inline\">\r\n          {planningWait + planningTravel}\r\n        </Typography>\r\n        <Typography variant=\"h5\" display=\"inline\">\r\n          &nbsp;min\r\n        </Typography>\r\n\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent=\"space-between\"\r\n          alignItems=\"flex-end\"\r\n          pt={2}\r\n        >\r\n          <Typography variant=\"body1\">\r\n            <WatchLaterOutlinedIcon\r\n              fontSize=\"small\"\r\n              style={{ verticalAlign: 'sub' }}\r\n            />\r\n            &nbsp;\r\n            {planningWait} min\r\n            <br />\r\n            <StartStopIcon fontSize=\"small\" style={{ verticalAlign: 'sub' }} />\r\n            &nbsp;\r\n            {planningTravel} min\r\n          </Typography>\r\n          <IconButton size=\"small\" onClick={handlePlanningClick}>\r\n            <InfoIcon fontSize=\"small\" />\r\n          </IconButton>\r\n        </Box>\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n\r\n  const infoChartCard = () => (\r\n    <Fragment>\r\n      <Grid item xs component={Paper} className={classes.uncolored}>\r\n        <Typography variant=\"overline\">Journey Times</Typography>\r\n        <br />\r\n        <InfoJourneyChart\r\n          firstWaits={[typicalWait, planningWait]}\r\n          secondWaits={[typicalWait2, planningWait2]}\r\n          firstTravels={[typicalTravel, planningTravel]}\r\n          secondTravels={[typicalTravel2, planningTravel2]}\r\n        />\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n\r\n  return (\r\n    <Fragment>\r\n      <div style={{ padding: 8 }}>\r\n        {scores ? (\r\n          <Fragment>\r\n            <Grid container spacing={4}>\r\n              {/* spacing doesn't work exactly right here, just pads the Papers */}\r\n              {waitTimes2 ? infoChartCard() : infoTripCards()}\r\n              <InfoScoreCard\r\n                score={scores.totalScore}\r\n                title=\"Trip Score\"\r\n                hideRating\r\n                largeValue={\r\n                  scores.totalScore != null ? scores.totalScore : '--'\r\n                }\r\n                smallValue={`${\r\n                  waitTimes2 ? ` vs ${scores2.totalScore}` : ''\r\n                }/${HighestPossibleScore}`}\r\n                bottomContent=\"&nbsp;\"\r\n                popoverContent={popoverContentTotalScore}\r\n              />\r\n              <InfoScoreCard\r\n                score={scores.medianWaitScore}\r\n                title=\"Median Wait\"\r\n                hideRating={waitTimes2}\r\n                largeValue={Math.round(waitTimes.median)}\r\n                smallValue={`${\r\n                  waitTimes2 ? ` vs ${Math.round(waitTimes2.median)}` : ''\r\n                }\\u00a0min`}\r\n                bottomContent=\"&nbsp;\"\r\n                popoverContent={popoverContentWait}\r\n              />\r\n              <InfoScoreCard\r\n                score={scores.onTimeRateScore}\r\n                title=\"On-Time %\"\r\n                hideRating={waitTimes2}\r\n                largeValue={Math.round(onTimeRate * 100)}\r\n                smallValue={`${\r\n                  waitTimes2 ? ` vs ${Math.round(onTimeRate2 * 100)}` : ''\r\n                }%`}\r\n                bottomContent={\r\n                  scheduleAdherence\r\n                    ? `${scheduleAdherence.onTimeCount} times out of ${scheduleAdherence.scheduledCount}`\r\n                    : null\r\n                }\r\n                popoverContent={popoverContentOnTimeRate}\r\n              />\r\n              <InfoScoreCard\r\n                score={scores.speedScore}\r\n                title=\"Median Trip Speed\"\r\n                hideRating={tripTimes2}\r\n                largeValue={speed.toFixed(0)}\r\n                smallValue={`${\r\n                  tripTimes2 ? ` vs ${speed2.toFixed(0)}` : ''\r\n                }\\u00a0mph`}\r\n                bottomContent={`${\r\n                  distance != null ? distance.toFixed(1) : '--'\r\n                } miles`}\r\n                popoverContent={popoverContentSpeed}\r\n              />\r\n              <InfoScoreCard\r\n                score={scores.travelVarianceScore}\r\n                title=\"Travel Time Variability\"\r\n                hideRating={tripTimes2}\r\n                largeValue={\r\n                  travelTimeVariability != null\r\n                    ? `\\u00b1${(travelTimeVariability / 2).toFixed(0)}`\r\n                    : '-'\r\n                }\r\n                smallValue={`${\r\n                  tripTimes2\r\n                    ? ` vs \\u00b1${(travelTimeVariability2 / 2).toFixed(0)}`\r\n                    : ''\r\n                }\\u00a0min`}\r\n                bottomContent=\"&nbsp;\"\r\n                popoverContent={popoverContentTravelVariability}\r\n              />\r\n            </Grid>\r\n\r\n            <Popover\r\n              open={Boolean(typicalAnchorEl)}\r\n              anchorEl={typicalAnchorEl}\r\n              onClose={handleTypicalClose}\r\n              anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'center',\r\n              }}\r\n              transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'center',\r\n              }}\r\n            >\r\n              <div className={classes.popover}>\r\n                This is the median wait time when a rider arrives randomly at a\r\n                stop or a rider starts checking predictions. This is combined\r\n                with the median trip time.\r\n              </div>\r\n            </Popover>\r\n\r\n            <Popover\r\n              open={Boolean(planningAnchorEl)}\r\n              anchorEl={planningAnchorEl}\r\n              onClose={handlePlanningClose}\r\n              anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'center',\r\n              }}\r\n              transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'center',\r\n              }}\r\n            >\r\n              <div className={classes.popover}>\r\n                When planning to arrive by a specific time, the 90th percentile\r\n                wait time and 90th percentile travel time suggest how far in\r\n                advance to start checking predictions. Walking time should also\r\n                be added.\r\n              </div>\r\n            </Popover>\r\n          </Fragment>\r\n        ) : (\r\n          `No trip summary (${whyNoData})`\r\n        )}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport {\r\n  XYPlot,\r\n  HorizontalGridLines,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalBarSeries,\r\n  VerticalRectSeries,\r\n  ChartLabel,\r\n  Crosshair,\r\n} from 'react-vis';\r\nimport { AppBar, Box, Tab, Tabs, Typography } from '@material-ui/core';\r\nimport InfoByDay from './InfoByDay';\r\nimport InfoIntervalsOfDay from './InfoIntervalsOfDay';\r\nimport InfoTripSummary from './InfoTripSummary';\r\nimport { CHART_COLORS, REACT_VIS_CROSSHAIR_NO_LINE } from '../UIConstants';\r\n\r\nfunction Info(props) {\r\n  const [crosshairValues, setCrosshairValues] = React.useState({});\r\n  const [tabValue, setTabValue] = React.useState(0);\r\n\r\n  const {\r\n    tripMetrics,\r\n    tripMetricsError,\r\n    tripMetricsLoading,\r\n    graphParams,\r\n    routes,\r\n  } = props;\r\n\r\n  const headways = tripMetrics ? tripMetrics.interval.headways : null;\r\n  const waitTimes = tripMetrics ? tripMetrics.interval.waitTimes : null;\r\n  const tripTimes = tripMetrics ? tripMetrics.interval.tripTimes : null;\r\n  const byDayData = tripMetrics ? tripMetrics.byDay : null;\r\n\r\n  const headways2 =\r\n    tripMetrics && tripMetrics.interval2\r\n      ? tripMetrics.interval2.headways\r\n      : null;\r\n  const waitTimes2 =\r\n    tripMetrics && tripMetrics.interval2\r\n      ? tripMetrics.interval2.waitTimes\r\n      : null;\r\n  const tripTimes2 =\r\n    tripMetrics && tripMetrics.interval2\r\n      ? tripMetrics.interval2.tripTimes\r\n      : null;\r\n  /*\r\n   * By day data is not requested for the second date range.\r\n   *\r\n   * The second range can have the same data the first, as they are using the same GraphQL query API.\r\n   * It gets tricky for the \"by day\" tab, because how do you chart two date ranges by day when they\r\n   * could have different numbers of days in them?  Does this chart only work when the ranges have\r\n   * the same number of days?  Do we \"scale\" the time axis so both are the full width of the chart?\r\n   */\r\n\r\n  const headwayData =\r\n    headways && headways.histogram\r\n      ? headways.histogram.map(bin => ({\r\n          x0: bin.binStart,\r\n          x: bin.binEnd,\r\n          y: bin.count,\r\n        }))\r\n      : null;\r\n\r\n  const waitData =\r\n    waitTimes && waitTimes.histogram\r\n      ? waitTimes.histogram.map(bin => ({\r\n          x0: bin.binStart,\r\n          x: bin.binEnd,\r\n          y: bin.count,\r\n        }))\r\n      : null;\r\n\r\n  const tripData =\r\n    tripTimes && tripTimes.histogram\r\n      ? tripTimes.histogram.map(bin => ({\r\n          x0: bin.binStart,\r\n          x: bin.binEnd,\r\n          y: bin.count,\r\n        }))\r\n      : null;\r\n\r\n  const headwayData2 =\r\n    headways2 && headways2.histogram\r\n      ? headways2.histogram.map(bin => ({\r\n          x0: bin.binStart,\r\n          x: bin.binEnd,\r\n          y: bin.count,\r\n        }))\r\n      : null;\r\n\r\n  const waitData2 =\r\n    waitTimes2 && waitTimes2.histogram\r\n      ? waitTimes2.histogram.map(bin => ({\r\n          x0: bin.binStart,\r\n          x: bin.binEnd,\r\n          y: bin.count,\r\n        }))\r\n      : null;\r\n\r\n  const tripData2 =\r\n    tripTimes2 && tripTimes2.histogram\r\n      ? tripTimes2.histogram.map(bin => ({\r\n          x0: bin.binStart,\r\n          x: bin.binEnd,\r\n          y: bin.count,\r\n        }))\r\n      : null;\r\n\r\n  /**\r\n   * Event handler for onMouseLeave.\r\n   * @private\r\n   */\r\n  function onMouseLeave() {\r\n    setCrosshairValues({});\r\n  }\r\n\r\n  /**\r\n   * Event handler for onNearestX.\r\n   * @param {Object} value Selected value.\r\n   * @param {index} index Index of the value in the data array.\r\n   * @private\r\n   */\r\n  function onNearestXHeadway(value, { index }) {\r\n    setCrosshairValues({ headway: [headwayData[index]] });\r\n  }\r\n\r\n  function onNearestXWaitTimes(value, { index }) {\r\n    setCrosshairValues({ wait: [waitData[index]] });\r\n  }\r\n\r\n  function onNearestXTripTimes(value, { index }) {\r\n    setCrosshairValues({ trip: [tripData[index]] });\r\n  }\r\n\r\n  function handleTabChange(event, newValue) {\r\n    setTabValue(newValue);\r\n  }\r\n\r\n  function a11yProps(index) {\r\n    return {\r\n      id: `simple-tab-${index}`,\r\n      'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n  }\r\n\r\n  const SUMMARY = 0;\r\n  const BY_DAY = 1;\r\n  const TIME_OF_DAY = 2;\r\n  const HEADWAYS = 3;\r\n  const WAITS = 4;\r\n  const TRIPS = 5;\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs\r\n          value={tabValue}\r\n          onChange={handleTabChange}\r\n          aria-label=\"tab bar\"\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"on\"\r\n        >\r\n          <Tab\r\n            style={{ minWidth: 72 }}\r\n            label=\"Summary\"\r\n            {...a11yProps(SUMMARY)}\r\n          />\r\n          <Tab style={{ minWidth: 72 }} label=\"By Day\" {...a11yProps(BY_DAY)} />\r\n          <Tab\r\n            style={{ minWidth: 72 }}\r\n            label=\"By Time of Day\"\r\n            {...a11yProps(TIME_OF_DAY)}\r\n          />\r\n          <Tab\r\n            style={{ minWidth: 72 }}\r\n            label=\"Headways\"\r\n            {...a11yProps(HEADWAYS)}\r\n          />\r\n          <Tab\r\n            style={{ minWidth: 72 }}\r\n            label=\"Wait Times\"\r\n            {...a11yProps(WAITS)}\r\n          />\r\n          <Tab\r\n            style={{ minWidth: 72 }}\r\n            label=\"Trip Times\"\r\n            {...a11yProps(TRIPS)}\r\n          />\r\n        </Tabs>\r\n      </AppBar>\r\n\r\n      {headways && routes ? (\r\n        <div>\r\n          <Box p={2} hidden={tabValue !== SUMMARY}>\r\n            <InfoTripSummary\r\n              tripMetrics={tripMetrics}\r\n              graphParams={graphParams}\r\n              routes={routes}\r\n            />\r\n          </Box>\r\n\r\n          <Box p={2} hidden={tabValue !== BY_DAY}>\r\n            <Typography variant=\"h5\" display=\"inline\">\r\n              Performance by Day\r\n            </Typography>\r\n\r\n            <InfoByDay\r\n              byDayData={\r\n                byDayData /* consider switching to trip metrics here for consistency */\r\n              }\r\n              graphParams={graphParams}\r\n              routes={routes}\r\n            />\r\n          </Box>\r\n\r\n          <Box p={2} hidden={tabValue !== TIME_OF_DAY}>\r\n            <Typography variant=\"h5\" display=\"inline\">\r\n              Performance by Time of Day\r\n            </Typography>\r\n\r\n            <InfoIntervalsOfDay tripMetrics={tripMetrics} />\r\n          </Box>\r\n\r\n          <Box p={2} hidden={tabValue !== HEADWAYS}>\r\n            <Typography variant=\"h5\" display=\"inline\">\r\n              Headways (Time Between Vehicles)\r\n            </Typography>\r\n            <p>\r\n              {headways.count + 1} arrivals, median headway{' '}\r\n              {Math.round(headways.median)} minutes, max headway{' '}\r\n              {Math.round(headways.max)} minutes\r\n            </p>\r\n            <XYPlot\r\n              xDomain={[0, Math.max(60, Math.round(headways.max) + 5)]}\r\n              height={200}\r\n              width={400}\r\n              onMouseLeave={onMouseLeave}\r\n            >\r\n              <HorizontalGridLines />\r\n              <XAxis />\r\n              <YAxis hideLine />\r\n\r\n              <VerticalRectSeries\r\n                cluster=\"first\"\r\n                data={headwayData}\r\n                onNearestX={onNearestXHeadway}\r\n                stroke=\"white\"\r\n                fill={CHART_COLORS[0]}\r\n                style={{ strokeWidth: 2 }}\r\n              />\r\n              {headwayData2 ? (\r\n                <VerticalBarSeries\r\n                  cluster=\"second\"\r\n                  data={headwayData2}\r\n                  onNearestX={onNearestXHeadway}\r\n                  stroke=\"white\"\r\n                  fill={CHART_COLORS[2]}\r\n                  style={{ strokeWidth: 2 }}\r\n                />\r\n              ) : null}\r\n\r\n              <ChartLabel\r\n                text=\"arrivals\"\r\n                className=\"alt-y-label\"\r\n                includeMargin={false}\r\n                xPercent={0.06}\r\n                yPercent={0.06}\r\n                style={{\r\n                  transform: 'rotate(-90)',\r\n                  textAnchor: 'end',\r\n                }}\r\n              />\r\n\r\n              <ChartLabel\r\n                text=\"minutes\"\r\n                className=\"alt-x-label\"\r\n                includeMargin={false}\r\n                xPercent={0.9}\r\n                yPercent={0.94}\r\n              />\r\n\r\n              {crosshairValues.headway && (\r\n                <Crosshair\r\n                  values={crosshairValues.headway}\r\n                  style={REACT_VIS_CROSSHAIR_NO_LINE}\r\n                >\r\n                  <div className=\"rv-crosshair__inner__content\">\r\n                    Arrivals: {Math.round(crosshairValues.headway[0].y)}\r\n                  </div>\r\n                </Crosshair>\r\n              )}\r\n            </XYPlot>\r\n          </Box>\r\n        </div>\r\n      ) : null}\r\n\r\n      {waitTimes ? (\r\n        <Box p={2} hidden={tabValue !== WAITS}>\r\n          <Typography variant=\"h5\" display=\"inline\">\r\n            Wait Times\r\n          </Typography>\r\n          <p>\r\n            median wait time {Math.round(waitTimes.median)} minutes, max wait\r\n            time {Math.round(waitTimes.max)} minutes\r\n          </p>\r\n          <XYPlot\r\n            xDomain={[0, Math.max(60, Math.round(waitTimes.max) + 5)]}\r\n            height={200}\r\n            width={400}\r\n            onMouseLeave={onMouseLeave}\r\n          >\r\n            <HorizontalGridLines />\r\n            <XAxis />\r\n            <YAxis hideLine tickFormat={v => `${v}%`} />\r\n\r\n            <VerticalRectSeries\r\n              cluster=\"first\"\r\n              data={waitData}\r\n              onNearestX={onNearestXWaitTimes}\r\n              stroke=\"white\"\r\n              fill={CHART_COLORS[0]}\r\n              style={{ strokeWidth: 2 }}\r\n            />\r\n            {waitData2 ? (\r\n              <VerticalBarSeries\r\n                cluster=\"second\"\r\n                data={waitData2}\r\n                onNearestX={onNearestXHeadway}\r\n                stroke=\"white\"\r\n                fill={CHART_COLORS[2]}\r\n                style={{ strokeWidth: 2 }}\r\n              />\r\n            ) : null}\r\n\r\n            <ChartLabel\r\n              text=\"chance\"\r\n              className=\"alt-y-label\"\r\n              includeMargin={false}\r\n              xPercent={0.06}\r\n              yPercent={0.06}\r\n              style={{\r\n                transform: 'rotate(-90)',\r\n                textAnchor: 'end',\r\n              }}\r\n            />\r\n\r\n            <ChartLabel\r\n              text=\"minutes\"\r\n              className=\"alt-x-label\"\r\n              includeMargin={false}\r\n              xPercent={0.9}\r\n              yPercent={0.94}\r\n            />\r\n\r\n            {crosshairValues.wait && (\r\n              <Crosshair\r\n                values={crosshairValues.wait}\r\n                style={REACT_VIS_CROSSHAIR_NO_LINE}\r\n              >\r\n                <div className=\"rv-crosshair__inner__content\">\r\n                  Chance: {Math.round(crosshairValues.wait[0].y)}%\r\n                </div>\r\n              </Crosshair>\r\n            )}\r\n          </XYPlot>\r\n        </Box>\r\n      ) : null}\r\n      {tripTimes ? (\r\n        <Box p={2} hidden={tabValue !== TRIPS}>\r\n          <Typography variant=\"h5\" display=\"inline\">\r\n            Trip Times\r\n          </Typography>\r\n          <p>\r\n            {tripTimes.count} trips, median {Math.round(tripTimes.median)}{' '}\r\n            minutes, max {Math.round(tripTimes.max)} minutes\r\n          </p>\r\n          <XYPlot\r\n            xDomain={[0, Math.max(60, Math.round(tripTimes.max) + 5)]}\r\n            height={200}\r\n            width={400}\r\n            onMouseLeave={onMouseLeave}\r\n          >\r\n            <HorizontalGridLines />\r\n            <XAxis />\r\n            <YAxis hideLine />\r\n\r\n            <VerticalRectSeries\r\n              cluster=\"first\"\r\n              data={tripData}\r\n              onNearestX={onNearestXTripTimes}\r\n              stroke=\"white\"\r\n              fill={CHART_COLORS[1]}\r\n              style={{ strokeWidth: 2 }}\r\n            />\r\n            {tripData2 ? (\r\n              <VerticalBarSeries\r\n                cluster=\"second\"\r\n                data={tripData2}\r\n                onNearestX={onNearestXHeadway}\r\n                stroke=\"white\"\r\n                fill={CHART_COLORS[3]}\r\n                style={{ strokeWidth: 2 }}\r\n              />\r\n            ) : null}\r\n\r\n            <ChartLabel\r\n              text=\"trips\"\r\n              className=\"alt-y-label\"\r\n              includeMargin={false}\r\n              xPercent={0.06}\r\n              yPercent={0.06}\r\n              style={{\r\n                transform: 'rotate(-90)',\r\n                textAnchor: 'end',\r\n              }}\r\n            />\r\n\r\n            <ChartLabel\r\n              text=\"minutes\"\r\n              className=\"alt-x-label\"\r\n              includeMargin={false}\r\n              xPercent={0.9}\r\n              yPercent={0.94}\r\n            />\r\n\r\n            {crosshairValues.trip && (\r\n              <Crosshair\r\n                values={crosshairValues.trip}\r\n                style={REACT_VIS_CROSSHAIR_NO_LINE}\r\n              >\r\n                <div className=\"rv-crosshair__inner__content\">\r\n                  Trips: {Math.round(crosshairValues.trip[0].y)}\r\n                </div>\r\n              </Crosshair>\r\n            )}\r\n          </XYPlot>\r\n        </Box>\r\n      ) : null}\r\n\r\n      {tripMetricsError ? (\r\n        <Box p={2}>\r\n          <code>Error: {tripMetricsError}</code>\r\n        </Box>\r\n      ) : null}\r\n      {tripMetricsLoading ? <Box p={2}>Loading...</Box> : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Info;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Map, TileLayer, Marker, Tooltip, Polyline } from 'react-leaflet';\r\nimport * as d3 from 'd3';\r\nimport L from 'leaflet';\r\nimport Control from 'react-leaflet-control';\r\nimport StartStopIcon from '@material-ui/icons/DirectionsTransit';\r\nimport EndStopIcon from '@material-ui/icons/Flag';\r\nimport { withTheme } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport ReactDOMServer from 'react-dom/server';\r\nimport { handleGraphParams } from '../actions';\r\nimport { getTripPoints, getDistanceInMiles } from '../helpers/mapGeometry';\r\nimport { Agencies } from '../config';\r\n\r\nclass MapStops extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.agency = Agencies[0];\r\n\r\n    this.state = {\r\n      height: this.computeHeight(),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.boundUpdate = this.updateDimensions.bind(this);\r\n    window.addEventListener('resize', this.boundUpdate);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateDimensions.bind(this));\r\n  }\r\n\r\n  /**\r\n   * Helper method that draws one stop with svg graphics and/or Material UI icons.\r\n   *\r\n   * @param {Object} stop The stop info object for this stop.\r\n   * @param {Object} currentPosition Coordinates for this stop.\r\n   * @param {Number} rotation Number of degrees to rotate to point in the direction of travel.\r\n   * @param {Function} onClickHandler Method for handling mouse clicks.\r\n   * @param {Object} tooltip The react-leaflet Tooltip for this stop.\r\n   * @returns {Object} The react-leaflet Marker.\r\n   */\r\n  populateStop = (\r\n    stop,\r\n    IconType,\r\n    currentPosition,\r\n    rotation,\r\n    onClickHandler,\r\n    tooltip,\r\n  ) => {\r\n    let icon = null;\r\n    const stopColor = this.props.theme.palette.primary;\r\n\r\n    if (IconType) {\r\n      // Given an IconType indicates start or end stop.  This is a white circle with a black icon,\r\n      // followed by the title of the stop.\r\n\r\n      icon = L.divIcon({\r\n        className: 'custom-icon', // this is needed to turn off the default icon styling (blank square)\r\n        iconSize: [240, 24],\r\n        iconAnchor: [12, 12], // centers icon over position, with text to the right\r\n        html:\r\n          `${`<svg width=\"24\" height=\"24\" viewBox=\"-10 -10 10 10\">` +\r\n            // this is a larger white circle\r\n\r\n            `<circle cx=\"-5\" cy=\"-5\" r=\"4.5\" fill=\"white\" stroke=\"${stopColor.main}\" stroke-width=\"0.75\"/>` +\r\n            // This is the passed in icon, which we ask React to render as html (becomes an svg object)\r\n            // We need to pass in our custom theme here, or else the page will get the default theme css\r\n            // injected into page, conflicting with our custom theme.\r\n\r\n            `</svg><div style=\"position:relative; top: -26px; left:2px\">`}\r\n              ${ReactDOMServer.renderToString(\r\n                <ThemeProvider theme={this.props.theme}>\r\n                  <IconType color=\"primary\" fontSize=\"small\" />\r\n                </ThemeProvider>,\r\n              )}\r\n          </div>` +\r\n          // this is the stop title with a text shadow to outline it in white\r\n\r\n          `<div style=\"position:relative; top:-50px; left:25px; font-weight:bold; color:${stopColor.main}; ` +\r\n          `text-shadow: -1px 1px 0 #fff,` +\r\n          `1px 1px 0 #fff,` +\r\n          `1px -1px 0 #fff,` +\r\n          `-1px -1px 0 #fff;\">${stop.title}</div>`,\r\n      });\r\n    } else {\r\n      // If not given an IconType, this is just a regular stop.  This is a white circle with an\r\n      // svg \"v\" shape rotated by the given rotation value.\r\n\r\n      icon = L.divIcon({\r\n        className: `id${stop.id}`, // this is needed to turn off the default icon styling (blank square)\r\n        iconSize: [20, 20],\r\n        iconAnchor: [10, 10], // centers icon over position, with text to the right\r\n        html:\r\n          `<svg viewBox=\"-10 -10 10 10\"><g transform=\"rotate(${rotation} -5 -5)\">` +\r\n          // First we draw a white circle\r\n          `<circle cx=\"-5\" cy=\"-5\" r=\"3\" fill=\"white\" stroke=\"${stopColor.dark}\" stroke-width=\"0.75\"/>` +\r\n          // Then the \"v\" shape point to zero degrees (east).  The entire parent svg is rotated.\r\n          `<polyline points=\"-5.5,-6 -4,-5 -5.5,-4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\r\n            stroke=\"${stopColor.dark}\" stroke-width=\"0.6\" fill=\"none\"/>` +\r\n          `</g>` +\r\n          `</svg>`,\r\n      });\r\n    }\r\n\r\n    return (\r\n      <Marker\r\n        key={`${stop.id}-marker`}\r\n        position={currentPosition}\r\n        icon={icon}\r\n        onClick={e => {\r\n          e.sourceTarget.closeTooltip();\r\n          onClickHandler();\r\n        }}\r\n      >\r\n        {tooltip}\r\n      </Marker>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Computes angle in degrees from one point towards another\r\n   * @param {Object} fromPoint latLng of starting point\r\n   * @param {Object} toPoint latLng of ending point\r\n   * @returns {Number} The angle in degrees (where 0 is east, 90 is south)\r\n   */\r\n  angleFromTo = (fromPoint, toPoint) => {\r\n    const deltaX = toPoint.lon - fromPoint.lon;\r\n    // Note that y is reversed due to latitude's postive direction being reverse of screen y\r\n    const deltaY = fromPoint.lat - toPoint.lat;\r\n    const rotation = Math.round((Math.atan2(deltaY, deltaX) * 180) / Math.PI);\r\n    return rotation;\r\n  };\r\n\r\n  /**\r\n   * Draws all the stops in a given direction.\r\n   * @param {Array} routeStops Collection of route stops grouped by direction id\r\n   * @param {String} directionId The direction to render\r\n   * @param {Object} direction The direction info for the given direction\r\n   * @returns {Array} Array of Leaflet Marker objects\r\n   */\r\n  populateStops = (routeInfo, direction) => {\r\n    const stopIds = direction.stops;\r\n    const directionId = direction.id;\r\n\r\n    return stopIds.map(stopId => {\r\n      const stop = routeInfo.stops[stopId];\r\n\r\n      const currentPosition = [stop.lat, stop.lon];\r\n      const isStart = stopId === this.props.graphParams.startStopId;\r\n      const isEnd = stopId === this.props.graphParams.endStopId;\r\n\r\n      const onClickHandler = () => this.handleStopSelect(stop, directionId);\r\n      const tooltip = (\r\n        <Tooltip>\r\n          {stop.title}\r\n          <br />\r\n          {direction.title}\r\n        </Tooltip>\r\n      );\r\n\r\n      let IconType = null;\r\n      if (isStart) {\r\n        IconType = StartStopIcon;\r\n      } else if (isEnd) {\r\n        IconType = EndStopIcon;\r\n      }\r\n\r\n      // The direction of travel for a stop is from the GTFS shape point just before\r\n      // this stop (represented by after_index) to the next shape point. Edge cases\r\n      // at the beginning and end of a route seem to work out (probably because of\r\n      // extra coords points representing the terminals).\r\n\r\n      let rotation = 0;\r\n      const stopGeometry = direction.stop_geometry[stop.id];\r\n      if (stopGeometry) {\r\n        const previousPoint = direction.coords[stopGeometry.after_index];\r\n        const nextPoint = direction.coords[stopGeometry.after_index + 1];\r\n        rotation = this.angleFromTo(previousPoint, nextPoint);\r\n      }\r\n\r\n      const icon = this.populateStop(\r\n        stop,\r\n        IconType,\r\n        currentPosition,\r\n        rotation,\r\n        onClickHandler,\r\n        tooltip,\r\n      );\r\n      return icon;\r\n    });\r\n  };\r\n\r\n  // plot speed along a route\r\n\r\n  populateSpeed = (routeInfo, direction) => {\r\n    const directionId = direction.id;\r\n    const stopIds = direction.stops;\r\n    const polylines = [];\r\n\r\n    const graphParams = this.props.graphParams;\r\n\r\n    const numSegments = direction.loop ? stopIds.length : stopIds.length - 1;\r\n\r\n    const startStopIndex = graphParams.startStopId\r\n      ? stopIds.indexOf(graphParams.startStopId)\r\n      : -1;\r\n    const endStopIndex = graphParams.endStopId\r\n      ? stopIds.indexOf(graphParams.endStopId)\r\n      : -1;\r\n\r\n    for (let i = 0; i < numSegments; i++) {\r\n      const segmentStartStopId = stopIds[i];\r\n      const segmentEndStopId = stopIds[(i + 1) % stopIds.length];\r\n\r\n      // const segmentStartStop = routeInfo.stops[segmentStartStopId];\r\n      const segmentEndStop = routeInfo.stops[segmentEndStopId];\r\n\r\n      const speed = this.getSpeed(\r\n        routeInfo,\r\n        direction,\r\n        segmentStartStopId,\r\n        segmentEndStopId,\r\n      );\r\n\r\n      let color = 'white';\r\n      let weight = 12;\r\n\r\n      // If this is the start stop or a subsequent stop before the end stop,\r\n      // use a different color to highlight the selected range of stops.\r\n\r\n      if (startStopIndex !== -1 && endStopIndex !== -1) {\r\n        if (\r\n          direction.loop && startStopIndex >= endStopIndex\r\n            ? i >= startStopIndex || i < endStopIndex\r\n            : i >= startStopIndex && i < endStopIndex\r\n        ) {\r\n          color = this.props.theme.palette.primary.main;\r\n          weight = 14;\r\n        }\r\n      }\r\n\r\n      const tripPoints = getTripPoints(\r\n        routeInfo,\r\n        direction,\r\n        segmentStartStopId,\r\n        segmentEndStopId,\r\n      );\r\n\r\n      // draw a wide polyline as a background for the speed polyline\r\n\r\n      polylines.push(\r\n        <Polyline\r\n          key={`poly-speed-white-${directionId}-${segmentStartStopId}`}\r\n          positions={tripPoints}\r\n          color={color}\r\n          opacity={1}\r\n          weight={weight}\r\n        ></Polyline>,\r\n      );\r\n\r\n      // then the speed polyline on top of the white polyline\r\n\r\n      polylines.push(\r\n        <Polyline\r\n          key={`poly-speed-${directionId}-${segmentStartStopId}`}\r\n          positions={tripPoints}\r\n          color={speed < 0 ? 'white' : this.speedColor(speed)}\r\n          opacity={1}\r\n          weight={7}\r\n          onClick={e => {\r\n            // when this segment is clicked, plot only the stops for this route/dir by setting the first stop\r\n\r\n            e.originalEvent.view.L.DomEvent.stopPropagation(e);\r\n\r\n            /* TODO: decide if clicking on segments changes the stop selection.  Right now no, because\r\n             * the stop markers are fairly prominent at the moment.  If we make them smaller, then\r\n             * reconsider. */\r\n          }}\r\n        >\r\n          <Tooltip>\r\n            {speed < 0 ? '?' : speed.toFixed(1)} mph to {segmentEndStop.title}\r\n          </Tooltip>\r\n        </Polyline>,\r\n      );\r\n    } // end for\r\n    return polylines;\r\n  };\r\n\r\n  getSpeed = (routeInfo, direction, firstStopId, nextStopId) => {\r\n    const segmentMetricsMap = this.props.segmentMetricsMap;\r\n\r\n    const directionMetrics = segmentMetricsMap\r\n      ? segmentMetricsMap[direction.id]\r\n      : null;\r\n\r\n    const segmentMetrics = directionMetrics\r\n      ? directionMetrics[firstStopId]\r\n      : null;\r\n\r\n    if (!segmentMetrics || segmentMetrics.toStopId !== nextStopId) {\r\n      return -1;\r\n    }\r\n\r\n    const time = segmentMetrics.medianTripTime;\r\n\r\n    const distance = getDistanceInMiles(\r\n      routeInfo,\r\n      direction,\r\n      firstStopId,\r\n      nextStopId,\r\n    );\r\n\r\n    return time > 0 ? (distance / time) * 60 : -1; // miles per minute -> mph\r\n  };\r\n\r\n  SpeedLegend = () => {\r\n    const speedColorValues = [2.5, 6.25, 8.75, 12.5]; // representative values for quantizing\r\n    // center of scale is 7.5 with quartile boundaries at 5 and 10.\r\n\r\n    const speedColorLabels = [' < 5', '5-7.5', '7.5-10', '10+'];\r\n\r\n    const items = speedColorValues.map(speedColorValue => {\r\n      return (\r\n        <div key={speedColorValue}>\r\n          <i\r\n            style={{\r\n              backgroundColor: this.speedColor(speedColorValue),\r\n              width: 18,\r\n              float: 'left',\r\n            }}\r\n          >\r\n            &nbsp;\r\n          </i>{' '}\r\n          &nbsp;\r\n          {speedColorLabels[speedColorValues.indexOf(speedColorValue)]}\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <Control position=\"bottomright\">\r\n        <div\r\n          style={{\r\n            backgroundColor: 'white',\r\n            padding: '5px',\r\n          }}\r\n        >\r\n          Speed (mph)\r\n          {items}\r\n        </div>\r\n      </Control>\r\n    );\r\n  };\r\n\r\n  handleStopSelect = (stop, newDirectionId) => {\r\n    let {\r\n      // eslint-disable-next-line prefer-const\r\n      routeId,\r\n      startStopId,\r\n      endStopId,\r\n      directionId,\r\n    } = this.props.graphParams;\r\n\r\n    if (!startStopId) {\r\n      // no first stop set: treat as first stop\r\n      startStopId = stop.id;\r\n      endStopId = null;\r\n      directionId = newDirectionId;\r\n    } else if (!endStopId) {\r\n      if (directionId !== newDirectionId) {\r\n        // new direction: treat as first stop\r\n        startStopId = stop.id;\r\n        endStopId = null;\r\n        directionId = newDirectionId;\r\n      } else {\r\n        // set end stop, swap if needed\r\n        const selectedRoute = this.props.routes.find(\r\n          route => route.id === routeId,\r\n        );\r\n        const dirInfo = selectedRoute.directions.find(\r\n          dir => dir.id === directionId,\r\n        );\r\n\r\n        const stopIds = dirInfo.stops;\r\n\r\n        if (\r\n          !dirInfo.loop &&\r\n          stopIds.indexOf(stop.id) < stopIds.indexOf(startStopId)\r\n        ) {\r\n          endStopId = startStopId;\r\n          startStopId = stop.id;\r\n        } else {\r\n          // order is correct\r\n          endStopId = stop.id;\r\n        }\r\n      }\r\n    } else {\r\n      // both stops were already set, treat as first stop and clear second (although arguably if same direction could set as end stop)\r\n      startStopId = stop.id;\r\n      endStopId = null;\r\n      directionId = newDirectionId;\r\n    }\r\n\r\n    this.props.dispatch({\r\n      type: 'ROUTESCREEN',\r\n      payload: {\r\n        routeId,\r\n        directionId,\r\n        startStopId,\r\n        endStopId,\r\n      },\r\n      query: this.props.query,\r\n    });\r\n  };\r\n\r\n  // Make the map full height unless the window is smaller than the sm breakpoint (640px), in which\r\n  // case make the map half height.\r\n  //\r\n  // TODO: Need to convert this component to a functional component.  Then we can use the useTheme\r\n  // hook to programatically access the breakpoint widths.\r\n  //\r\n  // Note: This code has to be adjusted to be kept in sync with the UI layout.\r\n  //\r\n\r\n  computeHeight() {\r\n    return (\r\n      (window.innerWidth >= 640 ? window.innerHeight : window.innerHeight / 2) -\r\n      64 /* blue app bar */ -\r\n      50 /* breadcrumb paper */\r\n    );\r\n  }\r\n\r\n  updateDimensions() {\r\n    const height = this.computeHeight();\r\n    this.setState({ height });\r\n  }\r\n\r\n  speedColor(mph) {\r\n    // should this be multiples of walking speed? 3/6/9/12?\r\n    return d3\r\n      .scaleQuantize()\r\n      .domain([2.5, 12.5])\r\n      .range(['#8d1212', '#e60000', '#f07d02', '#84ca50'])(mph);\r\n  }\r\n\r\n  render() {\r\n    const { position, zoom } = this.props;\r\n\r\n    const mapClass = { width: '100%', height: this.state.height };\r\n\r\n    const { routes, graphParams } = this.props;\r\n\r\n    let selectedRoute = null;\r\n    const populatedRoutes = [];\r\n\r\n    if (routes && graphParams) {\r\n      selectedRoute = routes.find(route => route.id === graphParams.routeId);\r\n\r\n      if (selectedRoute) {\r\n        selectedRoute.directions.forEach(direction => {\r\n          // plot only the selected direction if we have one, or else all directions\r\n\r\n          if (\r\n            !graphParams.directionId ||\r\n            graphParams.directionId === direction.id\r\n          ) {\r\n            // add white lines and speed color lines\r\n\r\n            populatedRoutes.push(this.populateStops(selectedRoute, direction));\r\n\r\n            // draw stop markers on top of lines for all directions\r\n\r\n            populatedRoutes.unshift(\r\n              this.populateSpeed(selectedRoute, direction),\r\n            );\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function getMapInstruction() {\r\n      if (!graphParams.directionId) {\r\n        return 'Select a direction to see stops in that direction.';\r\n      }\r\n      if (!graphParams.startStopId) {\r\n        return 'Click an origin stop.';\r\n      }\r\n      if (!graphParams.endStopId) {\r\n        return 'Click a destination stop.';\r\n      }\r\n      return '';\r\n    }\r\n\r\n    const mapInstruction = getMapInstruction();\r\n\r\n    return (\r\n      <Map\r\n        center={position || this.agency.initialMapCenter}\r\n        bounds={selectedRoute ? selectedRoute.bounds : null}\r\n        zoom={zoom || this.agency.initialMapZoom}\r\n        style={mapClass}\r\n      >\r\n        <TileLayer\r\n          attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.'\r\n          url=\"https://stamen-tiles.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}.png\"\r\n          opacity={0.3}\r\n        />\r\n        {populatedRoutes}\r\n        <this.SpeedLegend />\r\n        <Control position=\"topright\">\r\n          {!graphParams.startStopId || !graphParams.endStopId ? (\r\n            <div className=\"map-instructions\">{mapInstruction}</div>\r\n          ) : null}\r\n        </Control>\r\n      </Map>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  graphParams: state.graphParams,\r\n  segmentMetricsMap: state.routeMetrics.segmentsMap,\r\n  query: state.location.query,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    handleGraphParams: params => dispatch(handleGraphParams(params)),\r\n    dispatch,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(withTheme(MapStops));\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Select, { components } from 'react-select';\r\nimport { makeStyles, createMuiTheme } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\n\r\nconst transitionDuration = 350;\r\nconst scrollHandlerDelay = 30;\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    background: {\r\n      focus: 'rgba(0, 0, 0, 0.05)',\r\n    },\r\n  },\r\n});\r\nconst useStyles = makeStyles({\r\n  input: {\r\n    display: 'flex',\r\n    '&:focus': {\r\n      backgroundColor: theme.palette.background.focus,\r\n    },\r\n  },\r\n  selectInput: {\r\n    minWidth: '100%',\r\n  },\r\n  valueContainer: {\r\n    display: 'flex',\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    minWidth: 0,\r\n    maxWidth: '100%',\r\n  },\r\n  textContent: {\r\n    display: 'flex',\r\n    flex: 1,\r\n    whiteSpace: 'nowrap',\r\n  },\r\n  placeholder: {\r\n    color: 'hsl(0, 0%, 75%)',\r\n  },\r\n  menu: {\r\n    position: 'absolute',\r\n    zIndex: 1200,\r\n  },\r\n});\r\n\r\nconst selectStyles = {\r\n  dropdownIndicator: provided => ({\r\n    ...provided,\r\n    paddingLeft: 0,\r\n    paddingRight: 0,\r\n  }),\r\n  input: (provided, state) => ({\r\n    ...provided,\r\n    marginLeft: 0,\r\n    marginRight: 0,\r\n    maxWidth: '100%',\r\n    overflow: 'hidden',\r\n    minWidth: state.minWidth,\r\n  }),\r\n};\r\n\r\n/**\r\n * handles keyup when textfield is focused via tab key\r\n * input element is focused on Enter/ArrowDown\r\n */\r\nfunction handleTextKeyUp(controlProps) {\r\n  return e => {\r\n    if (e.key === 'Enter' || e.key === 'ArrowDown') {\r\n      controlProps.selectProps.selectRef.current.focus();\r\n      controlProps.selectProps.setMenuIsOpen(true);\r\n    }\r\n  };\r\n}\r\n\r\nfunction Control(props) {\r\n  const {\r\n    children,\r\n    innerProps,\r\n    selectProps: { labelRef, textRef, classes, textFieldProps },\r\n  } = props;\r\n  const inputLabelProps = textFieldProps.InputLabelProps;\r\n  inputLabelProps.ref = labelRef;\r\n\r\n  return (\r\n    <TextField\r\n      ref={textRef}\r\n      fullWidth\r\n      InputProps={{\r\n        inputComponent: 'div',\r\n        inputProps: {\r\n          children,\r\n          ...innerProps,\r\n          className: classes.input,\r\n          tabIndex: 0,\r\n          onKeyUp: handleTextKeyUp(props),\r\n        },\r\n      }}\r\n      label={textFieldProps.label}\r\n      InputLabelProps={inputLabelProps}\r\n    />\r\n  );\r\n}\r\n\r\nfunction ValueContainer(props) {\r\n  const {\r\n    children,\r\n    selectProps: { classes },\r\n  } = props;\r\n  const input = children[1];\r\n  const singleValue = children[0];\r\n\r\n  return <div className={classes.valueContainer}>{[input, singleValue]}</div>;\r\n}\r\n\r\nfunction handleInputKeyUp(inputProps) {\r\n  const {\r\n    selectProps: { setTextFieldDOMRect, textRef },\r\n  } = inputProps;\r\n  return () => setTextFieldDOMRect(textRef.current.getBoundingClientRect());\r\n}\r\n\r\n/**\r\n * sets min-width of select input wrapper to 100% when input value exists\r\n * allows input cursor to be moved by clicking on blank space within textfield\r\n */\r\nfunction handleInputChange(inputProps) {\r\n  const {\r\n    onChange,\r\n    selectProps: { setInputMinWidth },\r\n  } = inputProps;\r\n\r\n  return e => {\r\n    onChange(e);\r\n    if (e.target.value) {\r\n      setInputMinWidth('100%');\r\n      e.target.style.minWidth = '100%';\r\n    } else {\r\n      setInputMinWidth(0);\r\n    }\r\n  };\r\n}\r\n\r\nfunction handleInputBlur(inputProps) {\r\n  return e => {\r\n    inputProps.onBlur(e);\r\n    inputProps.selectProps.setInputMinWidth(0);\r\n  };\r\n}\r\n\r\nfunction Input(props) {\r\n  return (\r\n    <components.Input\r\n      {...props}\r\n      tabIndex={-1}\r\n      // min-width used by select input wrapper (selectStyles object)\r\n      minWidth={props.selectProps.inputMinWidth}\r\n      className={props.selectProps.classes.selectInput}\r\n      onKeyUp={handleInputKeyUp(props)}\r\n      onChange={handleInputChange(props)}\r\n      onBlur={handleInputBlur(props)}\r\n    />\r\n  );\r\n}\r\n\r\nfunction Placeholder(props) {\r\n  const {\r\n    children,\r\n    selectProps: { classes },\r\n  } = props;\r\n\r\n  return (\r\n    <div className={`${classes.textContent} ${classes.placeholder}`}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SingleValue(props) {\r\n  return (\r\n    <div className={props.selectProps.classes.textContent}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DropdownIndicator(props) {\r\n  return (\r\n    <components.DropdownIndicator {...props}>\r\n      <ArrowDropDownIcon color=\"action\" />\r\n    </components.DropdownIndicator>\r\n  );\r\n}\r\n\r\nfunction Menu(props) {\r\n  const {\r\n    children,\r\n    innerProps,\r\n    selectProps: {\r\n      classes,\r\n      focusedOptionRef,\r\n      labelRef,\r\n      menuRef,\r\n      menuIsOpenTransition,\r\n      menuPlacementTop,\r\n      menuTransition,\r\n      textFieldDOMRect,\r\n    },\r\n  } = props;\r\n  const menuStyle = {};\r\n  const timeout = menuTransition.current ? transitionDuration : 0;\r\n  const [menuStyleRight, setMenuStyleRight] = useState(0);\r\n  const [menuStyleBottom, setMenuStyleBottom] = useState(0);\r\n\r\n  // evaluates true if there is more space for the menu above the textfield rather than below\r\n  menuPlacementTop.current =\r\n    textFieldDOMRect.top >\r\n    document.documentElement.clientHeight - textFieldDOMRect.bottom;\r\n\r\n  if (menuStyleRight) {\r\n    menuStyle.right = menuStyleRight;\r\n  }\r\n\r\n  if (menuStyleBottom) {\r\n    menuStyle.bottom = menuStyleBottom;\r\n  }\r\n\r\n  useEffect(() => {\r\n    const labelHeight = labelRef.current.clientHeight;\r\n    const inputHeight = textFieldDOMRect.height + labelHeight;\r\n    const rightWillSlice =\r\n      textFieldDOMRect.left + menuRef.current.clientWidth > window.innerWidth;\r\n    const leftWillSlice =\r\n      textFieldDOMRect.right - menuRef.current.clientWidth < 0;\r\n    const idealRightPosition =\r\n      textFieldDOMRect.right - document.documentElement.clientWidth;\r\n\r\n    /**\r\n     * check if the right side of the menu will be outside the view\r\n     * if so change the 'right' property of the style object\r\n     * but only if the left side is not cut off in the process, otherwise default positon\r\n     */\r\n    if (rightWillSlice && !leftWillSlice) {\r\n      if (menuStyleRight !== idealRightPosition) {\r\n        setMenuStyleRight(idealRightPosition);\r\n      }\r\n    } else if (menuStyleRight) {\r\n      setMenuStyleRight(0);\r\n    }\r\n\r\n    if (menuPlacementTop.current) {\r\n      if (menuStyleBottom !== inputHeight) {\r\n        setMenuStyleBottom(inputHeight);\r\n      }\r\n    } else if (menuStyleBottom) {\r\n      setMenuStyleBottom(0);\r\n    }\r\n\r\n    // temporary fix to react-select issue not setting focus to selected value by default\r\n    if (focusedOptionRef.current) {\r\n      focusedOptionRef.current.parentNode.scrollTop =\r\n        focusedOptionRef.current.offsetTop -\r\n        menuRef.current.clientHeight / 2 +\r\n        focusedOptionRef.current.clientHeight / 2;\r\n    }\r\n  }, [\r\n    focusedOptionRef,\r\n    labelRef,\r\n    menuRef,\r\n    menuPlacementTop,\r\n    menuStyleBottom,\r\n    menuStyleRight,\r\n    textFieldDOMRect,\r\n  ]);\r\n\r\n  return (\r\n    <Grow\r\n      in={menuIsOpenTransition}\r\n      timeout={timeout}\r\n      style={{ transformOrigin: '0 0 0' }}\r\n    >\r\n      <Fade in={menuIsOpenTransition} timeout={timeout}>\r\n        <Paper\r\n          ref={menuRef}\r\n          style={menuStyle}\r\n          className={classes.menu}\r\n          {...innerProps}\r\n        >\r\n          {children}\r\n        </Paper>\r\n      </Fade>\r\n    </Grow>\r\n  );\r\n}\r\n\r\nfunction MenuList(props) {\r\n  const {\r\n    children,\r\n    selectProps: { labelRef, menuPlacementTop, textFieldDOMRect },\r\n  } = props;\r\n  let maxHeight;\r\n  const maxHeightLimit =\r\n    document.documentElement.clientHeight - theme.spacing(2);\r\n\r\n  // calculates appropriate max height depending on top or bottom menu placement\r\n  if (menuPlacementTop.current) {\r\n    maxHeight =\r\n      textFieldDOMRect.top - labelRef.current.clientHeight - theme.spacing(2);\r\n  } else {\r\n    maxHeight =\r\n      document.documentElement.clientHeight -\r\n      textFieldDOMRect.bottom -\r\n      theme.spacing(2);\r\n  }\r\n  if (maxHeight > maxHeightLimit) maxHeight = maxHeightLimit;\r\n\r\n  return (\r\n    <components.MenuList {...props} maxHeight={maxHeight}>\r\n      {children}\r\n    </components.MenuList>\r\n  );\r\n}\r\n\r\nfunction optionRef(optionProps) {\r\n  const {\r\n    innerRef,\r\n    isSelected,\r\n    selectProps: { focusedOptionRef },\r\n  } = optionProps;\r\n\r\n  return element => {\r\n    if (isSelected) focusedOptionRef.current = element;\r\n    if (innerRef) innerRef(element);\r\n  };\r\n}\r\n\r\nfunction Option(props) {\r\n  const {\r\n    children,\r\n    innerProps,\r\n    isFocused,\r\n    isSelected,\r\n    data: {\r\n      label,\r\n      value: { icon },\r\n    },\r\n    selectProps: { handleItemMouseOver, handleItemMouseOut },\r\n  } = props;\r\n  const focusedStyle = {};\r\n\r\n  if (isFocused) {\r\n    handleItemMouseOver(icon, label);\r\n    if (!isSelected) focusedStyle.backgroundColor = theme.palette.action.hover;\r\n  } else {\r\n    handleItemMouseOut(icon);\r\n  }\r\n\r\n  return (\r\n    <MenuItem\r\n      ref={optionRef(props)}\r\n      selected={isSelected}\r\n      style={focusedStyle}\r\n      {...innerProps}\r\n    >\r\n      {children}\r\n    </MenuItem>\r\n  );\r\n}\r\n\r\nfunction handleMenuOpen(\r\n  menuTransition,\r\n  setMenuIsOpenTransition,\r\n  setMenuIsOpen,\r\n  onOpen,\r\n) {\r\n  const allowTransition = menuTransition;\r\n\r\n  return () => {\r\n    allowTransition.current = true;\r\n    setMenuIsOpenTransition(true);\r\n    setMenuIsOpen(true);\r\n    onOpen();\r\n  };\r\n}\r\n\r\nfunction handleMenuClose(\r\n  menuTransition,\r\n  setMenuIsOpenTransition,\r\n  setMenuIsOpen,\r\n  onClose,\r\n) {\r\n  const allowTransition = menuTransition;\r\n\r\n  return () => {\r\n    allowTransition.current = true;\r\n    document.activeElement.blur();\r\n    setMenuIsOpenTransition(false);\r\n    setTimeout(() => setMenuIsOpen(false), transitionDuration);\r\n    onClose();\r\n  };\r\n}\r\n\r\nfunction filterValue(stopId) {\r\n  return option => option.value.stopId === stopId;\r\n}\r\n\r\nconst reposition = {};\r\n/**\r\n * updates textfield location on scroll/resize\r\n * re-renders menu if open which updates menu placement and max height\r\n */\r\nfunction handleReposition(\r\n  eventType,\r\n  inputId,\r\n  menuTransition,\r\n  setTextFieldDOMRect,\r\n  textRef,\r\n) {\r\n  reposition[`${inputId}${eventType}`] = () => {\r\n    clearTimeout(window[`${inputId}Timeout`]);\r\n    window[`${inputId}Timeout`] = setTimeout(\r\n      () => {\r\n        menuTransition.current = false;\r\n        setTextFieldDOMRect(textRef.current.getBoundingClientRect());\r\n      },\r\n      eventType === 'scroll' ? scrollHandlerDelay : 0,\r\n    );\r\n  };\r\n\r\n  return reposition[`${inputId}${eventType}`];\r\n}\r\n\r\nexport default function ReactSelect(props) {\r\n  const classes = useStyles();\r\n  const labelRef = useRef();\r\n  const menuRef = useRef();\r\n  const selectRef = useRef();\r\n  const textRef = useRef();\r\n  const focusedOptionRef = useRef();\r\n  const [menuIsOpen, setMenuIsOpen] = useState(false);\r\n  // similar to menuIsOpen, but triggers transition immediately while actual menu close is on timeout\r\n  const [menuIsOpenTransition, setMenuIsOpenTransition] = useState(false);\r\n  const menuPlacementTop = useRef(false);\r\n  // determines whether transitionDuration is used. Set to false on resize/scroll\r\n  const menuTransition = useRef(true);\r\n  // contains position and dimensions of textfield\r\n  const [textFieldDOMRect, setTextFieldDOMRect] = useState({});\r\n  const [inputMinWidth, setInputMinWidth] = useState(0);\r\n  const replacedComponents = {\r\n    Control,\r\n    ValueContainer,\r\n    Input,\r\n    Placeholder,\r\n    SingleValue,\r\n    IndicatorSeparator: null,\r\n    DropdownIndicator,\r\n    Menu,\r\n    MenuList,\r\n    Option,\r\n  };\r\n\r\n  useEffect(() => {\r\n    const inputEl = document.getElementById(props.inputId);\r\n    window.addEventListener(\r\n      'scroll',\r\n      handleReposition(\r\n        'Scroll',\r\n        props.inputId,\r\n        menuTransition,\r\n        setTextFieldDOMRect,\r\n        textRef,\r\n      ),\r\n    );\r\n    window.addEventListener(\r\n      'resize',\r\n      handleReposition(\r\n        'Resize',\r\n        props.inputId,\r\n        menuTransition,\r\n        setTextFieldDOMRect,\r\n        textRef,\r\n      ),\r\n    );\r\n    inputEl.addEventListener(\r\n      'focus',\r\n      handleReposition(\r\n        'Focus',\r\n        props.inputId,\r\n        menuTransition,\r\n        setTextFieldDOMRect,\r\n        textRef,\r\n      ),\r\n    );\r\n\r\n    return () => {\r\n      window.removeEventListener(\r\n        'scroll',\r\n        reposition[`${props.inputId}Scroll`],\r\n      );\r\n      window.removeEventListener(\r\n        'resize',\r\n        reposition[`${props.inputId}Resize`],\r\n      );\r\n      inputEl.removeEventListener('focus', reposition[`${props.inputId}Focus`]);\r\n    };\r\n  }, [props.inputId, setTextFieldDOMRect]);\r\n\r\n  return (\r\n    <Select\r\n      // react-select/react props\r\n      components={replacedComponents}\r\n      menuIsOpen={menuIsOpen}\r\n      onMenuOpen={handleMenuOpen(\r\n        menuTransition,\r\n        setMenuIsOpenTransition,\r\n        setMenuIsOpen,\r\n        props.onOpen,\r\n      )}\r\n      onMenuClose={handleMenuClose(\r\n        menuTransition,\r\n        setMenuIsOpenTransition,\r\n        setMenuIsOpen,\r\n        props.onClose,\r\n      )}\r\n      placeholder=\"Type here to search...\"\r\n      ref={selectRef}\r\n      styles={selectStyles}\r\n      value={props.options.filter(filterValue(props.stopId))}\r\n      {...props}\r\n      // other props accessed via selectProps object of child props\r\n      focusedOptionRef={focusedOptionRef}\r\n      labelRef={labelRef}\r\n      menuRef={menuRef}\r\n      selectRef={selectRef}\r\n      textRef={textRef}\r\n      classes={classes}\r\n      inputMinWidth={inputMinWidth}\r\n      menuIsOpenTransition={menuIsOpenTransition}\r\n      menuPlacementTop={menuPlacementTop}\r\n      menuTransition={menuTransition}\r\n      setInputMinWidth={setInputMinWidth}\r\n      setMenuIsOpen={setMenuIsOpen}\r\n      setTextFieldDOMRect={setTextFieldDOMRect}\r\n      textFieldDOMRect={textFieldDOMRect}\r\n    />\r\n  );\r\n}\r\n","/* eslint-disable react/prop-types */\r\nimport React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\n// import PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport StartStopIcon from '@material-ui/icons/DirectionsTransit';\r\nimport EndStopIcon from '@material-ui/icons/Flag';\r\nimport { getDownstreamStopIds } from '../helpers/mapGeometry';\r\nimport ReactSelect from './ReactSelect';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n    maxWidth: '100%',\r\n  },\r\n}));\r\n\r\nfunction ControlPanel(props) {\r\n  const { routes, graphParams } = props;\r\n  let secondStopList = [];\r\n  const [allowHover, setAllowHover] = useState(false);\r\n\r\n  /**\r\n   * Sets the direction\r\n   */\r\n  function setDirectionId(event) {\r\n    const directionId = event.target.value;\r\n\r\n    props.dispatch({\r\n      type: 'ROUTESCREEN',\r\n      payload: {\r\n        routeId: graphParams.routeId,\r\n        directionId,\r\n      },\r\n      query: props.query,\r\n    });\r\n  }\r\n\r\n  function getSelectedRouteInfo() {\r\n    const routeId = props.graphParams.routeId;\r\n    return routes ? routes.find(route => route.id === routeId) : null;\r\n  }\r\n\r\n  const selectedRoute = getSelectedRouteInfo();\r\n\r\n  function onSelectFirstStop(option) {\r\n    const startStopId = option.value.stopId;\r\n\r\n    props.dispatch({\r\n      type: 'ROUTESCREEN',\r\n      payload: {\r\n        ...graphParams,\r\n        startStopId,\r\n      },\r\n      query: props.query,\r\n    });\r\n  }\r\n\r\n  function onSelectSecondStop(option) {\r\n    const endStopId = option.value.stopId;\r\n\r\n    props.dispatch({\r\n      type: 'ROUTESCREEN',\r\n      payload: {\r\n        ...graphParams,\r\n        endStopId,\r\n      },\r\n      query: props.query,\r\n    });\r\n    // handleGraphParams called via thunk in ../routesMap.js when path changes, no need to call again\r\n  }\r\n\r\n  function setRouteId(event) {\r\n    const routeId = event.target.value;\r\n\r\n    const mySelectedRoute = props.routes\r\n      ? props.routes.find(route => route.id === routeId)\r\n      : null;\r\n\r\n    if (!mySelectedRoute) {\r\n      return;\r\n    }\r\n\r\n    const directionId =\r\n      mySelectedRoute.directions.length > 0\r\n        ? mySelectedRoute.directions[0].id\r\n        : null;\r\n\r\n    props.dispatch({\r\n      type: 'ROUTESCREEN',\r\n      payload: {\r\n        routeId,\r\n        directionId,\r\n      },\r\n      query: props.query,\r\n    });\r\n  }\r\n  /**\r\n   * Handle mouseover event on Select TO & From dropdown list item.\r\n   */\r\n  function handleItemMouseOver(node, title) {\r\n    if (node && allowHover) {\r\n      node.classList.add('on-hover');\r\n      node.style.setProperty('--stop-name', `\"${title}\"`);\r\n    }\r\n  }\r\n  /**\r\n   * Handle mouseout event on Select TO & From dropdown list item.\r\n   */\r\n  function handleItemMouseOut(node) {\r\n    if (node) {\r\n      node.classList.remove('on-hover');\r\n    }\r\n  }\r\n  /**\r\n   * Handle Select component close\r\n   */\r\n  function handleSelectClose() {\r\n    setAllowHover(false);\r\n    const nodeList = document.querySelectorAll('.on-hover');\r\n    nodeList.forEach(node => node.classList.remove('on-hover'));\r\n  }\r\n\r\n  let selectedDirection = null;\r\n  if (selectedRoute && selectedRoute.directions && graphParams.directionId) {\r\n    selectedDirection = selectedRoute.directions.find(\r\n      dir => dir.id === graphParams.directionId,\r\n    );\r\n  }\r\n\r\n  if (selectedDirection) {\r\n    secondStopList = getDownstreamStopIds(\r\n      selectedRoute,\r\n      selectedDirection,\r\n      graphParams.startStopId,\r\n    );\r\n  }\r\n\r\n  const classes = useStyles();\r\n\r\n  const directionStops = selectedDirection ? selectedDirection.stops : [];\r\n\r\n  return (\r\n    <div className=\"ControlPanel\">\r\n      <Grid container>\r\n        <Grid item xs>\r\n          <FormControl className={classes.formControl}>\r\n            <InputLabel htmlFor=\"route\">Route</InputLabel>\r\n            <Select\r\n              value={graphParams.routeId || 0}\r\n              onChange={setRouteId}\r\n              input={<Input name=\"route\" id=\"route\" />}\r\n            >\r\n              {(routes || []).map(route => (\r\n                <MenuItem key={route.id} value={route.id}>\r\n                  {route.title}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        {selectedRoute ? (\r\n          <Grid item xs>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel htmlFor=\"direction\">Direction</InputLabel>\r\n              <Select\r\n                value={graphParams.directionId || ''}\r\n                onChange={setDirectionId}\r\n                input={<Input name=\"direction\" id=\"direction\" />}\r\n              >\r\n                {(selectedRoute.directions || []).map(direction => (\r\n                  <MenuItem key={direction.id} value={direction.id}>\r\n                    {direction.title}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n        ) : null}\r\n        {selectedDirection ? (\r\n          <Grid container>\r\n            <Grid item xs>\r\n              <Box ml={1}>\r\n                <StartStopIcon fontSize=\"small\" color=\"primary\" />\r\n                <FormControl className={classes.formControl}>\r\n                  <ReactSelect\r\n                    onChange={onSelectFirstStop}\r\n                    inputId=\"fromstop\"\r\n                    textFieldProps={{\r\n                      label: 'From Stop',\r\n                      InputLabelProps: {\r\n                        htmlFor: 'fromstop',\r\n                        shrink: true,\r\n                      },\r\n                    }}\r\n                    options={directionStops.map(firstStopId => ({\r\n                      value: {\r\n                        stopId: firstStopId,\r\n                        icon: document.querySelector(`.id${firstStopId}`),\r\n                      },\r\n                      label: (\r\n                        selectedRoute.stops[firstStopId] || {\r\n                          title: firstStopId,\r\n                        }\r\n                      ).title,\r\n                    }))}\r\n                    stopId={graphParams.startStopId}\r\n                    onOpen={() => setAllowHover(true)}\r\n                    onClose={handleSelectClose}\r\n                    handleItemMouseOver={handleItemMouseOver}\r\n                    handleItemMouseOut={handleItemMouseOut}\r\n                  />\r\n                </FormControl>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Box ml={1}>\r\n                <EndStopIcon fontSize=\"small\" color=\"primary\" />\r\n                <FormControl className={classes.formControl}>\r\n                  <ReactSelect\r\n                    onChange={onSelectSecondStop}\r\n                    inputId=\"tostop\"\r\n                    textFieldProps={{\r\n                      label: 'To Stop',\r\n                      InputLabelProps: {\r\n                        htmlFor: 'tostop',\r\n                        shrink: true,\r\n                      },\r\n                    }}\r\n                    options={(secondStopList || []).map(secondStopId => ({\r\n                      value: {\r\n                        stopId: secondStopId,\r\n                        icon: document.querySelector(`.id${secondStopId}`),\r\n                      },\r\n                      label: (\r\n                        selectedRoute.stops[secondStopId] || {\r\n                          title: secondStopId,\r\n                        }\r\n                      ).title,\r\n                    }))}\r\n                    stopId={graphParams.endStopId}\r\n                    onOpen={() => setAllowHover(true)}\r\n                    onClose={handleSelectClose}\r\n                    handleItemMouseOver={handleItemMouseOver}\r\n                    handleItemMouseOut={handleItemMouseOut}\r\n                  />\r\n                </FormControl>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        ) : null}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\n// for this entire component, now using graphParams values in Redux instead of local state.\r\nconst mapStateToProps = state => ({\r\n  graphParams: state.graphParams,\r\n  query: state.location.query,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    dispatch,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(ControlPanel);\r\n","import React, { Fragment, useState } from 'react';\r\n\r\nimport {\r\n  XYPlot,\r\n  HorizontalGridLines,\r\n  VerticalGridLines,\r\n  XAxis,\r\n  YAxis,\r\n  LineMarkSeries,\r\n  ChartLabel,\r\n  Crosshair,\r\n} from 'react-vis';\r\nimport DiscreteColorLegend from 'react-vis/dist/legends/discrete-color-legend';\r\nimport '../../node_modules/react-vis/dist/style.css';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { metersToMiles } from '../helpers/routeCalculations';\r\n\r\n/**\r\n * Returns an array of {x: stop index, y: time} objects for\r\n * plotting on a chart.\r\n */\r\nexport function getTripDataSeries(routeMetrics, route, directionId) {\r\n  const dirMetrics = routeMetrics\r\n    ? routeMetrics.interval.directions.find(\r\n        dm => dm.directionId === directionId,\r\n      )\r\n    : null;\r\n\r\n  let firstStopId = null;\r\n  const segmentsMap = {};\r\n  if (dirMetrics) {\r\n    dirMetrics.cumulativeSegments.forEach(function(segment) {\r\n      segmentsMap[segment.toStopId] = segment;\r\n      firstStopId = segment.fromStopId;\r\n    });\r\n  }\r\n\r\n  const dataSeries = [];\r\n\r\n  const directionInfo = route\r\n    ? route.directions.find(direction => direction.id === directionId)\r\n    : null;\r\n  if (directionInfo) {\r\n    const firstStopGeometry = directionInfo.stop_geometry[firstStopId];\r\n    const firstStopDistance = firstStopGeometry\r\n      ? firstStopGeometry.distance\r\n      : 0;\r\n\r\n    directionInfo.stops.forEach((stop, index) => {\r\n      const stopGeometry = directionInfo.stop_geometry[stop];\r\n      const title = route.stops[stop].title;\r\n      const segment = segmentsMap[stop];\r\n      if (stop === firstStopId) {\r\n        dataSeries.push({\r\n          x: 0,\r\n          y: 0,\r\n          title,\r\n          stopIndex: index,\r\n        });\r\n      } else if (segment && segment.medianTripTime != null && stopGeometry) {\r\n        // Drop trip data points with no data.\r\n        dataSeries.push({\r\n          x: metersToMiles(stopGeometry.distance - firstStopDistance),\r\n          y: segment.medianTripTime,\r\n          title,\r\n          stopIndex: index,\r\n          numTrips: segment.trips,\r\n        });\r\n      }\r\n    });\r\n\r\n    if (directionInfo.loop && firstStopId) {\r\n      const segment = segmentsMap[firstStopId];\r\n      if (segment && segment.medianTripTime != null) {\r\n        dataSeries.push({\r\n          x: metersToMiles(directionInfo.distance),\r\n          y: segment.medianTripTime,\r\n          title: route.stops[firstStopId].title,\r\n          stopIndex: directionInfo.stops.length,\r\n          numTrips: segment.trips,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return dataSeries;\r\n}\r\n\r\n/**\r\n * Renders an \"nyc bus stats\" style summary of a route and direction.\r\n *\r\n * @param {any} props\r\n */\r\nfunction TravelTimeChart(props) {\r\n  const [crosshairValues, setCrosshairValues] = useState([]);\r\n  const { graphParams, routeMetrics, routes } = props;\r\n\r\n  /**\r\n   * Event handler for onMouseLeave.\r\n   * @private\r\n   */\r\n  const onMouseLeave = () => {\r\n    setCrosshairValues([]);\r\n  };\r\n\r\n  /**\r\n   * Event handler for onNearestX.\r\n   * @param {Object} value Selected value.\r\n   * @param {index} index Index of the value in the data array.\r\n   * @private\r\n   */\r\n  const onNearestTripX = value => {\r\n    // , { index })\r\n    setCrosshairValues([value /* future:  how to add scheduleData[index] ? */]);\r\n  };\r\n\r\n  let tripData = [];\r\n  let tripTimeForDirection = null;\r\n  let distanceForDirection = null;\r\n  let numStops = null;\r\n  let numTrips = null;\r\n\r\n  const { routeId, directionId } = graphParams;\r\n\r\n  if (routes && routeId) {\r\n    const route = routes.find(thisRoute => thisRoute.id === routeId);\r\n\r\n    tripData = getTripDataSeries(routeMetrics, route, directionId);\r\n\r\n    numStops = tripData.length;\r\n    tripTimeForDirection = numStops > 0 ? tripData[numStops - 1].y : null;\r\n    distanceForDirection = numStops > 0 ? tripData[numStops - 1].x : null;\r\n    numTrips = numStops > 0 ? tripData[numStops - 1].numTrips : null;\r\n  }\r\n\r\n  const legendItems = [\r\n    // { title: 'Scheduled', color: \"#a4a6a9\", strokeWidth: 10 },\r\n    { title: 'Actual', color: '#aa82c5', strokeWidth: 10 },\r\n  ];\r\n\r\n  return directionId ? (\r\n    <Fragment>\r\n      <Typography variant=\"h5\">Travel time along route</Typography>\r\n      Median travel time:{' '}\r\n      {tripTimeForDirection > 0 ? tripTimeForDirection.toFixed(1) : '?'} min\r\n      &nbsp;&nbsp; Average speed:{' '}\r\n      {tripTimeForDirection > 0\r\n        ? ((60 * distanceForDirection) / tripTimeForDirection).toFixed(1)\r\n        : '?'}{' '}\r\n      mph\r\n      <br />\r\n      {/* set the y domain to start at zero and end at highest value (which is not always\r\n         the end to end travel time due to spikes in the data) */}\r\n      <XYPlot\r\n        height={300}\r\n        width={400}\r\n        xDomain={[\r\n          0,\r\n          tripData.reduce((max, coord) => (coord.x > max ? coord.x : max), 0),\r\n        ]}\r\n        yDomain={[\r\n          0,\r\n          tripData.reduce((max, coord) => (coord.y > max ? coord.y : max), 0),\r\n        ]}\r\n        onMouseLeave={onMouseLeave}\r\n      >\r\n        <HorizontalGridLines />\r\n        <VerticalGridLines />\r\n        <XAxis tickPadding={4} />\r\n        <YAxis hideLine tickPadding={4} />\r\n\r\n        <LineMarkSeries\r\n          data={tripData}\r\n          stroke=\"#aa82c5\"\r\n          color=\"aa82c5\"\r\n          style={{\r\n            strokeWidth: '3px',\r\n          }}\r\n          size=\"1\"\r\n          onNearestX={onNearestTripX}\r\n        />\r\n        {/* <LineSeries data={ scheduleData }\r\n              stroke=\"#a4a6a9\"\r\n              strokeWidth=\"4\"\r\n              style={{\r\n                strokeDasharray: '2 2'\r\n              }}\r\n            /> */}\r\n\r\n        <ChartLabel\r\n          text=\"Minutes\"\r\n          className=\"alt-y-label\"\r\n          includeMargin\r\n          xPercent={0.02}\r\n          yPercent={0.2}\r\n          style={{\r\n            transform: 'rotate(-90)',\r\n            textAnchor: 'end',\r\n          }}\r\n        />\r\n\r\n        <ChartLabel\r\n          text=\"Distance Along Route (miles)\"\r\n          className=\"alt-x-label\"\r\n          includeMargin\r\n          xPercent={0.7}\r\n          yPercent={0.86}\r\n          style={{\r\n            textAnchor: 'end',\r\n          }}\r\n        />\r\n\r\n        {crosshairValues.length > 0 && (\r\n          <Crosshair\r\n            values={crosshairValues}\r\n            style={{ line: { background: 'none' } }}\r\n          >\r\n            <div className=\"rv-crosshair__inner__content\">\r\n              <p>{Math.round(crosshairValues[0].y)} min</p>\r\n              {/* <p>Scheduled: { Math.round(crosshairValues[1].y)} min</p> */}\r\n              <p>{crosshairValues[0].title}</p>\r\n              <p>(Stop #{crosshairValues[0].stopIndex + 1})</p>\r\n            </div>\r\n          </Crosshair>\r\n        )}\r\n      </XYPlot>\r\n      <DiscreteColorLegend\r\n        orientation=\"horizontal\"\r\n        width={300}\r\n        items={legendItems}\r\n      />\r\n      Distance:{' '}\r\n      {distanceForDirection != null ? distanceForDirection.toFixed(1) : '?'} mi\r\n      &nbsp;&nbsp; Stops: {numStops > 0 ? numStops : '?'} &nbsp;&nbsp; Completed\r\n      trips: {numTrips != null ? numTrips : '0'}\r\n    </Fragment>\r\n  ) : (\r\n    <Fragment>Select a direction to see the travel time chart.</Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  routes: state.routes.data,\r\n  routeMetrics: state.routeMetrics.data,\r\n  graphParams: state.graphParams,\r\n});\r\n\r\nexport default connect(mapStateToProps)(TravelTimeChart);\r\n","/* eslint no-unused-vars: [\"warn\", { \"varsIgnorePattern\": \"MomentTZ\" }] */\r\n\r\n/* Note: Importing MomentTZ adds new methods to Moment.  MomentTZ is not meant to be used directly. */\r\n\r\nimport React, { Fragment, useState, useEffect } from 'react';\r\n\r\nimport {\r\n  XYPlot,\r\n  HorizontalGridLines,\r\n  VerticalGridLines,\r\n  XAxis,\r\n  YAxis,\r\n  LineMarkSeries,\r\n  ChartLabel,\r\n  Hint,\r\n  Borders,\r\n} from 'react-vis';\r\nimport '../../node_modules/react-vis/dist/style.css';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Radio, FormControl, FormControlLabel } from '@material-ui/core';\r\n\r\nimport Moment from 'moment';\r\nimport MomentTZ from 'moment-timezone/builds/moment-timezone-with-data-10-year-range'; // this augments Moment\r\n\r\nimport * as d3 from 'd3';\r\nimport { fetchArrivals } from '../actions';\r\nimport { getAgency } from '../config';\r\nimport { DWELL_THRESHOLD_SECS } from '../UIConstants';\r\n\r\nimport { metersToMiles } from '../helpers/routeCalculations';\r\n\r\n/**\r\n * Within state.arrivals.data, the data is organized as follows:\r\n *\r\n * Top level dictionary with version, agency, route_id, start_time/end_time timestamps\r\n * Stops dictionary by stop id -> arrivals -> direction id (usually just one) -> array of data points\r\n * Each data point is time in (t), time of exit (e), vehicle id (v), trip id (i), distance (d)\r\n *\r\n * Ideally, each trip (and vehicle) would already be its own data series.  For now, we can rebucket\r\n * the data on the client side.  Goal is to create the following structure:\r\n *\r\n * Dictionary of objects keyed by trip id\r\n *   - tripId\r\n *   - vehicleId (for coloring)\r\n *   - series: array of objects (eventually sorted by distance along route) containing:\r\n *     - stopId: the stop ID for this arrival (also can add any other desired stop metadata like title)\r\n *     - x: distance along route (currently x-axis value, could be flipped)\r\n *     - y: arrival times in hours since midnight (currently the y-axis value, could be flipped)\r\n *\r\n * Note: In our travel time chart, x axis is distance along route, y axis is time taken, so this is\r\n * consistent.\r\n *\r\n * TODO: Respects stop picker? (but then how do you see it?)\r\n *\r\n * @param {Object} props\r\n */\r\nfunction MareyChart(props) {\r\n  const INBOUND_AND_OUTBOUND = 'Inbound_and_outbound';\r\n  const INBOUND = '1'; // same as directionInfo id\r\n  const OUTBOUND = '0'; // same as directionInfo id\r\n\r\n  const { graphParams, arrivals, arrivalsErr, routes, hidden } = props;\r\n  const myFetchArrivals = props.fetchArrivals;\r\n\r\n  const [hintValue, setHintValue] = useState();\r\n  const [tripHighlight, setTripHighlight] = useState();\r\n  const [processedArrivals, setProcessedArrivals] = useState(); // where the tripData gets stored\r\n  const [selectedOption, setSelectedOption] = useState(INBOUND_AND_OUTBOUND);\r\n\r\n  const agency = getAgency(graphParams.agencyId);\r\n  const timezoneId = agency ? agency.timezoneId : 'UTC';\r\n\r\n  const mareyChartSupported = graphParams.date === graphParams.startDate;\r\n\r\n  // Request missing arrival data lazily, only when this chart is tabbed into view.\r\n  // This makes the app more responsive to route and date changes if we are hidden.\r\n\r\n  useEffect(() => {\r\n    if (!arrivals && graphParams.routeId && !hidden && mareyChartSupported) {\r\n      myFetchArrivals(graphParams);\r\n    }\r\n  }, [graphParams, myFetchArrivals, arrivals, hidden, mareyChartSupported]);\r\n\r\n  // When both the raw arrival history and route configs have loaded, first\r\n  // rebucket the data by trip ID.  Then create react-vis Series objects for\r\n  // each bucket, and store the Series in the state to trigger the final render.\r\n\r\n  useEffect(() => {\r\n    /**\r\n     * Helper method to take a single arrival and add it to the right per-trip bucket\r\n     * (creating it if needed).\r\n     *\r\n     * We also convert the stop ID to a distance along the route, and convert the\r\n     * arrival timestamp to hours since 3am.\r\n     *\r\n     * @param {Object} tripData\r\n     * @param {Object} arrival\r\n     * @param {String} stopId\r\n     * @param {Object} directionInfo\r\n     * @param {Number} startTime\r\n     * @param {Number} startHourOfDay Offset to add for arrival in fractional hours (time of day)\r\n     */\r\n    const addArrival = (\r\n      tripData,\r\n      arrival,\r\n      stopId,\r\n      route,\r\n      directionInfo,\r\n      startTime,\r\n      startHourOfDay,\r\n    ) => {\r\n      const myTripData = tripData;\r\n      const tripId = arrival.i;\r\n      const vehicleId = arrival.v;\r\n      if (myTripData.byTripId[tripId] === undefined) {\r\n        myTripData.byTripId[tripId] = {\r\n          tripId,\r\n          vehicleId,\r\n          series: [],\r\n          directionInfo,\r\n        };\r\n      }\r\n\r\n      if (directionInfo && directionInfo.stop_geometry[stopId]) {\r\n        let distance = directionInfo.stop_geometry[stopId].distance;\r\n\r\n        // This is a little clunky -- for all outbound routes, we restate the distance\r\n        // as distance in the inbound direction by subtracting the stop's distance from\r\n        // the length of the outbound direction.  This does not line up exactly with the\r\n        // inbound direction length.\r\n\r\n        if (directionInfo.id === '0') {\r\n          distance = directionInfo.distance - distance;\r\n        }\r\n        distance = metersToMiles(distance);\r\n\r\n        const arrivalMoment = Moment.unix(arrival.t).tz(timezoneId);\r\n        const yValue = (arrival.t - startTime) / 60 / 60 + startHourOfDay; // time of arrival in fractional hours\r\n\r\n        myTripData.byTripId[tripId].series.push({\r\n          stopId,\r\n          title: route.stops[stopId].title,\r\n          arrivalTimeString: arrivalMoment.format('h:mm a'),\r\n          vehicleId,\r\n          x: distance,\r\n          y: yValue,\r\n        });\r\n\r\n        if (\r\n          myTripData.earliestArrivalTime === null ||\r\n          yValue < myTripData.earliestArrivalTime\r\n        ) {\r\n          myTripData.earliestArrivalTime = yValue;\r\n        }\r\n\r\n        if (\r\n          myTripData.latestArrivalTime === null ||\r\n          yValue > myTripData.latestArrivalTime\r\n        ) {\r\n          myTripData.latestArrivalTime = yValue;\r\n        }\r\n\r\n        // If the exit time arrival.e is more than a certain amount of time, add a data point\r\n        // so we can see the vehicle's exit in the data series.\r\n\r\n        if (arrival.e - arrival.t > DWELL_THRESHOLD_SECS) {\r\n          const exitMoment = Moment.unix(arrival.e).tz(timezoneId);\r\n          const exitYValue = (arrival.e - startTime) / 60 / 60 + startHourOfDay; // time of arrival in fractional hours\r\n\r\n          myTripData.byTripId[tripId].series.push({\r\n            stopId,\r\n            title: route.stops[stopId].title,\r\n            arrivalTimeString: exitMoment.format('h:mm a'),\r\n            vehicleId,\r\n            x: distance,\r\n            y: exitYValue,\r\n          });\r\n        }\r\n      }\r\n    };\r\n\r\n    /**\r\n     * This method is called when we get arrival data via Redux.  The method traverses the arrival\r\n     * history (by stop, then by direction, then the contained array).\r\n     *\r\n     * Each arrival is bucketed by trip ID.\r\n     *\r\n     * @param {any} myArrivals\r\n     * @param {any} myRoutes\r\n     */\r\n    const processArrivals = (myArrivals, myRoutes) => {\r\n      const tripData = {\r\n        byTripId: {}, // The dictionary by trip ID where arrivals are bucketed.\r\n        earliestArrivalTime: null, // time in fractional hours\r\n        latestArrivalTime: null, // time in fractional hours\r\n      };\r\n\r\n      const stops = myArrivals.stops;\r\n      const startTime = myArrivals.start_time;\r\n      const startHourOfDay = Moment.unix(startTime)\r\n        .tz(timezoneId)\r\n        .hour();\r\n\r\n      const routeId = myArrivals.route_id;\r\n      const route = myRoutes.find(myRoute => myRoute.id === routeId);\r\n\r\n      const allArrivals = [];\r\n\r\n      Object.keys(stops).forEach(stopId => {\r\n        const stopsByDirection = stops[stopId].arrivals;\r\n        Object.keys(stopsByDirection).forEach(directionId => {\r\n          stopsByDirection[directionId].forEach(arrival => {\r\n            allArrivals.push({ stopId, directionId, ...arrival });\r\n          });\r\n        });\r\n      });\r\n\r\n      allArrivals.sort((a, b) => {\r\n        return a.t - b.t;\r\n      });\r\n\r\n      const directionInfos = {};\r\n      route.directions.forEach(direction => {\r\n        directionInfos[direction.id] = direction;\r\n      });\r\n\r\n      allArrivals.forEach(arrival => {\r\n        addArrival(\r\n          tripData,\r\n          arrival,\r\n          arrival.stopId,\r\n          route,\r\n          directionInfos[arrival.directionId],\r\n          startTime,\r\n          startHourOfDay,\r\n        );\r\n      });\r\n\r\n      return tripData;\r\n    };\r\n\r\n    if (arrivals && routes) {\r\n      // console.log(\"Processing arrival data.\");\r\n      const tripData = processArrivals(arrivals, routes);\r\n      setProcessedArrivals(tripData);\r\n    } else {\r\n      setProcessedArrivals(null);\r\n    }\r\n  }, [arrivals, routes, timezoneId]);\r\n\r\n  if (!mareyChartSupported) {\r\n    return (\r\n      <div>The Marey chart is only available when viewing a single date.</div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This is a render-time helper function.\r\n   *\r\n   * Generates per trip react-vis Series objects from the reorganized tripData.\r\n   * We sort each bucket by \"y\" value (then by distance) to get plots pointed in the correct order.\r\n   *\r\n   * Series are colored by vehicle ID modulo 9 (the last digit of the vehicle ID tends to\r\n   * repeat, so using 9 instead of 10).\r\n   *\r\n   * @param {object} tripData\r\n   * @return {Array} Series objects for plotting\r\n   */\r\n  const createSeries = tripData => {\r\n    const routeColor = d3.scaleQuantize([0, 9], d3.schemeCategory10);\r\n\r\n    const tripSeriesArray = [];\r\n    Object.keys(tripData.byTripId).forEach(tripDataKey => {\r\n      const trip = tripData.byTripId[tripDataKey];\r\n\r\n      if (\r\n        selectedOption === INBOUND_AND_OUTBOUND ||\r\n        (trip.directionInfo && trip.directionInfo.id === selectedOption)\r\n      ) {\r\n        const dataSeries = trip.series;\r\n\r\n        tripSeriesArray.push(\r\n          <LineMarkSeries\r\n            key={tripDataKey}\r\n            data={dataSeries}\r\n            stroke={routeColor(trip.vehicleId % 9)}\r\n            style={{\r\n              strokeWidth: tripHighlight === tripDataKey ? '3px' : '1px', // draw a thicker line for the series being moused over\r\n            }}\r\n            size=\"1\"\r\n            onValueMouseOver={\r\n              value =>\r\n                setHintValue(\r\n                  value,\r\n                ) /* onNearestXY seems buggy, so next best is onValue */\r\n            }\r\n            onSeriesMouseOver={() => {\r\n              setTripHighlight(tripDataKey);\r\n            }}\r\n          />,\r\n        );\r\n      }\r\n    });\r\n    return tripSeriesArray;\r\n  };\r\n\r\n  let series = null;\r\n  let startHour = 0; // arbitrary value when no data and no time range\r\n  let endHour = 12; // arbitrary value when no data and no time range\r\n\r\n  // if we have data, generate the series and initial domain of hours\r\n  if (processedArrivals) {\r\n    series = createSeries(processedArrivals);\r\n    startHour = Math.floor(processedArrivals.earliestArrivalTime);\r\n    endHour = Math.ceil(processedArrivals.latestArrivalTime);\r\n  }\r\n\r\n  // if there's a time range, that takes priority over the automatic domain\r\n  if (graphParams.startTime) {\r\n    startHour = parseInt(graphParams.startTime, 10);\r\n  }\r\n\r\n  if (graphParams.endTime) {\r\n    endHour = parseInt(graphParams.endTime, 10);\r\n    if (graphParams.endTime.endsWith('+1')) {\r\n      endHour += 24;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Formats fractional hours into time of day.\r\n   *\r\n   * @param {any} v Time of day as fractional hours\r\n   */\r\n  const hourFormatter = v => {\r\n    let suffix = '';\r\n    let hour = v;\r\n    if (hour >= 24) {\r\n      hour -= 24;\r\n      suffix = '+1';\r\n    }\r\n\r\n    let amPm = 'am';\r\n\r\n    if (hour >= 12) {\r\n      amPm = 'pm';\r\n    }\r\n\r\n    if (hour >= 13) {\r\n      hour -= 12;\r\n    }\r\n\r\n    if (hour === 0) {\r\n      hour = 12;\r\n    }\r\n    const time = `${parseInt(hour, 10)}:${((hour - parseInt(hour, 10)) * 60)\r\n      .toString()\r\n      .padStart(2, '0')}`;\r\n    return `${time} ${amPm}${suffix}`;\r\n  };\r\n\r\n  return processedArrivals ? (\r\n    <Fragment>\r\n      <Typography variant=\"h5\">Marey chart</Typography>\r\n      Vehicle runs: {series.length} <br />\r\n      <FormControl>\r\n        <div className=\"controls\">\r\n          <FormControlLabel\r\n            control={\r\n              <Radio\r\n                id=\"inbound_and_outbound\"\r\n                type=\"radio\"\r\n                value={INBOUND_AND_OUTBOUND}\r\n                checked={selectedOption === INBOUND_AND_OUTBOUND}\r\n                onChange={changeEvent =>\r\n                  setSelectedOption(changeEvent.target.value)\r\n                }\r\n              />\r\n            }\r\n            label=\"Inbound and Outbound\"\r\n          />\r\n\r\n          <FormControlLabel\r\n            control={\r\n              <Radio\r\n                id=\"inbound\"\r\n                type=\"radio\"\r\n                value={INBOUND}\r\n                checked={selectedOption === INBOUND}\r\n                onChange={changeEvent =>\r\n                  setSelectedOption(changeEvent.target.value)\r\n                }\r\n              />\r\n            }\r\n            label=\"Inbound only\"\r\n          />\r\n\r\n          <FormControlLabel\r\n            control={\r\n              <Radio\r\n                id=\"outbound\"\r\n                type=\"radio\"\r\n                value={OUTBOUND}\r\n                checked={selectedOption === OUTBOUND}\r\n                onChange={changeEvent =>\r\n                  setSelectedOption(changeEvent.target.value)\r\n                }\r\n              />\r\n            }\r\n            label=\"Outbound only\"\r\n          />\r\n        </div>\r\n      </FormControl>\r\n      <XYPlot\r\n        height={(endHour - startHour) * 100}\r\n        width={600}\r\n        yDomain={\r\n          [\r\n            endHour,\r\n            startHour,\r\n          ] /* 3am the next day at the bottom, 3am for this day at the top */\r\n        }\r\n        margin={{ left: 80 }}\r\n      >\r\n        {series}\r\n        <Borders\r\n          style={{\r\n            bottom: { fill: '#fff' },\r\n            left: { fill: '#fff' },\r\n            right: { fill: '#fff' },\r\n            top: { fill: '#fff' },\r\n          }}\r\n        />\r\n\r\n        <HorizontalGridLines />\r\n        <VerticalGridLines />\r\n        <XAxis tickPadding={4} />\r\n        <YAxis hideLine tickPadding={4} tickFormat={hourFormatter} />\r\n\r\n        <ChartLabel\r\n          text=\"Time\"\r\n          className=\"alt-y-label\"\r\n          includeMargin\r\n          xPercent={0.02}\r\n          yPercent={0.3}\r\n          style={{\r\n            transform: 'rotate(-90)',\r\n          }}\r\n        />\r\n\r\n        <ChartLabel\r\n          text=\"Inbound Distance Along Route (miles)\"\r\n          className=\"alt-x-label\"\r\n          includeMargin\r\n          xPercent={0.7}\r\n          yPercent={1.0 - 85.0 / ((endHour - startHour) * 100.0)}\r\n          style={{\r\n            textAnchor: 'end',\r\n          }}\r\n        />\r\n        {hintValue ? (\r\n          <Hint\r\n            value={hintValue}\r\n            format={myHintValue => [\r\n              { title: 'Stop', value: myHintValue.title },\r\n              { title: 'Time', value: myHintValue.arrivalTimeString },\r\n              { title: 'Vehicle ID', value: myHintValue.vehicleId },\r\n            ]}\r\n          />\r\n        ) : null}\r\n      </XYPlot>\r\n    </Fragment>\r\n  ) : (\r\n    <Fragment>{arrivalsErr || 'Loading...'}</Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  routes: state.routes.data,\r\n  graphParams: state.graphParams,\r\n  arrivals: state.arrivals.data,\r\n  arrivalsErr: state.arrivals.error,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchArrivals: params => dispatch(fetchArrivals(params)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(MareyChart);\r\n","import React, { Fragment } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport {\r\n  AppBar,\r\n  Box,\r\n  Tab,\r\n  Tabs,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n} from '@material-ui/core';\r\n\r\nimport InfoScoreCard from './InfoScoreCard';\r\nimport InfoScoreLegend from './InfoScoreLegend';\r\nimport TravelTimeChart from './TravelTimeChart';\r\nimport MareyChart from './MareyChart';\r\nimport { HighestPossibleScore } from '../helpers/routeCalculations';\r\n\r\n/**\r\n * Renders an \"nyc bus stats\" style summary of a route and direction.\r\n *\r\n * @param {any} props\r\n */\r\nfunction RouteSummary(props) {\r\n  const { graphParams, statsByRouteId } = props;\r\n  const [tabValue, setTabValue] = React.useState(0);\r\n\r\n  const { routeId, directionId } = graphParams;\r\n  const routeStats = statsByRouteId[routeId] || { directions: [] };\r\n\r\n  let stats = null;\r\n  if (directionId) {\r\n    stats =\r\n      routeStats.directions.find(\r\n        dirStats => dirStats.directionId === directionId,\r\n      ) || {};\r\n  } else {\r\n    stats = routeStats;\r\n  }\r\n\r\n  const popoverContentTotalScore =\r\n    stats.totalScore != null ? (\r\n      <Fragment>\r\n        Route score of {stats.totalScore} is the average of the following\r\n        subscores:\r\n        <Box pt={2}>\r\n          <Table>\r\n            <TableBody>\r\n              <TableRow>\r\n                <TableCell>Median wait</TableCell>\r\n                <TableCell align=\"right\">{stats.medianWaitScore}</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>On-Time rate</TableCell>\r\n                <TableCell align=\"right\">{stats.onTimeRateScore}</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>Average speed</TableCell>\r\n                <TableCell align=\"right\"> {stats.speedScore}</TableCell>\r\n              </TableRow>\r\n              <TableRow>\r\n                <TableCell>Travel time variability</TableCell>\r\n                <TableCell align=\"right\">\r\n                  {' '}\r\n                  {stats.travelVarianceScore}\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n        </Box>\r\n      </Fragment>\r\n    ) : null;\r\n\r\n  const popoverContentWait =\r\n    stats.medianWaitTime != null ? (\r\n      <Fragment>\r\n        Median wait of {stats.medianWaitTime.toFixed(1)} min gets a score of{' '}\r\n        {stats.medianWaitScore}.\r\n        <Box pt={2}>\r\n          <InfoScoreLegend\r\n            rows={[\r\n              { label: '5 min or less', value: 100 },\r\n              { label: '6.25 min', value: 75 },\r\n              { label: '7.5 min', value: 50 },\r\n              { label: '8.75', value: 25 },\r\n              { label: '10 min or more', value: 0 },\r\n            ]}\r\n          />\r\n        </Box>\r\n      </Fragment>\r\n    ) : null;\r\n\r\n  const popoverContentOnTimeRate =\r\n    stats.onTimeRate != null ? (\r\n      <Fragment>\r\n        The on-time percentage is the percentage of scheduled departure times\r\n        where a vehicle departed less than 5 minutes after the scheduled\r\n        departure time or less than 1 minute before the scheduled departure\r\n        time. The on-time percentage for the entire route is the median of the\r\n        on-time percentage for each stop along the route. Probability of{' '}\r\n        {(stats.onTimeRate * 100).toFixed(1) /* be more precise than card */}%\r\n        gets a score of {stats.onTimeRateScore}.\r\n      </Fragment>\r\n    ) : null;\r\n\r\n  const popoverContentSpeed =\r\n    stats.averageSpeed != null ? (\r\n      <Fragment>\r\n        This is the average of the speeds for median end to end trips, in all\r\n        directions. Average speed of {stats.averageSpeed.toFixed(1)} mph gets a\r\n        score of {stats.speedScore}.\r\n        <Box pt={2}>\r\n          <InfoScoreLegend\r\n            rows={[\r\n              { label: '10 mph or more', value: 100 },\r\n              { label: '8.75 mph', value: 75 },\r\n              { label: '7.5 mph', value: 50 },\r\n              { label: '6.25 mph', value: 25 },\r\n              { label: '5 mph or less', value: 0 },\r\n            ]}\r\n          />\r\n        </Box>\r\n      </Fragment>\r\n    ) : null;\r\n\r\n  const popoverContentTravelVariability =\r\n    stats.travelTimeVariability != null ? (\r\n      <Fragment>\r\n        Travel time variability is difference between the 90th percentile end to\r\n        end travel time and the 10th percentile travel time. This measures how\r\n        much extra travel time is needed for some trips. Variability of\r\n        {' \\u00b1'}\r\n        {(stats.travelTimeVariability / 2).toFixed(1)} min gets a score of{' '}\r\n        {stats.travelVarianceScore}.\r\n        <Box pt={2}>\r\n          <InfoScoreLegend\r\n            rows={[\r\n              { label: '5 min or less', value: 100 },\r\n              { label: '6.25 min', value: 75 },\r\n              { label: '7.5 min', value: 50 },\r\n              { label: '8.75 min', value: 25 },\r\n              { label: '10 min or more', value: 0 },\r\n            ]}\r\n          />\r\n        </Box>\r\n      </Fragment>\r\n    ) : null;\r\n\r\n  function handleTabChange(event, newValue) {\r\n    setTabValue(newValue);\r\n  }\r\n\r\n  function a11yProps(index) {\r\n    return {\r\n      id: `simple-tab-${index}`,\r\n      'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n  }\r\n\r\n  const SUMMARY = 0;\r\n  const TRAVEL_TIME = 1;\r\n  const MAREY_CHART = 2;\r\n\r\n  return (\r\n    <Fragment>\r\n      <br />\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs\r\n          value={tabValue}\r\n          onChange={handleTabChange}\r\n          aria-label=\"tab bar\"\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"on\"\r\n        >\r\n          <Tab\r\n            style={{ minWidth: 72 }}\r\n            label=\"Summary\"\r\n            {...a11yProps(SUMMARY)}\r\n          />\r\n          <Tab\r\n            style={{ minWidth: 72 }}\r\n            label=\"Travel Time\"\r\n            {...a11yProps(TRAVEL_TIME)}\r\n          />\r\n          <Tab\r\n            style={{ minWidth: 72 }}\r\n            label=\"Marey Chart\"\r\n            {...a11yProps(MAREY_CHART)}\r\n          />\r\n        </Tabs>\r\n      </AppBar>\r\n\r\n      <Box p={2} hidden={tabValue !== SUMMARY}>\r\n        <div style={{ padding: 8 }}>\r\n          <Grid container spacing={4}>\r\n            <InfoScoreCard\r\n              score={stats.totalScore}\r\n              hideRating\r\n              title=\"Route Score\"\r\n              largeValue={stats.totalScore != null ? stats.totalScore : '--'}\r\n              smallValue={`/${HighestPossibleScore}`}\r\n              bottomContent={\r\n                stats.scoreRank != null\r\n                  ? `#${stats.scoreRank} of ${stats.scoreRankCount} routes`\r\n                  : ''\r\n              }\r\n              popoverContent={popoverContentTotalScore}\r\n            />\r\n            <InfoScoreCard\r\n              score={stats.medianWaitScore}\r\n              title=\"Median Wait\"\r\n              largeValue={\r\n                stats.medianWaitTime != null\r\n                  ? stats.medianWaitTime.toFixed(0)\r\n                  : '--'\r\n              }\r\n              smallValue=\"&nbsp;min\"\r\n              bottomContent={\r\n                <Fragment>\r\n                  {stats.waitRank != null\r\n                    ? `#${stats.waitRank} of ${stats.waitRankCount} routes`\r\n                    : null}\r\n                </Fragment>\r\n              }\r\n              popoverContent={popoverContentWait}\r\n            />\r\n\r\n            <InfoScoreCard\r\n              score={stats.onTimeRateScore}\r\n              title=\"On-Time %\"\r\n              largeValue={\r\n                stats.onTimeRate != null\r\n                  ? (stats.onTimeRate * 100).toFixed(0)\r\n                  : '--'\r\n              }\r\n              smallValue=\"%\"\r\n              popoverContent={popoverContentOnTimeRate}\r\n              bottomContent={\r\n                stats.onTimeRank != null\r\n                  ? `#${stats.onTimeRank} of ${stats.onTimeRankCount} routes`\r\n                  : ''\r\n              }\r\n            />\r\n\r\n            <InfoScoreCard\r\n              score={stats.speedScore}\r\n              title=\"Average Speed\"\r\n              largeValue={\r\n                stats.averageSpeed != null\r\n                  ? stats.averageSpeed.toFixed(0)\r\n                  : '--'\r\n              }\r\n              smallValue=\"&nbsp;mph\"\r\n              bottomContent={\r\n                <Fragment>\r\n                  {stats.speedRank != null\r\n                    ? `#${stats.speedRank} of ${stats.speedRankCount} routes`\r\n                    : null}\r\n                </Fragment>\r\n              }\r\n              popoverContent={popoverContentSpeed}\r\n            />\r\n\r\n            <InfoScoreCard\r\n              score={stats.travelVarianceScore}\r\n              title=\"Travel Time Variability\"\r\n              largeValue={\r\n                stats.travelTimeVariability != null\r\n                  ? `\\u00b1${(stats.travelTimeVariability / 2).toFixed(0)}`\r\n                  : '--'\r\n              }\r\n              smallValue=\"&nbsp;min\"\r\n              bottomContent={\r\n                stats.variabilityRank != null\r\n                  ? `#${stats.variabilityRank} of ${stats.variabilityRankCount} routes`\r\n                  : ''\r\n              }\r\n              popoverContent={popoverContentTravelVariability}\r\n            />\r\n          </Grid>\r\n        </div>\r\n      </Box>\r\n      <Box\r\n        p={2}\r\n        hidden={tabValue !== TRAVEL_TIME}\r\n        style={{ overflowX: 'auto' }}\r\n      >\r\n        <TravelTimeChart />\r\n      </Box>\r\n      <Box\r\n        p={2}\r\n        hidden={tabValue !== MAREY_CHART}\r\n        style={{ overflowX: 'auto' }}\r\n      >\r\n        <MareyChart hidden={tabValue !== MAREY_CHART} />\r\n      </Box>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  routes: state.routes.data,\r\n  graphParams: state.graphParams,\r\n  statsByRouteId: state.agencyMetrics.statsByRouteId,\r\n});\r\n\r\nexport default connect(mapStateToProps)(RouteSummary);\r\n","import React, { Fragment, useEffect } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport Link, { NavLink } from 'redux-first-router-link';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { connect } from 'react-redux';\r\nimport AppBarLogo from '../components/AppBarLogo';\r\nimport Info from '../components/Info';\r\nimport MapStops from '../components/MapStops';\r\nimport DateTimePanel from '../components/DateTimePanel';\r\n\r\nimport { getAgency } from '../config';\r\nimport ControlPanel from '../components/ControlPanel';\r\nimport RouteSummary from '../components/RouteSummary';\r\n\r\nimport { fetchRoutes } from '../actions';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  breadCrumbStyling: {\r\n    fontWeight: 'bold',\r\n    textTransform: 'initial',\r\n    display: 'inline',\r\n  },\r\n  darkLinks: {\r\n    color: theme.palette.primary.dark,\r\n  },\r\n  breadCrumbsWrapper: {\r\n    padding: '1%',\r\n    paddingRight: '0',\r\n  },\r\n}));\r\n\r\nfunction RouteScreen(props) {\r\n  const {\r\n    tripMetrics,\r\n    tripMetricsLoading,\r\n    tripMetricsError,\r\n    graphParams,\r\n    routes,\r\n  } = props;\r\n\r\n  const myFetchRoutes = props.fetchRoutes;\r\n  const agencyId = graphParams ? graphParams.agencyId : null;\r\n\r\n  useEffect(() => {\r\n    if (!routes && agencyId) {\r\n      myFetchRoutes({ agencyId });\r\n    }\r\n  }, [agencyId, routes, myFetchRoutes]); // like componentDidMount, this runs only on first render\r\n\r\n  const agency = getAgency(agencyId);\r\n\r\n  const backArrowStyle = { color: '#ffffff' };\r\n\r\n  const breadCrumbs = (paths, classes) => {\r\n    const { breadCrumbStyling, darkLinks } = classes;\r\n\r\n    let link = {\r\n      type: 'ROUTESCREEN',\r\n      query: props.query,\r\n    };\r\n    const params = ['routeId', 'directionId', 'startStopId', 'endStopId'];\r\n    const labels = (param, title) => {\r\n      const specialLabels = {};\r\n      specialLabels.startStopId = 'from ';\r\n      specialLabels.endStopId = 'to ';\r\n      return {\r\n        label: title,\r\n        specialLabel: specialLabels[param] ? specialLabels[param] : null,\r\n      };\r\n    };\r\n    return paths\r\n      .filter(path => {\r\n        // return paths with non null values\r\n        return !!path;\r\n      })\r\n      .map((path, index) => {\r\n        const hasNextValue = paths[index + 1];\r\n        const param = params[index];\r\n        const payload = {};\r\n        payload[param] = path.id;\r\n        const updatedPayload = Object.assign({ ...link.payload }, payload);\r\n        link = Object.assign({ ...link }, { payload: updatedPayload });\r\n        const { label, specialLabel } = labels(param, path.title);\r\n\r\n        // For SEO purposes, make the very first breadcrumb (which is the\r\n        // route name) render as an H1, but be styled like everything else\r\n        // (as a regular, small subtitle).\r\n        // if it's not the first one, render as default HTML tag.\r\n        const renderAsH1 = index === 0 ? 'h1' : null;\r\n\r\n        return hasNextValue ? (\r\n          <Typography\r\n            variant=\"subtitle1\"\r\n            component={renderAsH1}\r\n            key={label}\r\n            className={`${breadCrumbStyling} ${darkLinks}`}\r\n          >\r\n            {' '}\r\n            {specialLabel}{' '}\r\n            <Link to={link} className={`${breadCrumbStyling} ${darkLinks}`}>\r\n              {' '}\r\n              {label}{' '}\r\n            </Link>{' '}\r\n          </Typography>\r\n        ) : (\r\n          <Typography\r\n            variant=\"subtitle1\"\r\n            component={renderAsH1}\r\n            key={label}\r\n            className={breadCrumbStyling}\r\n          >\r\n            {' '}\r\n            {specialLabel} {label}{' '}\r\n          </Typography>\r\n        );\r\n      });\r\n  };\r\n\r\n  const selectedRoute =\r\n    routes && graphParams && graphParams.routeId\r\n      ? routes.find(\r\n          route =>\r\n            route.id === graphParams.routeId && route.agencyId === agencyId,\r\n        )\r\n      : null;\r\n\r\n  const direction =\r\n    selectedRoute && graphParams.directionId\r\n      ? selectedRoute.directions.find(\r\n          myDirection => myDirection.id === graphParams.directionId,\r\n        )\r\n      : null;\r\n  const startStopInfo =\r\n    direction && graphParams.startStopId\r\n      ? selectedRoute.stops[graphParams.startStopId]\r\n      : null;\r\n  const endStopInfo =\r\n    direction && graphParams.endStopId\r\n      ? selectedRoute.stops[graphParams.endStopId]\r\n      : null;\r\n\r\n  const classes = useStyles();\r\n  const { breadCrumbStyling, breadCrumbsWrapper } = classes;\r\n  return (\r\n    <Fragment>\r\n      <AppBar position=\"relative\">\r\n        <Toolbar>\r\n          <NavLink to={{ type: 'DASHBOARD', query: props.query }} exact strict>\r\n            <IconButton aria-label=\"Back to dashboard\" edge=\"start\">\r\n              <ArrowBackIcon style={backArrowStyle} />\r\n            </IconButton>\r\n          </NavLink>\r\n          <AppBarLogo />\r\n          <div className=\"page-title\">{agency ? agency.title : null}</div>\r\n          <div style={{ flexGrow: 1 }} />\r\n          <DateTimePanel dateRangeSupported />\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Paper className={breadCrumbsWrapper}>\r\n        <Breadcrumbs\r\n          separator={\r\n            <NavigateNextIcon\r\n              fontSize=\"default\"\r\n              className={breadCrumbStyling}\r\n            />\r\n          }\r\n        >\r\n          {breadCrumbs(\r\n            [\r\n              selectedRoute,\r\n              direction,\r\n              startStopInfo\r\n                ? Object.assign(\r\n                    { ...startStopInfo },\r\n                    { id: graphParams.startStopId },\r\n                  )\r\n                : null,\r\n              endStopInfo\r\n                ? Object.assign(\r\n                    { ...endStopInfo },\r\n                    { id: graphParams.endStopInfo },\r\n                  )\r\n                : null,\r\n            ],\r\n            classes,\r\n          )}\r\n        </Breadcrumbs>\r\n      </Paper>\r\n      <Grid container spacing={0}>\r\n        <Grid item xs={12} sm={6}>\r\n          <MapStops routes={routes} />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          {/* control panel and map are full width for 640px windows or smaller, else half width */}\r\n          <ControlPanel routes={routes} />\r\n          {tripMetrics ||\r\n          tripMetricsError ||\r\n          tripMetricsLoading /* if we have trip metrics or an error, then show the info component */ ? (\r\n            <Info\r\n              tripMetrics={tripMetrics}\r\n              tripMetricsError={tripMetricsError}\r\n              tripMetricsLoading={tripMetricsLoading}\r\n              graphParams={graphParams}\r\n              routes={routes}\r\n            />\r\n          ) : (\r\n            /* if no graph data, show the info summary component */\r\n            <RouteSummary />\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  tripMetrics: state.tripMetrics.data,\r\n  tripMetricsError: state.tripMetrics.error,\r\n  tripMetricsLoading: state.loading.TRIP_METRICS,\r\n  routes: state.routes.data,\r\n  graphParams: state.graphParams,\r\n  query: state.location.query,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchRoutes: params => dispatch(fetchRoutes(params)),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(RouteScreen);\r\n","import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  XYPlot,\r\n  HorizontalGridLines,\r\n  VerticalGridLines,\r\n  XAxis,\r\n  YAxis,\r\n  ChartLabel,\r\n  CustomSVGSeries,\r\n} from 'react-vis';\r\n\r\n/**\r\n * This is a debugging chart that helps finds routes with anomalous\r\n * overall speeds or waits.  It plots routes by wait on the x-axis (more\r\n * frequent on the right) and speed on the y-axis (faster on top).\r\n *\r\n * @param {any} props\r\n */\r\nfunction QuadrantChart(props) {\r\n  const { statsByRouteId } = props;\r\n\r\n  const quadrantData = [];\r\n\r\n  let maxSpeed = 0;\r\n  let maxWaitTime = 0;\r\n\r\n  Object.keys(statsByRouteId).forEach(function(routeId) {\r\n    const stats = statsByRouteId[routeId];\r\n    if (stats.medianWaitTime != null && stats.averageSpeed != null) {\r\n      maxWaitTime = Math.max(maxWaitTime, stats.medianWaitTime);\r\n      maxSpeed = Math.max(maxSpeed, stats.averageSpeed);\r\n      quadrantData.push({\r\n        x: stats.medianWaitTime,\r\n        y: stats.averageSpeed,\r\n        title: stats.routeId,\r\n      });\r\n    }\r\n  });\r\n\r\n  return (\r\n    <XYPlot\r\n      height={600}\r\n      width={1000}\r\n      xDomain={[maxWaitTime, 0]}\r\n      yDomain={[0, maxSpeed]}\r\n    >\r\n      <HorizontalGridLines />\r\n      <VerticalGridLines />\r\n      <XAxis top={300} style={{ text: { stroke: 'none', fill: '#cccccc' } }} />\r\n      <YAxis left={500} style={{ text: { stroke: 'none', fill: '#cccccc' } }} />\r\n\r\n      <CustomSVGSeries\r\n        className=\"custom-marking\"\r\n        customComponent={row => {\r\n          return (\r\n            <g className=\"inner-inner-component\">\r\n              <circle cx=\"0\" cy=\"0\" r={row.size || 3} fill=\"#aa82c5\" />\r\n              <text x={0} y={0} fontSize=\"75%\" fill=\"#450042\">\r\n                <tspan x=\"5\" y=\"4\">{`${row.title}`}</tspan>\r\n              </text>\r\n            </g>\r\n          );\r\n        }}\r\n        data={quadrantData}\r\n      />\r\n\r\n      <ChartLabel\r\n        text=\"speed (mph)\"\r\n        className=\"alt-y-label\"\r\n        includeMargin={false}\r\n        xPercent={0.54}\r\n        yPercent={0.06}\r\n        style={{\r\n          transform: 'rotate(-90)',\r\n          textAnchor: 'end',\r\n        }}\r\n      />\r\n\r\n      <ChartLabel\r\n        text=\"avg wait (min)\"\r\n        className=\"alt-x-label\"\r\n        includeMargin={false}\r\n        xPercent={0.94}\r\n        yPercent={0.5}\r\n      />\r\n    </XYPlot>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  statsByRouteId: state.agencyMetrics.statsByRouteId,\r\n});\r\n\r\nexport default connect(mapStateToProps)(QuadrantChart);\r\n","import React, { useEffect, Fragment } from 'react';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport AppBar from '@material-ui/core/AppBar';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Agencies } from '../config';\r\nimport AppBarLogo from '../components/AppBarLogo';\r\nimport QuadrantChart from '../components/QuadrantChart';\r\nimport SidebarButton from '../components/SidebarButton';\r\nimport DateTimePanel from '../components/DateTimePanel';\r\n\r\nimport { fetchRoutes, handleGraphParams } from '../actions';\r\n\r\nconst useStyles = makeStyles({\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n});\r\n\r\n/**\r\n * Data diagnostic screen.  Plots a quadrant chart and travel across stops\r\n * for all routes.  Access via /dataDiagnostic.\r\n */\r\nfunction DataDiagnostic(props) {\r\n  const { graphParams, routes } = props;\r\n\r\n  const agency = Agencies[0];\r\n  const myFetchRoutes = props.fetchRoutes;\r\n  const myHandleGraphParams = props.handleGraphParams;\r\n\r\n  useEffect(() => {\r\n    myHandleGraphParams({});\r\n    if (!routes) {\r\n      myFetchRoutes();\r\n    }\r\n  }, [routes, myFetchRoutes, graphParams, myHandleGraphParams]); // like componentDidMount, this runs only on first render\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Fragment>\r\n      <AppBar position=\"relative\">\r\n        <Toolbar>\r\n          <SidebarButton />\r\n          <AppBarLogo />\r\n          <div className={classes.title}>{agency.title}</div>\r\n          <DateTimePanel dateRangeSupported />\r\n        </Toolbar>\r\n      </AppBar>\r\n      Date: {graphParams.firstDateRange.date} Time:{' '}\r\n      {graphParams.firstDateRange.startTime} -{' '}\r\n      {graphParams.firstDateRange.endTime}\r\n      <QuadrantChart />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  routes: state.routes.data,\r\n  graphParams: state.graphParams,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchRoutes: params => dispatch(fetchRoutes(params)),\r\n  handleGraphParams: params => dispatch(handleGraphParams(params)),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(DataDiagnostic);\r\n","/* eslint-disable */\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Map, TileLayer } from 'react-leaflet';\r\nimport L, { DomEvent } from 'leaflet';\r\nimport Control from 'react-leaflet-control';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport AppBarLogo from '../components/AppBarLogo';\r\nimport SidebarButton from '../components/SidebarButton';\r\nimport DateTimePanel from '../components/DateTimePanel';\r\n\r\nimport { fetchRoutes } from '../actions';\r\nimport {\r\n  S3Bucket,\r\n  MetricsBaseURL,\r\n  Agencies,\r\n  PrecomputedStatsVersion,\r\n  RoutesVersion,\r\n} from '../config';\r\nimport { getTripPoints, isInServiceArea } from '../helpers/mapGeometry';\r\n\r\nimport './Isochrone.css';\r\n\r\nconst isochroneMinutes = 5;\r\nconst maxColoredTripMin = 60;\r\nconst WalkMetersPerMinute = 1.0 * 60;\r\n\r\nconst tripMinOptions = {\r\n  5: { color: '#057F79' },\r\n  10: { color: '#02BB0F' },\r\n  15: { color: '#3ae100' },\r\n  20: { color: '#83dd00' },\r\n  25: { color: '#cad900' },\r\n  30: { color: '#d59d00' },\r\n  35: { color: '#d25400' },\r\n  40: { color: '#ce0d00' },\r\n  45: { color: '#c200b6' },\r\n  50: { color: '#8b00bf' },\r\n  55: { color: '#4900bf' },\r\n  60: { color: '#220D3B' },\r\n};\r\n\r\nconst defaultLayerOptions = { color: '#666' };\r\n\r\nconst redIcon = new L.Icon({\r\n  iconUrl: `${process.env.PUBLIC_URL}/marker-icon-2x-red.png`,\r\n  shadowUrl:\r\n    'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\r\n  iconSize: [25, 41],\r\n  iconAnchor: [12, 41],\r\n  popupAnchor: [1, -34],\r\n  shadowSize: [41, 41],\r\n});\r\n\r\nconst computeCache = {};\r\n\r\nfunction getDirectionInfo(directionId, routeInfo) {\r\n  return routeInfo.directions.find(dirInfo => dirInfo.id === directionId);\r\n}\r\n\r\nclass Isochrone extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // for now, only supports 1 agency at a time.\r\n    // todo: support multiple agencies on one map\r\n    const agency = Agencies[0];\r\n    this.agencyId = agency.id;\r\n\r\n    this.initialZoom = agency.initialMapZoom;\r\n    this.initialCenter = agency.initialMapCenter;\r\n    const defaultDisabledRoutes = agency.defaultDisabledRoutes || [];\r\n\r\n    this.state = {\r\n      maxTripMin: 90,\r\n      computedMaxTripMin: null,\r\n      computeId: null,\r\n      computing: false,\r\n      latLng: null,\r\n      endLatLng: null,\r\n      tripInfo: null,\r\n      enabledRoutes: {},\r\n      noData: false,\r\n    };\r\n\r\n    let workerUrl = `${\r\n      process.env.PUBLIC_URL\r\n    }/isochrone-worker.js?v=${Math.random()}`;\r\n    if (MetricsBaseURL) {\r\n      workerUrl += `&base=${encodeURIComponent(MetricsBaseURL)}`;\r\n    }\r\n\r\n    workerUrl += `&s3_bucket=${encodeURIComponent(S3Bucket)}`;\r\n    workerUrl += `&agency_id=${encodeURIComponent(this.agencyId)}`;\r\n    workerUrl += `&routes_version=${encodeURIComponent(RoutesVersion)}`;\r\n    workerUrl += `&precomputed_stats_version=${encodeURIComponent(\r\n      PrecomputedStatsVersion,\r\n    )}`;\r\n\r\n    const isochroneWorker = new Worker(workerUrl);\r\n\r\n    this.isochroneWorker = isochroneWorker;\r\n\r\n    this.layers = [];\r\n    this.isochroneLayers = [];\r\n    this.tripLayers = [];\r\n    this.mapRef = React.createRef();\r\n\r\n    defaultDisabledRoutes.forEach(routeId => {\r\n      this.state.enabledRoutes[routeId] = false;\r\n    });\r\n\r\n    this.handleMapClick = this.handleMapClick.bind(this);\r\n    this.handleToggleRoute = this.handleToggleRoute.bind(this);\r\n    this.handleMaxTripMinChange = this.handleMaxTripMinChange.bind(this);\r\n    this.selectAllRoutesClicked = this.selectAllRoutesClicked.bind(this);\r\n    this.selectNoRoutesClicked = this.selectNoRoutesClicked.bind(this);\r\n    this.resetMapClicked = this.resetMapClicked.bind(this);\r\n    this.onWorkerMessage = this.onWorkerMessage.bind(this);\r\n    this.recomputeIsochrones = this.recomputeIsochrones.bind(this);\r\n    this.maxTripMinChanged = this.maxTripMinChanged.bind(this);\r\n\r\n    isochroneWorker.onmessage = this.onWorkerMessage;\r\n\r\n    this.container = null;\r\n  }\r\n\r\n  // For resolve the scrolling problem\r\n  // https://github.com/trynmaps/metrics-mvp/issues/448\r\n  // Prevent click and scroll from propagation\r\n  refContainer = element => {\r\n    this.container = element;\r\n    if (element) {\r\n      DomEvent.disableClickPropagation(this.container).disableScrollPropagation(\r\n        this.container,\r\n      );\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.props.routes) {\r\n      this.props.fetchRoutes();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (\r\n      this.props.date !== prevProps.date ||\r\n      this.props.startTime !== prevProps.startTime ||\r\n      this.props.endTime !== prevProps.endTime\r\n    ) {\r\n      this.recomputeIsochrones();\r\n    }\r\n  }\r\n\r\n  onWorkerMessage(e) {\r\n    const data = e.data;\r\n    if (data.type === 'reachableLocations') {\r\n      const computeId = data.computeId;\r\n      if (computeCache[computeId]) {\r\n        computeCache[computeId][data.tripMin] = data;\r\n      }\r\n      if (computeId === this.state.computeId) {\r\n        this.addReachableLocationsLayer(data);\r\n      }\r\n      this.setState({ noData: false });\r\n    } else if (data.type === 'error') {\r\n      if (data.error.status >= 400 && data.error.status < 500) {\r\n        // there is no JSON data for this day\r\n        this.setState({ noData: true });\r\n      } else {\r\n        this.showError(data.error.message);\r\n      }\r\n    } else {\r\n      console.log(e.data);\r\n    }\r\n  }\r\n\r\n  showError(message) {\r\n    alert(message);\r\n  }\r\n\r\n  handleMapClick(event) {\r\n    if (this.state.computeId) {\r\n      return;\r\n    }\r\n    this.resetMap();\r\n    this.computeIsochrones(event.latlng, null);\r\n  }\r\n\r\n  addReachableLocationsLayer(data) {\r\n    const tripMin = data.tripMin;\r\n    const reachableCircles = data.circles;\r\n    const geoJson = data.geoJson;\r\n\r\n    if (this.state.computeId !== data.computeId) {\r\n      return;\r\n    }\r\n\r\n    if (this.state.computing && tripMin === this.state.maxTripMin) {\r\n      this.setState({ computing: false });\r\n    }\r\n\r\n    const layerOptions = tripMinOptions[`${tripMin}`] || defaultLayerOptions;\r\n\r\n    const diffLayer = L.geoJson(\r\n      geoJson,\r\n      Object.assign(\r\n        { bubblingMouseEvents: false, fillOpacity: 0.4, stroke: false },\r\n        layerOptions,\r\n      ),\r\n    );\r\n\r\n    const map = this.mapRef.current.leafletElement;\r\n\r\n    diffLayer.addTo(map);\r\n\r\n    diffLayer.on('click', e => {\r\n      const endLatLng = e.latlng;\r\n      this.showTripInfo(endLatLng, reachableCircles);\r\n    });\r\n\r\n    diffLayer.on('dblclick', e => {\r\n      this.resetMap();\r\n      this.computeIsochrones(e.latlng);\r\n    });\r\n\r\n    this.isochroneLayers.push({ tripMin, layer: diffLayer });\r\n\r\n    const curEndLatLng = this.state.endLatLng;\r\n\r\n    // restore end latlng from previous view\r\n    if (curEndLatLng && !this.tripLayers.length) {\r\n      for (const circle of reachableCircles) {\r\n        const dist = map.distance(circle, curEndLatLng);\r\n        if (dist <= circle.radius) {\r\n          this.showTripInfo(curEndLatLng, reachableCircles);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  showTripInfo(endLatLng, reachableCircles) {\r\n    this.setState({ endLatLng });\r\n\r\n    const map = this.mapRef.current.leafletElement;\r\n\r\n    let allOptions = [];\r\n    reachableCircles.forEach(circle => {\r\n      const dist = map.distance(circle, endLatLng);\r\n      if (dist <= circle.radius) {\r\n        const walkMin = dist / WalkMetersPerMinute;\r\n        const tripMin = walkMin + circle.tripMin;\r\n\r\n        allOptions.push({\r\n          tripMin,\r\n          walkMin,\r\n          circle,\r\n        });\r\n      }\r\n    });\r\n\r\n    this.clearTripLayers(false);\r\n\r\n    if (allOptions.length) {\r\n      allOptions = allOptions.sort(function(o1, o2) {\r\n        return o1.tripMin - o2.tripMin;\r\n      });\r\n\r\n      const seenRoutes = {};\r\n      let numOptions = 0;\r\n\r\n      const tripInfo = [];\r\n      for (const option of allOptions) {\r\n        const circle = option.circle;\r\n\r\n        if (seenRoutes[circle.routes]) {\r\n          continue;\r\n        }\r\n\r\n        seenRoutes[circle.routes] = true;\r\n\r\n        if (numOptions < 2 || !circle.tripItems.length) {\r\n          numOptions += 1;\r\n\r\n          for (const tripItem of circle.tripItems) {\r\n            if (tripItem.route) {\r\n              const routeInfo = this.props.routes.find(\r\n                route => route.id === tripItem.route,\r\n              );\r\n\r\n              if (routeInfo) {\r\n                const dirInfo = getDirectionInfo(tripItem.direction, routeInfo);\r\n\r\n                const fromStop = tripItem.fromStop;\r\n                const toStop = tripItem.toStop;\r\n\r\n                const fromStopInfo = routeInfo.stops[fromStop];\r\n                const toStopInfo = routeInfo.stops[toStop];\r\n\r\n                const tripPoints = getTripPoints(\r\n                  routeInfo,\r\n                  dirInfo,\r\n                  fromStop,\r\n                  toStop,\r\n                );\r\n\r\n                if (tripPoints.length) {\r\n                  // draw line segments along the route between fromStop and toStop\r\n                  const polyLine = L.polyline(tripPoints).addTo(map);\r\n                  polyLine.bindTooltip(routeInfo.id, {\r\n                    direction: 'center',\r\n                    opacity: 0.9,\r\n                    permanent: true,\r\n                  });\r\n\r\n                  this.tripLayers.push(polyLine);\r\n\r\n                  // draw small circles at fromStop and toStop\r\n                  this.tripLayers.push(\r\n                    L.circle(fromStopInfo, 40, {\r\n                      color: '#090',\r\n                      fillOpacity: 0.8,\r\n                      stroke: false,\r\n                    }).addTo(map),\r\n                  );\r\n                  this.tripLayers.push(\r\n                    L.circle(toStopInfo, 40, {\r\n                      color: '#900',\r\n                      fillOpacity: 0.8,\r\n                      stroke: false,\r\n                    }).addTo(map),\r\n                  );\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          tripInfo.push(\r\n            <div key={numOptions} className=\"isochrone-trip\">\r\n              <div>\r\n                <strong>\r\n                  {`${option.tripMin.toFixed(1)} min [${circle.routes ||\r\n                    'walk'}]`}\r\n                </strong>\r\n              </div>\r\n              {circle.tripItems.map((item, index) => (\r\n                <div key={index}>\r\n                  <em>{item.t.toFixed(1)} min</em>: {item.desc}\r\n                </div>\r\n              ))}\r\n              {option.walkMin > 0.05 && circle.tripItems.length ? (\r\n                <div>\r\n                  <em>{option.walkMin.toFixed(1)} min</em>: walk to destination\r\n                </div>\r\n              ) : null}\r\n            </div>,\r\n          );\r\n        }\r\n      }\r\n\r\n      const marker = L.marker(endLatLng, { icon: redIcon }).addTo(map);\r\n\r\n      this.tripLayers.push(marker);\r\n\r\n      this.setState({ tripInfo });\r\n    }\r\n  }\r\n\r\n  computeIsochrones(latLng, endLatLng) {\r\n    if (!isInServiceArea(this.agencyId, latLng)) {\r\n      return;\r\n    }\r\n\r\n    const dateStr = this.props.date;\r\n    const startTimeStr = this.props.startTime;\r\n    const endTimeStr = this.props.endTime;\r\n    const timeStr =\r\n      startTimeStr && endTimeStr ? `${startTimeStr}-${endTimeStr}` : '';\r\n\r\n    const { maxTripMin, enabledRoutes } = this.state;\r\n\r\n    const enabledRoutesArr = [];\r\n\r\n    this.props.routes.forEach(route => {\r\n      if (enabledRoutes[route.id] !== false) {\r\n        enabledRoutesArr.push(route.id);\r\n      }\r\n    });\r\n\r\n    const computeId = [\r\n      latLng.lat,\r\n      latLng.lng,\r\n      dateStr,\r\n      timeStr,\r\n      maxTripMin,\r\n      enabledRoutesArr.join(','),\r\n    ].join(',');\r\n\r\n    this.setState({\r\n      latLng,\r\n      endLatLng,\r\n      computedMaxTripMin: maxTripMin,\r\n      computeId,\r\n    });\r\n\r\n    const map = this.mapRef.current.leafletElement;\r\n\r\n    let newLatLng;\r\n    const marker = L.marker(latLng, { draggable: true }).addTo(map);\r\n    marker.on('move', function(e) {\r\n      newLatLng = e.latlng;\r\n    });\r\n    marker.on('moveend', () => {\r\n      // event arg removed\r\n      if (newLatLng) {\r\n        this.resetMap();\r\n        this.computeIsochrones(newLatLng);\r\n      }\r\n    });\r\n    this.layers.push(marker);\r\n\r\n    if (computeCache[computeId] && computeCache[computeId][maxTripMin]) {\r\n      for (\r\n        let tripMin = isochroneMinutes;\r\n        tripMin <= maxTripMin;\r\n        tripMin += isochroneMinutes\r\n      ) {\r\n        const cachedLayer = computeCache[computeId][tripMin];\r\n        if (cachedLayer) {\r\n          this.addReachableLocationsLayer(cachedLayer);\r\n        }\r\n      }\r\n      return;\r\n    }\r\n\r\n    computeCache[computeId] = {};\r\n\r\n    const tripMins = [];\r\n    for (\r\n      let m = isochroneMinutes;\r\n      m <= maxTripMin && m <= maxColoredTripMin;\r\n      m += isochroneMinutes\r\n    ) {\r\n      tripMins.push(m);\r\n    }\r\n    if (maxTripMin > maxColoredTripMin) {\r\n      tripMins.push(maxTripMin);\r\n    }\r\n\r\n    this.setState({\r\n      computing: true,\r\n    });\r\n\r\n    this.isochroneWorker.postMessage({\r\n      action: 'computeIsochrones',\r\n      latlng: latLng,\r\n      routes: enabledRoutesArr,\r\n      dateStr,\r\n      timeStr,\r\n      tripMins,\r\n      computeId,\r\n    });\r\n  }\r\n\r\n  handleMaxTripMinChange(event) {\r\n    this.setState(\r\n      { maxTripMin: parseInt(event.target.value, 10) },\r\n      this.maxTripMinChanged,\r\n    );\r\n  }\r\n\r\n  maxTripMinChanged() {\r\n    const { maxTripMin, computedMaxTripMin } = this.state;\r\n\r\n    if (\r\n      computedMaxTripMin &&\r\n      (maxTripMin > computedMaxTripMin ||\r\n        !this.isochroneLayers.find(iso => iso.tripMin === maxTripMin))\r\n    ) {\r\n      this.recomputeIsochrones();\r\n    } else {\r\n      const map = this.mapRef.current.leafletElement;\r\n\r\n      this.isochroneLayers.forEach(isochroneLayer => {\r\n        if (isochroneLayer.tripMin <= maxTripMin) {\r\n          isochroneLayer.layer.addTo(map);\r\n        } else {\r\n          isochroneLayer.layer.remove();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  handleToggleRoute(event) {\r\n    const routeId = event.target.value;\r\n    const checked = event.target.checked;\r\n\r\n    this.setState(\r\n      { enabledRoutes: { ...this.state.enabledRoutes, [routeId]: checked } },\r\n      this.recomputeIsochrones,\r\n    );\r\n  }\r\n\r\n  selectAllRoutesClicked() {\r\n    // event arg\r\n    this.selectAllRoutes(true);\r\n  }\r\n\r\n  selectNoRoutesClicked() {\r\n    // event arg\r\n    this.selectAllRoutes(false);\r\n  }\r\n\r\n  resetMapClicked() {\r\n    // event arg\r\n    this.resetMap();\r\n  }\r\n\r\n  recomputeIsochrones() {\r\n    const { latLng, endLatLng } = this.state;\r\n    if (latLng) {\r\n      this.resetMap();\r\n      this.computeIsochrones(latLng, endLatLng);\r\n    }\r\n  }\r\n\r\n  resetMap() {\r\n    const map = this.mapRef.current.leafletElement;\r\n\r\n    map.closePopup();\r\n\r\n    this.setState({ computeId: null, latLng: null, endLatLng: null });\r\n\r\n    this.isochroneLayers.forEach(isochroneLayer => {\r\n      isochroneLayer.layer.remove();\r\n    });\r\n\r\n    this.layers.forEach(layer => {\r\n      layer.remove();\r\n    });\r\n\r\n    this.layers = [];\r\n    this.isochroneLayers = [];\r\n    this.clearTripLayers();\r\n  }\r\n\r\n  clearTripLayers(clearTripInfo) {\r\n    this.tripLayers.forEach(layer => {\r\n      layer.remove();\r\n    });\r\n    this.tripLayers = [];\r\n\r\n    if (clearTripInfo !== false) {\r\n      this.setState({ tripInfo: null });\r\n    }\r\n  }\r\n\r\n  selectAllRoutes(enabled) {\r\n    const { routes } = this.props;\r\n    if (!routes) {\r\n      return;\r\n    }\r\n\r\n    const enabledRoutes = {};\r\n    routes.forEach(route => {\r\n      enabledRoutes[route.id] = enabled;\r\n    });\r\n\r\n    this.setState({ enabledRoutes }, this.recomputeIsochrones);\r\n  }\r\n\r\n  makeRouteToggle(route) {\r\n    let enabled = this.state.enabledRoutes[route.id];\r\n    if (enabled == null) {\r\n      enabled = true;\r\n    }\r\n\r\n    return (\r\n      <ListItem key={route.id}>\r\n        <FormControlLabel\r\n          control={\r\n            <Checkbox\r\n              checked={enabled}\r\n              onChange={this.handleToggleRoute}\r\n              value={route.id}\r\n              color=\"primary\"\r\n            />\r\n          }\r\n          label={route.id}\r\n        />\r\n      </ListItem>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { routes } = this.props;\r\n\r\n    const colors = [];\r\n    const times = [];\r\n\r\n    for (\r\n      let endTime = isochroneMinutes;\r\n      endTime <= maxColoredTripMin;\r\n      endTime += isochroneMinutes\r\n    ) {\r\n      colors.push(\r\n        <div\r\n          key={endTime}\r\n          style={{ backgroundColor: tripMinOptions[endTime].color }}\r\n        ></div>,\r\n      );\r\n      times.push(<div key={endTime}>{endTime}</div>);\r\n    }\r\n\r\n    colors.push(\r\n      <div\r\n        key=\"default\"\r\n        style={{ backgroundColor: defaultLayerOptions.color }}\r\n      ></div>,\r\n    );\r\n\r\n    const tripMins = [];\r\n    for (let tripMin = 15; tripMin <= maxColoredTripMin; tripMin += 15) {\r\n      tripMins.push(tripMin);\r\n    }\r\n    tripMins.push(90);\r\n\r\n    return (\r\n      <div className=\"flex-screen\">\r\n        <AppBar position=\"relative\">\r\n          <Toolbar>\r\n            <SidebarButton />\r\n            <AppBarLogo />\r\n            <div className=\"page-title\">Isochrone</div>\r\n            <DateTimePanel />\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Map\r\n          center={this.initialCenter}\r\n          zoom={this.initialZoom}\r\n          className=\"isochrone-map\"\r\n          minZoom={5}\r\n          maxZoom={18}\r\n          onClick={this.handleMapClick}\r\n          ref={this.mapRef}\r\n        >\r\n          <TileLayer\r\n            attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.'\r\n            url=\"https://stamen-tiles.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}.png\"\r\n          />\r\n          {/* see http://maps.stamen.com for details */}\r\n          <Control position=\"topleft\" className=\"\">\r\n            <div ref={this.refContainer}>\r\n              <Grid container className=\"isochrone-controls\" direction=\"column\">\r\n                <Grid item>\r\n                  <Typography variant=\"subtitle1\">Max Trip Time</Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Select\r\n                    value={this.state.maxTripMin}\r\n                    onChange={this.handleMaxTripMinChange}\r\n                  >\r\n                    {tripMins.map(tripMin => (\r\n                      <MenuItem key={tripMin} value={tripMin}>\r\n                        {tripMin} minutes\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid container className=\"isochrone-controls\" direction=\"column\">\r\n                <Grid item>\r\n                  <Typography variant=\"subtitle1\">Routes</Typography>\r\n                </Grid>\r\n                <Grid container item direction=\"row\" alignItems=\"flex-start\">\r\n                  <Grid item>\r\n                    <Button onClick={this.selectAllRoutesClicked}>all</Button>\r\n                    <Button onClick={this.selectNoRoutesClicked}>none</Button>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                  <List className=\"isochrone-routes\">\r\n                    {(routes || []).map(route => this.makeRouteToggle(route))}\r\n                  </List>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n          </Control>\r\n          <Control position=\"topright\">\r\n            {this.state.tripInfo ? (\r\n              <div className=\"isochrone-trip-info\">{this.state.tripInfo}</div>\r\n            ) : (\r\n              <div className=\"isochrone-instructions\">\r\n                {this.state.noData\r\n                  ? 'There is no data for the selected date. Choose another date.'\r\n                  : !this.state.latLng\r\n                  ? 'Click anywhere in the city to see the trip times from' +\r\n                    ' that point to the rest of the city via transit and walking.'\r\n                  : this.state.computing\r\n                  ? 'Computing...'\r\n                  : 'Click anywhere in the shaded area to see routes and trip times between the two points, or drag the blue pin to see trip times from a new point.'}\r\n              </div>\r\n            )}\r\n          </Control>\r\n          <Control position=\"bottomright\">\r\n            <div className=\"isochrone-legend\">\r\n              trip times (minutes)\r\n              <div className=\"isochrone-legend-colors\">{colors}</div>\r\n              <div className=\"isochrone-legend-times\">{times}</div>\r\n            </div>\r\n          </Control>\r\n          <Control position=\"bottomleft\">\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={this.resetMapClicked}\r\n            >\r\n              Clear map\r\n            </Button>\r\n            <br />\r\n            <br />\r\n          </Control>\r\n        </Map>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  routes: state.routes.data,\r\n  date: state.graphParams.firstDateRange.date,\r\n  startTime: state.graphParams.firstDateRange.startTime,\r\n  endTime: state.graphParams.firstDateRange.endTime,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchRoutes: params => dispatch(fetchRoutes(params)),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(Isochrone);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\n\r\nimport './App.css';\r\nimport About from './components/About';\r\nimport Landing from './components/Landing';\r\nimport NotFound from './components/NotFound';\r\nimport Dashboard from './screens/Dashboard';\r\nimport RouteScreen from './screens/RouteScreen';\r\nimport DataDiagnostic from './screens/DataDiagnostic';\r\nimport Isochrone from './screens/Isochrone';\r\n\r\nconst Components = {\r\n  About,\r\n  Isochrone,\r\n  Landing,\r\n  Dashboard,\r\n  RouteScreen,\r\n  DataDiagnostic,\r\n  NotFound,\r\n};\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#0177BF',\r\n    },\r\n    secondary: {\r\n      main: '#D02143',\r\n    },\r\n  },\r\n});\r\nconst App = ({ page }) => {\r\n  const Component = Components[page];\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Component />\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ page }) => ({ page });\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","import React, { Fragment } from 'react';\r\n\r\nexport default function About() {\r\n  return (\r\n    <Fragment>\r\n      <h3>About Us</h3>\r\n    </Fragment>\r\n  );\r\n}\r\n","import React, { Fragment } from 'react';\r\n\r\nexport default function Landing() {\r\n  return (\r\n    <Fragment>\r\n      <h3>Landing Page</h3>\r\n    </Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function NotFound() {\r\n  return <h3>404</h3>;\r\n}\r\n","/* eslint-disable no-underscore-dangle */\r\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\r\nimport { connectRoutes } from 'redux-first-router';\r\nimport qs from 'qs';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport routesMap from './routesMap';\r\nimport * as reducers from './reducers';\r\n// import page from './reducers/page';\r\nimport * as actionCreators from './actions';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n  ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({ actionCreators })\r\n  : compose;\r\n\r\nexport default function configureStore(preloadedState) {\r\n  const { reducer, middleware, enhancer } = connectRoutes(routesMap, {\r\n    querySerializer: qs,\r\n  });\r\n\r\n  const rootReducer = combineReducers({ ...reducers, location: reducer });\r\n  const middlewares = applyMiddleware(thunk, middleware);\r\n  const enhancers = composeEnhancers(enhancer, middlewares);\r\n\r\n  const store = createStore(rootReducer, preloadedState, enhancers);\r\n\r\n  return { store };\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport configureStore from './store';\r\n\r\nconst { store } = configureStore();\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}