{"version":3,"sources":["components/About.jsx","components/Landing.jsx","components/NotFound.jsx","config.js","routeUtil.js","helpers/precomputed.js","helpers/routeCalculations.js","UIConstants.js","actions/index.js","helpers/mapGeometry.js","components/MapShield.jsx","components/MapSpider.jsx","components/RouteTable.jsx","components/SidebarButton.jsx","reducers/routesReducer.js","reducers/loadingReducer.js","components/DateTimePanel.jsx","screens/Dashboard.jsx","helpers/graphData.js","components/InfoIntervalsOfDay.jsx","components/InfoScoreCard.jsx","components/InfoScoreLegend.jsx","components/InfoTripSummary.jsx","components/Info.jsx","components/MapStops.jsx","components/ControlPanel.jsx","components/TravelTimeChart.jsx","components/MareyChart.jsx","components/RouteSummary.jsx","screens/RouteScreen.jsx","components/QuadrantChart.jsx","screens/DataDiagnostic.jsx","screens/Isochrone.jsx","App.jsx","routesMap.js","reducers/fetchGraphReducer.js","reducers/page.js","store.js","index.js"],"names":["About","Landing","NotFound","MetricsBaseURL","process","REACT_APP_METRICS_BASE_URL","config","window","OpentransitConfig","S3Bucket","Agencies","WaitTimesVersion","TripTimesVersion","RoutesVersion","ArrivalsVersion","agenciesMap","getAgency","agencyId","forEach","agency","id","ROUTE","DIRECTION","FROM_STOP","TO_STOP","Path","buildPath","pathParam","path","lastIndexOf","length","substring","pathArray","split","endingPathIndex","indexOf","slice","join","commitPath","push","this","document","location","pathname","getTripTimeStat","tripTimeValues","index","statValues","Object","keys","endStopId","getTimeStrAndDateStr","graphParams","startTime","endTime","date","getTimePath","timeStr","replace","getTripTimesForDirection","tripTimesCache","routeId","directionId","dateStr","tripTimes","routeTripTimes","routes","getAverageOfMedianWaitStat","waitTimesCache","route","stat","directions","reduce","total","direction","waitForDir","waitTimes","routeWaitTimes","directionWaitTimes","getWaitTimeForDirection","median","NaN","filterRoutes","filter","routeHeuristics","ignoreRoute","ignoreFlag","flagName","getTripTimesUsingHeuristics","tripTimesForDir","tripTimesForFirstStop","directionInfo","find","thisRoute","ignoreFirst","ignoreFirstStop","stops","values","accumulator","currentValue","getEndToEndTripTime","ignoreLast","ignoreLastStop","lastStop","statIndex","tripTime","Math","max","metersToMiles","meters","getAllWaits","allWaits","map","wait","longWait","waitObj","Number","isNaN","sort","a","b","getAllSpeeds","allSpeeds","speedAndVariability","speeds","dist","distance","p90tripTime","p10tripTime","speed","parseFloat","variability","sum","sumVariability","getSpeedAndVariabilityForRoute","speedObj","computeGrades","medianWait","longWaitProbability","totalScore","medianWaitScoreScale","d3","domain","rangeRound","clamp","medianWaitGradeScale","range","longWaitScoreScale","speedScoreScale","speedGradeScale","variabilityScoreScale","totalGradeScale","medianWaitScore","medianWaitGrade","longWaitScore","speedScore","speedGrade","travelVarianceScore","round","totalGrade","highestPossibleScore","getAllScores","waits","allScores","grades","quartileBackgroundColor","red","yellow","lightGreen","green","quartileContrastColor","quartileTextColor","milesBetween","p1","p2","degLatStop","degLonStop","degLatBus","degLonBus","x","PI","radLatStop","radLonStop","radLatBus","latDiff","lonDiff","sin","cos","atan2","sqrt","haverDistance","lat","lon","Colors","GRAY","PURPLE","BLUE","RED","GREEN","INDIGO","indigo","CHART_COLORS","PLANNING_PERCENTILE","TENTH_PERCENTILE","REACT_VIS_CROSSHAIR_NO_LINE","line","background","TIME_RANGE_ALL_DAY","TIME_RANGES","value","shortLabel","restOfLabel","MAX_DATE_RANGE","DATE_RANGES","label","WEEKDAYS","WEEKENDS","DWELL_THRESHOLD_SECS","generateRoutesURL","generateTripTimesURL","statPath","timePath","generateWaitTimesURL","generateArrivalsURL","fetchGraphData","params","dates","endMoment","Moment","startMoment","startDate","deltaDays","diff","numberOfDaysBack","abs","i","daysOfTheWeek","day","format","subtract","computeDates","dispatch","query","type","axios","get","variables","JSON","stringify","baseURL","then","response","data","errors","payload","message","catch","err","errStr","error","resetGraphData","fetchRoutes","fetchPrecomputedWaitAndTripData","getState","tripTimesCacheKey","s3Url","waitTimesCacheKey","fetchArrivals","console","resetArrivals","handleSpiderMapClick","latLng","handleGraphParams","startStopId","getTripPoints","routeInfo","dirInfo","fromStop","toStop","fromStopInfo","toStopInfo","fromStopGeometry","stop_geometry","toStopGeometry","tripPoints","after_index","coords","fromStopIndex","toStopIndex","stopInfo","isInServiceArea","point","turf","lng","serviceArea","features","some","feature","MapShield","props","routeText","color","waitScaled","html","r","endsWith","ValidLocationAlert","Snackbar","open","showAlert","MapSpider","routeColor","SpiderOriginMarker","latlng","spiderLatLng","Marker","position","draggable","onMove","e","onMoveEnd","handleLocationFound","generateShield","startMarker","downstreamStops","shieldPosition","routeIndex","icon","L","divIcon","className","key","riseOnHover","onClick","originalEvent","view","DomEvent","stopPropagation","stopId","getStartMarkers","items","spiderSelection","stop","CircleMarker","center","radius","fillColor","fillOpacity","stroke","Tooltip","routeTitle","title","miles","DownstreamLines","polylines","waitRank","findIndex","trunc","isFinite","generatePolyline","generateTerminalCircle","terminalPosition","computedWeight","Polyline","positions","opacity","weight","onMouseOver","target","setStyle","onFocus","onMouseOut","onBlur","handleGeoLocate","preventDefault","mapRef","current","leafletElement","locate","handleMapClick","state","isValidLocation","height","computeHeight","createRef","bind","boundUpdate","updateDimensions","addEventListener","removeEventListener","setState","innerWidth","innerHeight","findStops","addDownstreamStops","onSpiderMapClick","myStop","targetStop","selectedRoute","secondStopInfo","secondStopListIndex","assign","latLon","stopsByRouteAndDir","filteredRoutes","stopList","nearest","findNearestStop","stopHash","zoom","mapClass","width","startMarkers","Map","initialMapCenter","initialMapZoom","style","minZoom","maxZoom","onLocationfound","ref","TileLayer","attribution","url","Button","variant","Component","connect","desc","orderBy","headRows","numeric","disablePadding","EnhancedTableHead","order","onRequestSort","TableHead","TableRow","row","TableCell","align","padding","sortDirection","TableSortLabel","active","property","event","useToolbarStyles","makeStyles","theme","root","paddingLeft","spacing","paddingRight","highlight","palette","secondary","main","backgroundColor","lighten","light","text","primary","dark","spacer","flex","actions","popover","maxWidth","EnhancedTableToolbar","classes","numSelected","useState","anchorEl","setAnchorEl","Toolbar","clsx","Typography","IconButton","size","currentTarget","fontSize","aria-label","Popover","Boolean","onClose","anchorOrigin","vertical","horizontal","transformOrigin","useStyles","marginTop","tableWrapper","overflowX","myFetchPrecomputedWaitAndTripData","React","setOrder","setOrderBy","createMuiTheme","useEffect","spiderRouteIds","spider","myRoute","includes","thisWaitObj","thisSpeedObj","scoreObj","thisScoreObj","Table","aria-labelledby","rowCount","TableBody","array","cmp","sortOrder","reverse","stabilizedThis","el","stableSort","getSorting","labelId","hover","role","tabIndex","component","scope","textDecoration","to","toFixed","SidebarButton","drawerOpen","setDrawer","toggleDrawer","activeStyle","fontWeight","cursor","edge","Drawer","anchor","List","ListItem","exact","strict","bottom","button","href","ListItemIcon","ListItemText","momentYesterday","Date","now","initialState","obj","action","arrivals","arrivalsErr","matches","exec","requestState","requestName","isLoadingRequest","loading","textTransform","display","justifyContent","heading","typography","pxToRem","secondaryHeading","textAlign","column","flexGrow","nowrap","whiteSpace","flexWrap","formControl","leftMargin","rightMargin","minWidth","closeButton","right","top","grey","isLoading","dateRangeSupported","infoAnchorEl","setInfoAnchorEl","maxDate","handleClose","convertDate","ymdString","getUTCMonth","toString","padStart","getUTCDate","getUTCFullYear","timeRange","dateLabel","rangeInfo","timeLabel","handleDayChange","newDaysOfTheWeek","checked","toggleDays","what","newValue","allTrue","allFalse","dictionary","undefined","Box","p","CircularProgress","disableShrink","FormControl","TextField","InputProps","inputProps","min","textField","InputLabelProps","shrink","onChange","myDate","newDate","newMoment","isBefore","Grid","container","item","xs","daysBack","setDateRange","FormLabel","FormGroup","FormControlLabel","control","Checkbox","indeterminate","Divider","marginLeft","InputLabel","htmlFor","Select","myTimeRange","timeRangeParts","input","Input","name","MenuItem","initialParams","myFetchRoutes","myHandleGraphParams","AppBar","sm","getPercentileValue","graphData","percentile","percentiles","bin","InfoIntervalsOfDay","handleOptionChange","changeEvent","selectedOption","onMouseLeave","crosshairValues","onNearestX","_value","waitData","tripData","AVERAGE_TIME","intervalField","interval","y","intervalData","intervalError","intervals","mapInterval","legendItems","strokeWidth","Radio","PLANNING_TIME","xType","stackBy","hideLine","includeMargin","xPercent","yPercent","transform","textAnchor","orientation","InfoScoreCard","gradeName","hideRating","largeValue","smallValue","bottomContent","popoverContent","myGrades","myGradeName","rating","Paper","margin","flexDirection","Rating","readOnly","precision","alignItems","pt","InfoScoreLegend","rows","InfoTripSummary","typicalAnchorEl","setTypicalAnchorEl","planningAnchorEl","setPlanningAnchorEl","myGraphParams","myRoutes","dir","startIndex","endIndex","computeDistance","count","avg","histogram","binStart","travelVariabilityTime","whyNoData","uncolored","planningWait","planningTravel","travelVariability","typicalWait","typicalTravel","popoverContentTotalScore","popoverContentWait","popoverContentLongWait","popoverContentSpeed","popoverContentTravelVariability","verticalAlign","Info","setCrosshairValues","tabValue","setTabValue","graphError","headways","headwayData","x0","binEnd","a11yProps","Tabs","scrollButtons","Tab","hidden","xDomain","headway","fill","tickFormat","v","trip","MapStops","populateStop","IconType","currentPosition","rotation","onClickHandler","tooltip","iconSize","iconAnchor","ReactDOMServer","renderToString","sid","sourceTarget","closeTooltip","angleFromTo","fromPoint","toPoint","delta_x","delta_y","populateStops","routeStops","isStart","isEnd","StartStopIcon","EndStopIcon","stopGeometry","previousPoint","nextPoint","handleStopSelect","populateSpeed","seenStart","seenEnd","getSpeed","speedColor","firstStopId","nextStopId","tripTimesFromStop","directionTripTimes","getTripTimesFromStop","time","getDistanceInMiles","SpeedLegend","speedColorValues","speedColorLabels","speedColorValue","float","newDirectionId","stopSids","onGraphParams","getStopsInfoInGivenDirection","currentStopInfo","mph","populatedRoutes","unshift","mapInstruction","bounds","secondStopList","allowHover","setAllowHover","getSelectedRouteInfo","generateSecondStopList","mySelectedRoute","stopsList","isLoopRoute","oneWaySecondStopsList","concat","handleItemMouseOver","node","classList","add","setProperty","handleItemMouseOut","remove","handleSelectClose","querySelectorAll","selectedDirection","ml","htmlColor","secondStopId","onOpen","querySelector","tripTimeForDirection","dataSeries","stopIndex","getTripDataSeries","coord","yDomain","tickPadding","myFetchArrivals","myResetArrivals","hintValue","setHintValue","tripHighlight","setTripHighlight","processedArrivals","setProcessedArrivals","setSelectedOption","timezoneId","route_id","myArrivals","byTripId","earliestArrivalTime","latestArrivalTime","start_time","startHourOfDay","unix","tz","hour","stopsByDirection","arrival","myTripData","tripId","vehicleId","series","arrivalMoment","t","yValue","arrivalTimeString","exitMoment","exitYValue","addArrival","processArrivals","startHour","endHour","tripSeriesArray","tripDataKey","deltaY","onValueMouseOver","onSeriesMouseOver","createSeries","floor","ceil","parseInt","left","suffix","amPm","myHintValue","waitRanking","speedRanking","scoreRanking","fetchGraph","intervalErr","myDirection","startStopInfo","endStopInfo","quadrantData","myWaitObj","xxyDomain","customComponent","cx","cy","charts","tripMinOptions","5","10","15","20","25","30","35","40","45","50","55","60","defaultLayerOptions","redIcon","Icon","iconUrl","shadowUrl","popupAnchor","shadowSize","computeCache","getDirectionInfo","Isochrone","initialZoom","initialCenter","defaultDisabledRoutes","maxTripMin","computedMaxTripMin","computeId","computing","endLatLng","tripInfo","enabledRoutes","noData","workerUrl","random","encodeURIComponent","isochroneWorker","Worker","layers","isochroneLayers","tripLayers","handleStatChange","handleToggleRoute","handleMaxTripMinChange","selectAllRoutesClicked","selectNoRoutesClicked","resetMapClicked","onWorkerMessage","recomputeIsochrones","maxTripMinChanged","onmessage","prevProps","tripMin","addReachableLocationsLayer","status","showError","log","alert","resetMap","computeIsochrones","reachableCircles","circles","geoJson","layerOptions","diffLayer","bubblingMouseEvents","addTo","on","showTripInfo","layer","curEndLatLng","circle","allOptions","walkMin","clearTripLayers","o1","o2","seenRoutes","numOptions","option","tripItems","tripItem","polyLine","polyline","bindTooltip","permanent","marker","startTimeStr","endTimeStr","enabledRoutesArr","newLatLng","cachedLayer","tripMins","m","postMessage","iso","isochroneLayer","selectAllRoutes","closePopup","clearTripInfo","enabled","colors","times","makeRouteToggle","page","components","Dashboard","Route","DataDiagnostic","ABOUT","LANDING","ISOCHRONE","DASHBOARD","DATADIAGNOSTIC","ROUTESCREEN","thunk","payloadData","routeMetrics","tripMetrics","intervalMetrics","timeRangeMetrics","timeRanges","NOT_FOUND","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","actionCreators","compose","store","preloadedState","connectRoutes","routesMap","reducer","middleware","enhancer","rootReducer","combineReducers","reducers","middlewares","applyMiddleware","enhancers","createStore","configureStore","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.1834fd84.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nexport default function About() {\r\n  return (\r\n    <Fragment>\r\n      <h3>About Us</h3>\r\n    </Fragment>\r\n  );\r\n}\r\n","import React, { Fragment } from 'react';\r\n\r\nexport default function Landing() {\r\n  return (\r\n    <Fragment>\r\n      <h3>Landing Page</h3>\r\n    </Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function NotFound() {\r\n  return <h3>404</h3>;\r\n}\r\n","// When running in dev mode via docker-compose or GitPod\r\n// REACT_APP_METRICS_BASE_URL is set\r\n// to the URL of the metrics API server.\r\n// When REACT_APP_METRICS_BASE_URL is not set, metrics\r\n// will be loaded from the same domain as the React app.\r\n// eslint-disable-next-line import/prefer-default-export\r\nexport const MetricsBaseURL = process.env.REACT_APP_METRICS_BASE_URL;\r\n\r\n// index.html loads script tag from /api/js_config before React scripts, which sets window.OpentransitConfig object\r\nconst config = window.OpentransitConfig;\r\n\r\nexport const S3Bucket = config.S3Bucket;\r\nexport const Agencies = config.Agencies;\r\nexport const WaitTimesVersion = config.WaitTimesVersion;\r\nexport const TripTimesVersion = config.TripTimesVersion;\r\nexport const RoutesVersion = config.RoutesVersion;\r\nexport const ArrivalsVersion = config.ArrivalsVersion;\r\n\r\nconst agenciesMap = {};\r\nAgencies.forEach(agency => {\r\n    agenciesMap[agency.id] = agency;\r\n});\r\n\r\nexport function getAgency(agencyId) {\r\n   return agenciesMap[agencyId];\r\n}\r\n","import { push } from 'redux-first-router';\r\n\r\n// path constants\r\nexport const ROUTE = 'route';\r\nexport const DIRECTION = 'direction';\r\nexport const FROM_STOP = 'fromStop';\r\nexport const TO_STOP = 'toStop';\r\n\r\nexport class Path {\r\n  constructor() {\r\n    this.path = document.location.pathname;\r\n  }\r\n\r\n  buildPath = (pathParam, id) => {\r\n    let { path } = this;\r\n    // account for trailing / if there is one\r\n    if (path.lastIndexOf('/') === path.length - 1) {\r\n      path = path.substring(0, path.length - 1);\r\n    }\r\n\r\n    const pathArray = path.split('/');\r\n    const endingPathIndex = pathArray.indexOf(pathParam);\r\n    // if we don't have the value of the last param yet in the URL, then just append it\r\n    if (endingPathIndex === -1) {\r\n      this.path = `${path}/${pathParam}/${id}`;\r\n      return this;\r\n    }\r\n    // otherwise, we need to cut off the URL and add latest parameter\r\n    pathArray[endingPathIndex + 1] = id;\r\n    this.path = pathArray.slice(0, endingPathIndex + 2).join('/');\r\n    return this;\r\n  };\r\n\r\n  commitPath = () => {\r\n    const { path } = this;\r\n    push(path);\r\n  };\r\n}\r\n","/**\r\n * Pulls a data series from a collection by index.\r\n */\r\nexport function getTripTimeStat(tripTimeValues, index) {\r\n  if (!tripTimeValues) {\r\n    return null;\r\n  }\r\n\r\n  const statValues = {};\r\n\r\n  Object.keys(tripTimeValues).forEach(endStopId => {\r\n    statValues[endStopId] = tripTimeValues[endStopId][index];\r\n  });\r\n\r\n  return statValues;\r\n}\r\n\r\n/**\r\n * Utility method to pull time and date out of graphParams as strings\r\n */\r\nexport function getTimeStrAndDateStr(graphParams) {\r\n  const timeStr = graphParams.startTime\r\n    ? `${graphParams.startTime}-${graphParams.endTime}`\r\n    : '';\r\n  const dateStr = graphParams.date;\r\n  return [timeStr, dateStr];\r\n}\r\n\r\n/**\r\n * Access of precomputed wait and trip times.\r\n *\r\n * See https://github.com/trynmaps/metrics-mvp/pull/143 for an overview of the file structure and\r\n * json structure.\r\n *\r\n * Functions taken from the isochrone branch.\r\n *\r\n * Fetching of the precomputed wait/trip time json is done using Redux.\r\n * getWaitTimeAtStop is commented out but left here for usage reference.\r\n */\r\n\r\n/**\r\n * Maps time range to a file path (used by Redux action).\r\n */\r\n\r\nexport function getTimePath(timeStr) {\r\n  return timeStr\r\n    ? `_${timeStr\r\n        .replace(/:/g, '')\r\n        .replace('-', '_')\r\n        .replace(/\\+/g, '%2B')}`\r\n    : '';\r\n}\r\n\r\n/**\r\n * Gets trip times for a given route and direction.\r\n *\r\n * @param tripTimesCache\r\n * @param graphParams -- date and time values\r\n * @param routeId\r\n * @param directionId\r\n * @param stat\r\n * @returns\r\n */\r\nexport function getTripTimesForDirection(\r\n  tripTimesCache,\r\n  graphParams,\r\n  routeId,\r\n  directionId,\r\n) {\r\n  const [timeStr, dateStr] = getTimeStrAndDateStr(graphParams);\r\n\r\n  if (!tripTimesCache) {\r\n    return null;\r\n  }\r\n\r\n  const agencyId = graphParams.agencyId;\r\n  const tripTimes = tripTimesCache[`${agencyId}-${dateStr + timeStr}-p10-median-p90`]; // 'median'\r\n\r\n  if (!tripTimes) {\r\n    //console.log('no trip times');\r\n    return null;\r\n  }\r\n\r\n  const routeTripTimes = tripTimes.routes[routeId];\r\n  if (!routeTripTimes) {\r\n    //console.log('no trip times for route ' + routeId);\r\n    return null;\r\n  }\r\n\r\n  const directionTripTimes = routeTripTimes[directionId];\r\n  return directionTripTimes;\r\n}\r\n\r\n/**\r\n * Gets the downstream trip times for a given route, direction, and stop.\r\n *\r\n * @param routeId\r\n * @param directionId\r\n * @param startStopId\r\n * @param dateStr  \"2019-07-02\"\r\n * @param timeStr  \"0700-1900\" or empty string (values from time picker)\r\n * @param stat     \"median\"\r\n * @returns\r\n */\r\nexport function getTripTimesFromStop(\r\n  tripTimesCache,\r\n  graphParams,\r\n  routeId,\r\n  directionId,\r\n  startStopId,\r\n  stat = 'median',\r\n) {\r\n  const directionTripTimes = getTripTimesForDirection(\r\n    tripTimesCache,\r\n    graphParams,\r\n    routeId,\r\n    directionId,\r\n  );\r\n  if (!directionTripTimes) {\r\n    // console.log('null trip times');\r\n    return null;\r\n  }\r\n  const tripTimeValues = directionTripTimes[startStopId];\r\n\r\n  if (stat === 'median') {\r\n    // using the median stat group (see getStatPath)\r\n    return getTripTimeStat(tripTimeValues, 1);\r\n    // return tripTimeValues; // p10-median-p90 file blocked:\r\n  }\r\n  if (stat === 'p10') {\r\n    // using the p10-median-p90 stat group (see getStatPath)\r\n    return getTripTimeStat(tripTimeValues, 0);\r\n  }\r\n  if (stat === 'p90') {\r\n    // using the p10-median-p90 stat group (see getStatPath)\r\n    return getTripTimeStat(tripTimeValues, 2);\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * Maps the given stat to a stat group (part of the file path).  Example stat groups are\r\n * \"median\" and \"p10-median-p90\".  When fetching an individual stat, this function returns\r\n * which group should be used, favoring more compact groups over larger ones.\r\n *\r\n * @param stat\r\n */\r\nexport function getStatPath(stat) {\r\n  switch (stat) {\r\n    case 'median':\r\n      return 'median';\r\n    case 'p10':\r\n    case 'p90':\r\n      return 'p10-median-p90';\r\n    default:\r\n      throw new Error(`unknown stat ${stat}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the wait time info for a given route and direction.\r\n *\r\n * @param waitTimesCache\r\n * @param graphParams -- used for date and time values\r\n * @param routeId\r\n * @param directionId\r\n * @param stat\r\n */\r\nexport function getWaitTimeForDirection(\r\n  waitTimesCache,\r\n  graphParams,\r\n  routeId,\r\n  directionId,\r\n) {\r\n  const [timeStr, dateStr] = getTimeStrAndDateStr(graphParams);\r\n\r\n  const agencyId = graphParams.agencyId;\r\n\r\n  const waitTimes = waitTimesCache[`${agencyId}-${dateStr + timeStr}-median-p90-plt20m`];\r\n\r\n  if (!waitTimes) {\r\n    return null;\r\n  }\r\n\r\n  const routeWaitTimes = waitTimes.routes[routeId];\r\n  if (!routeWaitTimes) {\r\n    return null;\r\n  }\r\n\r\n  const directionWaitTimes = routeWaitTimes[directionId];\r\n  if (!directionWaitTimes) {\r\n    return null;\r\n  }\r\n  return directionWaitTimes;\r\n}\r\n\r\n/**\r\n * Averages together the median wait in all directions for a route.\r\n *\r\n * @param {any} waitTimesCache\r\n * @param {any} graphParams\r\n * @param {any} route\r\n */\r\nexport function getAverageOfMedianWaitStat(\r\n  waitTimesCache,\r\n  graphParams,\r\n  route,\r\n  stat = 'median',\r\n) {\r\n  const directions = route.directions;\r\n  const sumOfMedians = directions.reduce((total, direction) => {\r\n    const waitForDir = getWaitTimeForDirection(\r\n      waitTimesCache,\r\n      graphParams,\r\n      route.id,\r\n      direction.id,\r\n    );\r\n    if (!waitForDir || !waitForDir.median) {\r\n      return NaN;\r\n    }\r\n    if (stat === 'plt20m') {\r\n      // statgroup is median-p90-plt20m\r\n      return total + waitForDir.median[2]; // subscript two is median of per-stop probabilities of < 20m wait\r\n    } // default to median\r\n    return total + waitForDir.median[0]; // subscript zero is median of per-stop medians\r\n  }, 0);\r\n  return sumOfMedians / directions.length;\r\n}\r\n","/**\r\n * Helper functions for working with routes and stops.  These are used to filter out\r\n * routes, spurious directions, and idiosyncratic stops when listing and scoring entire routes.\r\n *\r\n * Also includes functions for computing distances between coordinates.\r\n */\r\n\r\nimport * as d3 from 'd3';\r\nimport red from '@material-ui/core/colors/red';\r\nimport yellow from '@material-ui/core/colors/yellow';\r\nimport lightGreen from '@material-ui/core/colors/lightGreen';\r\nimport green from '@material-ui/core/colors/green';\r\nimport {\r\n  getTripTimeStat,\r\n  getTripTimesForDirection,\r\n  getAverageOfMedianWaitStat,\r\n} from './precomputed';\r\n\r\nimport { getAgency } from '../config';\r\n\r\n/**\r\n * Given an array of routes, return only the routes we want to show.\r\n */\r\nexport function filterRoutes(routes) {\r\n  return routes.filter(route => {\r\n    const routeHeuristics = getAgency(route.agencyId).routeHeuristics;\r\n    return !routeHeuristics || !routeHeuristics[route.id] || !routeHeuristics[route.id].ignoreRoute;\r\n  });\r\n}\r\n\r\n/**\r\n * Whether the first stop in a direction's stop list should be disregarded.\r\n * For example, the M outbound lists Embarcadero & Folsom as first stop, but few\r\n * M's actually go to that stop.  For better end to end calculations, need to disregard\r\n * the first stop.\r\n */\r\nfunction ignoreFlag(routeHeuristics, routeId, directionId, flagName) {\r\n  if (!routeHeuristics || !routeHeuristics[routeId]) {\r\n    return false;\r\n  }\r\n  const direction = routeHeuristics[routeId][directionId];\r\n  if (!direction) {\r\n    return false;\r\n  }\r\n  if (direction[flagName]) {\r\n    return direction[flagName];\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction ignoreFirstStop(routeHeuristics, routeId, directionId) {\r\n  return ignoreFlag(routeHeuristics, routeId, directionId, 'ignoreFirstStop');\r\n}\r\n\r\nfunction ignoreLastStop(routeHeuristics, routeId, directionId) {\r\n  return ignoreFlag(routeHeuristics, routeId, directionId, 'ignoreLastStop');\r\n}\r\n\r\n/**\r\n * Get precomputed trip times for the first stop, then apply heuristic rules\r\n * to trim off the first stop or first stops if needed.\r\n */\r\nfunction getTripTimesUsingHeuristics(\r\n  tripTimesCache,\r\n  graphParams,\r\n  routes,\r\n  routeId,\r\n  directionId,\r\n) {\r\n  const tripTimesForDir = getTripTimesForDirection(\r\n    tripTimesCache,\r\n    graphParams,\r\n    routeId,\r\n    directionId,\r\n  );\r\n\r\n  if (!tripTimesForDir || !routes) {\r\n    //console.log(\"No trip times found at all for \" + directionId + \" (gtfs out of sync or route not running)\");\r\n    // not sure if we should remap to normal terminal\r\n    return { tripTimesForFirstStop: null, directionInfo: null };\r\n  }\r\n\r\n  //console.log('trip times for dir: ' + Object.keys(tripTimesForDir).length + ' keys' );\r\n\r\n  // Note that some routes do not run their full length all day like the 5 Fulton, so they\r\n  // don't go to all the stops.  Ideally we should know which stops they do run to.\r\n\r\n  const route = routes.find(thisRoute => thisRoute.id === routeId);\r\n  const directionInfo = route.directions.find(\r\n    direction => direction.id === directionId,\r\n  );\r\n\r\n  const routeHeuristics = getAgency(graphParams.agencyId).routeHeuristics;\r\n\r\n  const ignoreFirst = ignoreFirstStop(routeHeuristics, routeId, directionId); // look up heuristic rule\r\n  let firstStop = null;\r\n\r\n  if (ignoreFirst !== true && ignoreFirst !== false) {\r\n    firstStop = ignoreFirst; // ignore the stops prior the index specified by ignoreFirst\r\n  } else {\r\n    // is a boolean\r\n    firstStop = directionInfo.stops[ignoreFirst ? 1 : 0];\r\n  }\r\n\r\n  let tripTimesForFirstStop = tripTimesForDir[firstStop];\r\n\r\n  // if this stop doesn't have trip times (like the oddball J direction going to the yard, which we currently ignore)\r\n  // then find the stop with the most trip time entries\r\n\r\n  if (!tripTimesForFirstStop || !Object.keys(tripTimesForFirstStop).length) {\r\n    //console.log(\"No trip times found for \" + routeId + \" from stop \" + firstStop + \".  Using stop with most entries.\");\r\n    tripTimesForFirstStop = Object.values(tripTimesForDir).reduce(\r\n      (accumulator, currentValue) =>\r\n        Object.values(currentValue).length > Object.values(accumulator).length\r\n          ? currentValue\r\n          : accumulator,\r\n      {},\r\n    );\r\n  }\r\n\r\n  return { tripTimesForFirstStop, directionInfo };\r\n}\r\n\r\n/**\r\n * Returns trip time across the full route, applying heuristic rules to ignore\r\n * the last stop or stops as needed.\r\n */\r\nexport function getEndToEndTripTime(\r\n  tripTimesCache,\r\n  graphParams,\r\n  routes,\r\n  routeId,\r\n  directionId,\r\n  stat = 'median',\r\n) {\r\n  const { tripTimesForFirstStop, directionInfo } = getTripTimesUsingHeuristics(\r\n    tripTimesCache,\r\n    graphParams,\r\n    routes,\r\n    routeId,\r\n    directionId,\r\n  );\r\n\r\n  if (!tripTimesForFirstStop) {\r\n    // no precomputed times\r\n    // console.log(\"No precomputed trip times for \" + routeId + \" \" + directionId + \" (gtfs out of sync with historic data or route not running)\");\r\n    return '?';\r\n  }\r\n\r\n  const routeHeuristics = getAgency(graphParams.agencyId).routeHeuristics;\r\n\r\n  const ignoreLast = ignoreLastStop(routeHeuristics, routeId, directionId); // look up heuristic rule\r\n\r\n  let lastStop = null;\r\n\r\n  /*\r\n   * For determining end to end trip time, but doesn't currently affect computation of route length,\r\n   * which is based on best guess as to the right GTFS shape. And the shape is not linked to the stops,\r\n   * it's just coordinates and distance along route, so more logic would be needed to \"trim\" the shape\r\n   * if stops are ignored.\r\n   */\r\n  if (ignoreLast !== true && ignoreLast !== false) {\r\n    lastStop = ignoreLast; // ignore stops after index specified by ignoreLast\r\n  } else {\r\n    // is a boolean\r\n    lastStop =\r\n      directionInfo.stops[directionInfo.stops.length - (ignoreLast ? 2 : 1)];\r\n  }\r\n\r\n  // console.log('found ' + Object.keys(tripTimesForFirstStop).length + ' keys' );\r\n\r\n  let statIndex = 1; // default to median (p10-median-p90)\r\n  if (stat === 'p90') {\r\n    statIndex = 2;\r\n  } else if (stat === 'p10') {\r\n    statIndex = 0;\r\n  }\r\n\r\n  let tripTime = null;\r\n  if (tripTimesForFirstStop[lastStop]) {\r\n    tripTime = tripTimesForFirstStop[lastStop][statIndex];\r\n  }\r\n\r\n  // if there is no trip time to the last stop, then use the highest trip time actually observed\r\n\r\n  if (!tripTime) {\r\n    tripTime = Math.max(\r\n      ...Object.values(getTripTimeStat(tripTimesForFirstStop, statIndex)),\r\n    );\r\n    // console.log(\"No trip time found for \" + routeId + \" \" + directionId + \" to stop \" + lastStop + '. max observed: ' + tripTime);\r\n  }\r\n\r\n  // console.log('trip time in minutes is ' + tripTime);\r\n  return tripTime;\r\n}\r\n\r\n/**\r\n *\r\n * @param meters\r\n * @returns Conversion from meters to miles.\r\n */\r\nexport function metersToMiles(meters) {\r\n  return meters / 1609.344;\r\n}\r\n\r\n/**\r\n * Returns an array of {x: stop index, y: time} objects for\r\n * plotting on a chart.\r\n */\r\nexport function getTripDataSeries(props, routeId, directionId) {\r\n  const { tripTimesForFirstStop, directionInfo } = getTripTimesUsingHeuristics(\r\n    props.tripTimesCache,\r\n    props.graphParams,\r\n    props.routes,\r\n    routeId,\r\n    directionId,\r\n  );\r\n\r\n  if (!tripTimesForFirstStop) {\r\n    //console.log('no trip times for first stop ' + routeId + ' ' + directionId);\r\n    return [];\r\n  } // no precomputed times\r\n\r\n  const route = props.routes.find(thisRoute => thisRoute.id === routeId);\r\n\r\n  const dataSeries = [];\r\n\r\n  // Omit the first stop since trip time is always zero.\r\n  //\r\n  // Drop trip data points with no data.\r\n\r\n  directionInfo.stops.slice(1).map((stop, index) => {\r\n    if (!directionInfo.stop_geometry[stop]) {\r\n      //console.log('no geometry for ' + routeId + ' ' + directionId + ' ' + stop);\r\n    } else if (tripTimesForFirstStop[stop]) {\r\n      dataSeries.push({\r\n        x: metersToMiles(directionInfo.stop_geometry[stop].distance),\r\n        y: tripTimesForFirstStop[stop][1], // median\r\n        title: route.stops[stop].title,\r\n        stopIndex: index,\r\n      });\r\n    } /* else {\r\n      console.log('no trip times for first stop ' + routeId + ' ' + directionId + ' ' + stop);\r\n    } */\r\n\r\n    return null;\r\n  });\r\n\r\n  return dataSeries;\r\n}\r\n\r\n/**\r\n * Computes waits of all routes.\r\n *\r\n * @param {Object} waitTimesCache\r\n * @param {Object} graphParams\r\n * @param {Object} routes\r\n */\r\nexport function getAllWaits(waitTimesCache, graphParams, routes) {\r\n  let allWaits = null;\r\n  if (routes) {\r\n    allWaits = filterRoutes(routes).map(route => {\r\n      return {\r\n        routeId: route.id,\r\n        wait: getAverageOfMedianWaitStat(waitTimesCache, graphParams, route),\r\n        longWait:\r\n          1 -\r\n          getAverageOfMedianWaitStat(\r\n            waitTimesCache,\r\n            graphParams,\r\n            route,\r\n            'plt20m',\r\n          ),\r\n      };\r\n    });\r\n    allWaits = allWaits.filter(waitObj => !Number.isNaN(waitObj.wait));\r\n    allWaits.sort((a, b) => {\r\n      return b.wait - a.wait;\r\n    });\r\n  }\r\n\r\n  return allWaits;\r\n}\r\n\r\n/**\r\n * Computes the end to end speed for a route.\r\n *\r\n * @param {Object} tripTimesCache\r\n * @param {Object} graphParams\r\n * @param {any} routes\r\n * @param {any} routeId\r\n */\r\nfunction getSpeedAndVariabilityForRoute(\r\n  tripTimesCache,\r\n  graphParams,\r\n  routes,\r\n  routeId,\r\n) {\r\n  const route = routes.find(thisRoute => thisRoute.id === routeId);\r\n\r\n  let speeds = route.directions.map(direction => {\r\n    const dist = direction.distance;\r\n    const tripTime = getEndToEndTripTime(\r\n      tripTimesCache,\r\n      graphParams,\r\n      routes,\r\n      route.id,\r\n      direction.id,\r\n    );\r\n\r\n    const p90tripTime = getEndToEndTripTime(\r\n      tripTimesCache,\r\n      graphParams,\r\n      routes,\r\n      route.id,\r\n      direction.id,\r\n      'p90',\r\n    );\r\n\r\n    const p10tripTime = getEndToEndTripTime(\r\n        tripTimesCache,\r\n        graphParams,\r\n        routes,\r\n        route.id,\r\n        direction.id,\r\n        'p10',\r\n      );\r\n\r\n    if (dist <= 0 || Number.isNaN(tripTime)) {\r\n      // something wrong with the data here\r\n      // console.log('bad dist or tripTime: ' + dist + ' ' + tripTime + ' for ' + routeId + ' ' + direction.id);\r\n      return -1;\r\n    }\r\n\r\n    const speed = (metersToMiles(Number.parseFloat(dist)) / tripTime) * 60.0; // initial units are meters per minute, final are mph\r\n\r\n    return {\r\n      speed,\r\n      variability: (p90tripTime - p10tripTime) / 2.0,\r\n    };\r\n  });\r\n\r\n  speeds = speeds.filter(speed => speed.speed >= 0); // ignore negative speeds, as with oddball 9 direction\r\n\r\n  if (speeds.length === 0) {\r\n    return 0;\r\n  }\r\n\r\n  const sum = speeds.reduce(\r\n    (total, currentValue) => total + currentValue.speed,\r\n    0,\r\n  );\r\n  const sumVariability = speeds.reduce(\r\n    (total, currentValue) => total + currentValue.variability,\r\n    0,\r\n  );\r\n  return {\r\n    speed: sum / speeds.length,\r\n    variability: sumVariability / speeds.length,\r\n  };\r\n}\r\n\r\n/**\r\n * Computes speeds of all routes.\r\n *\r\n * @param {any} routes\r\n * @param {any} allDistances\r\n */\r\nexport function getAllSpeeds(tripTimesCache, graphParams, routes) {\r\n  let allSpeeds = null;\r\n  if (routes) {\r\n    allSpeeds = filterRoutes(routes).map(route => {\r\n      const speedAndVariability = getSpeedAndVariabilityForRoute(\r\n        tripTimesCache,\r\n        graphParams,\r\n        routes,\r\n        route.id,\r\n      );\r\n      return {\r\n        routeId: route.id,\r\n        speed: speedAndVariability.speed,\r\n        variability: speedAndVariability.variability,\r\n      };\r\n    });\r\n    allSpeeds = allSpeeds.filter(speedObj => speedObj.speed > 0); // not needed?\r\n    allSpeeds.sort((a, b) => {\r\n      return b.speed - a.speed;\r\n    });\r\n\r\n    // console.log(JSON.stringify(allSpeeds));\r\n  }\r\n\r\n  return allSpeeds;\r\n}\r\n\r\n/**\r\n * Grade computation.\r\n *\r\n * TODO: refactor with Info.jsx's computation of grades once we add in probability\r\n * of long wait and travel variability to RouteSummary.\r\n */\r\nexport function computeGrades(\r\n  medianWait,\r\n  longWaitProbability,\r\n  speed,\r\n  variability,\r\n) {\r\n  //\r\n  // grade and score for median wait\r\n  //\r\n\r\n  const medianWaitScoreScale = d3\r\n    .scaleLinear()\r\n    .domain([5, 10])\r\n    .rangeRound([100, 0])\r\n    .clamp(true);\r\n\r\n  const medianWaitGradeScale = d3\r\n    .scaleThreshold()\r\n    .domain([5, 7.5, 10])\r\n    .range(['A', 'B', 'C', 'D']);\r\n\r\n  const longWaitScoreScale = d3\r\n    .scaleLinear()\r\n    .domain([0.1, 0.33])\r\n    .rangeRound([100, 0])\r\n    .clamp(true);\r\n\r\n  // grade and score for travel speed\r\n\r\n  const speedScoreScale = d3\r\n    .scaleLinear()\r\n    .domain([5, 10])\r\n    .rangeRound([0, 100])\r\n    .clamp(true);\r\n\r\n  const speedGradeScale = d3\r\n    .scaleThreshold()\r\n    .domain([5, 7.5, 10])\r\n    .range(['D', 'C', 'B', 'A']);\r\n\r\n  //\r\n  // grade score for travel time variability\r\n  //\r\n  // where variability is half of (90th percentile time minus 10th percentile)\r\n  //\r\n\r\n  const variabilityScoreScale = d3\r\n    .scaleLinear()\r\n    .domain([5, 10])\r\n    .rangeRound([100, 0])\r\n    .clamp(true);\r\n\r\n  const totalGradeScale = d3\r\n    .scaleThreshold()\r\n    .domain([25, 50, 75])\r\n    .range(['D', 'C', 'B', 'A']);\r\n\r\n  let medianWaitScore = 0;\r\n  let medianWaitGrade = '';\r\n  let longWaitScore = 0;\r\n  let speedScore = 0;\r\n  let speedGrade = '';\r\n  let travelVarianceScore = 0;\r\n  let totalScore = 0;\r\n  let totalGrade = '';\r\n\r\n  if (medianWait != null) {\r\n    medianWaitScore = medianWaitScoreScale(medianWait);\r\n    medianWaitGrade = medianWaitGradeScale(medianWait);\r\n  }\r\n\r\n  if (longWaitProbability != null) {\r\n    longWaitScore = longWaitScoreScale(longWaitProbability);\r\n  }\r\n\r\n  if (speed != null) {\r\n    speedScore = speedScoreScale(speed);\r\n    speedGrade = speedGradeScale(speed);\r\n  }\r\n\r\n  if (variability != null) {\r\n    travelVarianceScore = variabilityScoreScale(variability);\r\n  }\r\n\r\n  totalScore = Math.round(\r\n    (medianWaitScore + longWaitScore + speedScore + travelVarianceScore) / 4.0,\r\n  );\r\n  totalGrade = totalGradeScale(totalScore);\r\n\r\n  return {\r\n    medianWaitScore,\r\n    medianWaitGrade,\r\n    longWaitScore,\r\n    speedScore,\r\n    speedGrade,\r\n    travelVarianceScore,\r\n    totalScore,\r\n    totalGrade,\r\n    highestPossibleScore: 100,\r\n  };\r\n}\r\n\r\n/**\r\n * Computes scores of all routes.\r\n *\r\n * @param {any} routes\r\n * @param {any} speeds\r\n */\r\nexport function getAllScores(routes, waits, speeds) {\r\n  const allScores = [];\r\n\r\n  routes.forEach(route => {\r\n    const speedObj = speeds.find(speed => speed.routeId === route.id);\r\n    const waitObj = waits.find(wait => wait.routeId === route.id);\r\n    if (waitObj && speedObj) {\r\n      const grades = computeGrades(\r\n        waitObj.wait,\r\n        waitObj.longWait,\r\n        speedObj.speed,\r\n        speedObj.variability,\r\n      );\r\n      allScores.push({\r\n        routeId: route.id,\r\n        totalScore: grades.totalScore,\r\n        medianWaitScore: grades.medianWaitScore,\r\n        longWaitScore: grades.longWaitScore,\r\n        speedScore: grades.speedScore,\r\n        travelVarianceScore: grades.travelVarianceScore,\r\n      });\r\n    }\r\n  });\r\n\r\n  allScores.sort((a, b) => {\r\n    return b.totalScore - a.totalScore;\r\n  });\r\n\r\n  // console.log(JSON.stringify(allScores));\r\n\r\n  return allScores;\r\n}\r\n\r\nexport const quartileBackgroundColor = d3\r\n  .scaleThreshold()\r\n  .domain([0.25, 0.5, 0.75])\r\n  .range([red[300], yellow[300], lightGreen[800], green[900]]);\r\n\r\nexport const quartileContrastColor = d3\r\n  .scaleThreshold()\r\n  .domain([0.25, 0.5, 0.75])\r\n  .range(['black', 'black', 'white', 'white']);\r\n\r\n// for coloring the route table's white columns, to emphasize low scoring cells\r\nexport const quartileTextColor = d3\r\n  .scaleThreshold()\r\n  .domain([0.25, 0.5, 0.75])\r\n  .range(['black', 'black', '#8a8a8a', '#8a8a8a']);\r\n\r\n/**\r\n * Haversine formula for calcuating distance between two coordinates in lat lon\r\n * from bird eye view; seems to be +- 8 meters difference from geopy distance.\r\n *\r\n * From eclipses.py.  Returns distance in meters.\r\n */\r\nexport function haverDistance(degLatStop, degLonStop, degLatBus, degLonBus) {\r\n  const deg2rad = x => (x * Math.PI) / 180;\r\n  const eradius = 6371000;\r\n\r\n  const [radLatStop, radLonStop, radLatBus, radLonBus] = [\r\n    degLatStop,\r\n    degLonStop,\r\n    degLatBus,\r\n    degLonBus,\r\n  ].map(deg2rad);\r\n\r\n  const latDiff = radLatBus - radLatStop;\r\n  const lonDiff = radLonBus - radLonStop;\r\n\r\n  const a =\r\n    Math.sin(latDiff / 2) ** 2 +\r\n    Math.cos(radLatStop) * Math.cos(radLatBus) * Math.sin(lonDiff / 2) ** 2;\r\n  const hypotenuse = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n  const distance = eradius * hypotenuse;\r\n\r\n  return distance;\r\n}\r\n\r\n/**\r\n * Returns the distance between two stops in miles.\r\n */\r\nexport function milesBetween(p1, p2) {\r\n  const meters = haverDistance(p1.lat, p1.lon, p2.lat, p2.lon);\r\n  return metersToMiles(meters);\r\n}\r\n","/**\r\n * Constants for the UI that allow for reconfiguration.\r\n */\r\n\r\nimport indigo from '@material-ui/core/colors/indigo';\r\n\r\n// Colors definition:\r\n// This section its should be use to declare an object color\r\n// that contain the colors used in the application\r\nexport const Colors = {\r\n  GRAY: '#a4a6a9',\r\n  PURPLE: '#aa82c5',\r\n  BLUE: 'blue',\r\n  RED: 'red',\r\n  GREEN: 'green',\r\n  INDIGO: indigo[400],\r\n};\r\n\r\n// placeholder colors: gray and purple from nyc busstats\r\nexport const CHART_COLORS = [Colors.GRAY, Colors.PURPLE];\r\n\r\n// use this percentile (e.g. 90th) for waits/travel times\r\n// for planning purposes the idea here is to filter out\r\n// extreme/maximum wait/travel values so that the user knows\r\n// long the trip will \"usually\" take.  So for 90th percentile\r\n// this would be the historic performance 9 times out of 10.\r\nexport const PLANNING_PERCENTILE = 90;\r\nexport const TENTH_PERCENTILE = 10;\r\n\r\n// a commonly used style option for react-vis\r\n// Crosshairs (hovers) where we don't want a crosshair line\r\n// spanning the chart, just the hover.\r\nexport const REACT_VIS_CROSSHAIR_NO_LINE = { line: { background: 'none' } };\r\n\r\n// Sentinel value representing the \"All Day\" time range (no start time and no\r\n// end time).  Cannot use empty string because the Select does not match it\r\n// with a MenuItem having an empty value.\r\nexport const TIME_RANGE_ALL_DAY = 'allday';\r\n\r\n// Values and labels for time ranges.  The value gets split on '-' to create\r\n// start and end times for the back end.  The shortLabel plus restOfLabel forms\r\n// the label for the MenuItem, and the shortLabel can be used by itself in read-only\r\n// contexts.\r\nexport const TIME_RANGES = [\r\n  { value: TIME_RANGE_ALL_DAY, shortLabel: 'All Day', restOfLabel: '' },\r\n  { value: '07:00-19:00', shortLabel: 'Daytime', restOfLabel: ' (7AM - 7PM)' },\r\n  {\r\n    value: '03:00-07:00',\r\n    shortLabel: 'Early Morning',\r\n    restOfLabel: ' (3AM - 7AM)',\r\n  },\r\n  { value: '07:00-10:00', shortLabel: 'AM Peak', restOfLabel: ' (7AM - 10AM)' },\r\n  { value: '10:00-16:00', shortLabel: 'Midday', restOfLabel: ' (10AM - 4PM)' },\r\n  { value: '16:00-19:00', shortLabel: 'PM Peak', restOfLabel: ' (4PM - 7PM)' },\r\n  {\r\n    value: '19:00-03:00+1',\r\n    shortLabel: 'Late Evening',\r\n    restOfLabel: ' (7PM - 3AM)',\r\n  },\r\n];\r\n\r\nexport const MAX_DATE_RANGE = 90; // largest date range allowed, in days (30 might be more performant)\r\n\r\n// RadioGroup expects values to be strings, not numbers.\r\nexport const DATE_RANGES = [\r\n  { value: '1', label: 'Yesterday' },\r\n  { value: '7', label: 'Last week' },\r\n  { value: '30', label: 'Last 30 days' },\r\n  { value: '90', label: 'Last 90 days' },\r\n];\r\n\r\n// Values are Moment days of the week (0-6)\r\nexport const WEEKDAYS = [\r\n  { value: '1', label: 'Monday' },\r\n  { value: '2', label: 'Tuesday' },\r\n  { value: '3', label: 'Wednesday' },\r\n  { value: '4', label: 'Thursday' },\r\n  { value: '5', label: 'Friday' },\r\n];\r\n\r\nexport const WEEKENDS = [\r\n  { value: '6', label: 'Saturday' },\r\n  { value: '0', label: 'Sunday' },\r\n];\r\n\r\n// Marey chart:  how long of a dwell at a stop results in a second data point for exit.\r\nexport const DWELL_THRESHOLD_SECS = 120;\r\n","import axios from 'axios';\r\nimport { MetricsBaseURL, S3Bucket, RoutesVersion, TripTimesVersion, WaitTimesVersion, ArrivalsVersion } from '../config';\r\nimport { getTimePath } from '../helpers/precomputed';\r\nimport Moment from 'moment';\r\nimport { MAX_DATE_RANGE } from '../UIConstants';\r\n\r\n/**\r\n * Helper function to compute the list of days for the GraphQL query.\r\n *\r\n * @param graphParams Current UI state.\r\n * @returns {Array} List of days to query for.\r\n */\r\nfunction computeDates(graphParams) {\r\n  let endMoment = Moment(graphParams.date);\r\n\r\n  // If this is a custom date range, compute the number of days back\r\n  // based on the start date.\r\n\r\n    const startMoment = Moment(graphParams.startDate);\r\n    const deltaDays = endMoment.diff(startMoment, 'days');\r\n    let numberOfDaysBack = Math.abs(deltaDays) + 1; // add one for the end date itself\r\n    if (deltaDays < 0) { // if the start date is after end date, use the start date as the \"end\"\r\n      endMoment = startMoment;\r\n    }\r\n\r\n  if (numberOfDaysBack > MAX_DATE_RANGE) { // guard rail\r\n    numberOfDaysBack = MAX_DATE_RANGE;\r\n  }\r\n\r\n  // Generate the list of days, filtering by the days of the week checkboxes.\r\n\r\n  let dates = [];\r\n  for (let i = 0; i < numberOfDaysBack; i++) {\r\n\r\n    if (graphParams.daysOfTheWeek[endMoment.day()]) {\r\n      dates.push(endMoment.format('YYYY-MM-DD'));\r\n    }\r\n    endMoment.subtract(1, 'days');\r\n  }\r\n  return dates;\r\n}\r\n\r\n// S3 URL to route configuration\r\nexport function generateRoutesURL(agencyId) {\r\n  return `https://${S3Bucket}.s3.amazonaws.com/routes/${RoutesVersion}/routes_${RoutesVersion}_${agencyId}.json.gz?f`;\r\n}\r\n\r\n/**\r\n * Generate S3 url for cached trip time statistics\r\n * @param agencyId {string} agency ID\r\n * @param dateStr {string} date\r\n * @param statPath {string} the statistical measure (e.g. median)\r\n * @param timePath {string} the time of day\r\n * @returns {string} S3 url\r\n */\r\nexport function generateTripTimesURL(agencyId, dateStr, statPath, timePath) {\r\n  return `https://${S3Bucket}.s3.amazonaws.com/trip-times/${TripTimesVersion}/${agencyId}/${dateStr.replace(\r\n    /-/g,\r\n    '/',\r\n  )}/trip-times_${TripTimesVersion}_${agencyId}_${dateStr}_${statPath}${timePath}.json.gz?e`;\r\n}\r\n\r\n/**\r\n * Generate S3 url for cached wait time statistics\r\n * @param agencyId {string} agency ID\r\n * @param dateStr {string} date\r\n * @param statPath {string} the statistical measure (e.g. median)\r\n * @param timePath {string} the time of day\r\n * @returns {string} S3 url\r\n */\r\nexport function generateWaitTimesURL(agencyId, dateStr, statPath, timePath) {\r\n  return `https://${S3Bucket}.s3.amazonaws.com/wait-times/${WaitTimesVersion}/${agencyId}/${dateStr.replace(\r\n    /-/g,\r\n    '/',\r\n  )}/wait-times_${WaitTimesVersion}_${agencyId}_${dateStr}_${statPath}${timePath}.json.gz?e`;\r\n}\r\n\r\n/**\r\n * Generate S3 url for arrivals\r\n * @param dateStr {string} date\r\n * @param routeId {string} route id\r\n * @returns {string} S3 url\r\n */\r\nexport function generateArrivalsURL(agencyId, dateStr, routeId) {\r\n  return `https://${S3Bucket}.s3.amazonaws.com/arrivals/${ArrivalsVersion}/${agencyId}/${dateStr.replace(\r\n    /-/g,\r\n    '/',\r\n  )}/arrivals_${ArrivalsVersion}_${agencyId}_${dateStr}_${routeId}.json.gz?d`;\r\n}\r\n\r\nexport function fetchGraphData(params) {\r\n\r\n  const dates = computeDates(params);\r\n\r\n  return function(dispatch) {\r\n\r\n    var query = `query($agencyId:String!, $routeId:String!, $startStopId:String!, $endStopId:String,\r\n    $directionId:String, $date:[String!], $startTime:String, $endTime:String) {\r\n  routeMetrics(agencyId:$agencyId, routeId:$routeId) {\r\n    trip(startStopId:$startStopId, endStopId:$endStopId, directionId:$directionId) {\r\n      interval(dates:$date, startTime:$startTime, endTime:$endTime) {\r\n        headways {\r\n          count median max\r\n          percentiles(percentiles:[90]) { percentile value }\r\n          histogram { binStart binEnd count }\r\n        }\r\n        tripTimes {\r\n          count median avg max\r\n          percentiles(percentiles:[90]) { percentile value }\r\n          histogram { binStart binEnd count }\r\n        }\r\n        waitTimes {\r\n          median max\r\n          percentiles(percentiles:[90]) { percentile value }\r\n          histogram { binStart binEnd count }\r\n        }\r\n      }\r\n      timeRanges(dates:$date) {\r\n        startTime endTime\r\n        waitTimes {\r\n          percentiles(percentiles:[50,90]) { percentile value }\r\n        }\r\n        tripTimes {\r\n          percentiles(percentiles:[50,90]) { percentile value }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}`.replace(/\\s+/g, ' ');\r\n\r\n    dispatch({ type: 'REQUEST_GRAPH_DATA' });\r\n    axios.get('/api/graphql', {\r\n        params: { query: query, variables: JSON.stringify({...params, date: dates}) }, // computed dates aren't in graphParams so add here\r\n        baseURL: MetricsBaseURL,\r\n      })\r\n      .then(response => {\r\n\r\n        if (response.data && response.data.errors) {\r\n          // assume there is at least one error, but only show the first one\r\n          dispatch({ type: 'ERROR_GRAPH_DATA', payload: response.data.errors[0].message });\r\n        } else {\r\n          dispatch({\r\n            type: 'RECEIVED_GRAPH_DATA',\r\n            payload: response.data,\r\n            graphParams: params,\r\n          });\r\n        }\r\n      })\r\n      .catch(err => { // not sure which of the below is still applicable after moving to graphql\r\n        const errStr =\r\n          err.response && err.response.data && err.response.data.error\r\n            ? err.response.data.error\r\n            : err.message;\r\n        dispatch({ type: 'ERROR_GRAPH_DATA', payload: errStr });\r\n      });\r\n  };\r\n}\r\n\r\nexport function resetGraphData() {\r\n  return function(dispatch) {\r\n    dispatch({ type: 'RESET_GRAPH_DATA', payload: null });\r\n  };\r\n}\r\n\r\nexport function fetchRoutes(params) {\r\n  return function(dispatch) {\r\n    const agencyId = params.agencyId;\r\n    dispatch({ type: 'REQUEST_ROUTES' });\r\n    axios\r\n      .get(generateRoutesURL(agencyId))\r\n      .then(response => {\r\n        var routes = response.data.routes;\r\n        routes.forEach(route => {\r\n          route.agencyId = agencyId;\r\n        });\r\n        dispatch({ type: 'RECEIVED_ROUTES', payload: routes });\r\n      })\r\n      .catch(err => {\r\n        dispatch({ type: 'ERROR_ROUTES', payload: err });\r\n      });\r\n  };\r\n}\r\n\r\nexport function fetchPrecomputedWaitAndTripData(params) {\r\n  return function(dispatch, getState) {\r\n    const timeStr = params.startTime\r\n      ? `${params.startTime}-${params.endTime}`\r\n      : '';\r\n    const dateStr = params.date;\r\n    const agencyId = params.agencyId;\r\n\r\n    const tripStatGroup = 'p10-median-p90'; // blocked; // 'median'\r\n    const tripTimesCache = getState().routes.tripTimesCache;\r\n\r\n    const tripTimesCacheKey = `${agencyId}-${dateStr + timeStr}-${tripStatGroup}`;\r\n\r\n    const tripTimes = tripTimesCache[tripTimesCacheKey];\r\n\r\n    if (!tripTimes) {\r\n      const timePath = getTimePath(timeStr);\r\n      const statPath = tripStatGroup;\r\n\r\n      const s3Url = generateTripTimesURL(agencyId, dateStr, statPath, timePath);\r\n\r\n      dispatch({ type: 'REQUEST_PRECOMPUTED_TRIP_TIMES' });\r\n      axios\r\n        .get(s3Url)\r\n        .then(response => {\r\n          dispatch({\r\n            type: 'RECEIVED_PRECOMPUTED_TRIP_TIMES',\r\n            payload: [response.data, tripTimesCacheKey],\r\n          });\r\n        })\r\n        .catch(() => {\r\n          dispatch({ type: 'ERROR_PRECOMPUTED_TRIP_TIMES' });\r\n          /* do something? */\r\n        });\r\n    }\r\n\r\n    const waitStatGroup = 'median-p90-plt20m';\r\n    const waitTimesCacheKey = `${agencyId}-${dateStr + timeStr}-${waitStatGroup}`;\r\n\r\n    const waitTimesCache = getState().routes.waitTimesCache;\r\n    const waitTimes = waitTimesCache[waitTimesCacheKey];\r\n\r\n    if (!waitTimes) {\r\n      const timePath = getTimePath(timeStr);\r\n      const statPath = waitStatGroup; // for now, nothing clever about selecting smaller files here //getStatPath(statGroup);\r\n\r\n      const s3Url = generateWaitTimesURL(agencyId, dateStr, statPath, timePath);\r\n\r\n      dispatch({ type: 'REQUEST_PRECOMPUTED_WAIT_TIMES' });\r\n      axios\r\n        .get(s3Url)\r\n        .then(response => {\r\n          dispatch({\r\n            type: 'RECEIVED_PRECOMPUTED_WAIT_TIMES',\r\n            payload: [response.data, waitTimesCacheKey],\r\n          });\r\n        })\r\n        .catch(() => {\r\n          dispatch({ type: 'ERROR_PRECOMPUTED_WAIT_TIMES' });\r\n          /* do something? */\r\n        });\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Action creator that fetches arrival history from S3 corresponding to the\r\n * day and route specified by params.\r\n *\r\n * @param params graphParams object\r\n */\r\nexport function fetchArrivals(params) {\r\n  return function(dispatch) {\r\n    const dateStr = params.date;\r\n    const agencyId = params.agencyId;\r\n\r\n    const s3Url = generateArrivalsURL(agencyId, dateStr, params.routeId);\r\n\r\n    dispatch({ type: 'REQUEST_ARRIVALS' });\r\n    axios\r\n      .get(s3Url)\r\n      .then(response => {\r\n        dispatch({\r\n          type: 'RECEIVED_ARRIVALS',\r\n          payload: [response.data, dateStr, params.routeId],\r\n        });\r\n      })\r\n      .catch(err => {\r\n        dispatch({ type: 'ERROR_ARRIVALS', payload: 'No data.' });\r\n        console.error(err);\r\n      });\r\n  };\r\n}\r\n\r\n/**\r\n * Action creator that clears arrival history.\r\n */\r\nexport function resetArrivals() {\r\n  return function(dispatch) {\r\n    dispatch({ type: 'ERROR_ARRIVALS', payload: null });\r\n  };\r\n}\r\n\r\nexport function handleSpiderMapClick(stops, latLng) {\r\n  return function(dispatch) {\r\n    dispatch({ type: 'RECEIVED_SPIDER_MAP_CLICK', payload: [stops, latLng] });\r\n  };\r\n}\r\n\r\nexport function handleGraphParams(params) {\r\n  return function(dispatch, getState) {\r\n    dispatch({ type: 'RECEIVED_GRAPH_PARAMS', payload: params });\r\n    const graphParams = getState().routes.graphParams;\r\n\r\n    // for debugging: console.log('hGP: ' + graphParams.routeId + ' dirid: ' + graphParams.directionId + \" start: \" + graphParams.startStopId + \" end: \" + graphParams.endStopId);\r\n    // fetch graph data if all params provided\r\n    // TODO: fetch route summary data if all we have is a route ID.\r\n\r\n    if (graphParams.date && graphParams.agencyId) {\r\n      dispatch(fetchPrecomputedWaitAndTripData(graphParams));\r\n    }\r\n\r\n    if (\r\n      graphParams.agencyId &&\r\n      graphParams.routeId &&\r\n      graphParams.directionId &&\r\n      graphParams.startStopId &&\r\n      graphParams.endStopId\r\n    ) {\r\n      dispatch(fetchGraphData(graphParams));\r\n    } else {\r\n      // when we don't have all params, clear graph data\r\n\r\n      dispatch(resetGraphData());\r\n    }\r\n  };\r\n}\r\n","/**\r\n * Helper functions for plotting on maps.\r\n */\r\n\r\nimport * as turf from '@turf/turf';\r\nimport { milesBetween, metersToMiles } from './routeCalculations';\r\nimport { getAgency } from '../config';\r\n\r\n/**\r\n * Gets coordinates that can be consumed by a Leaflet Polyline.  Uses\r\n * the GTFS stop geometry if possible, otherwise just stop to stop.\r\n *\r\n *  @param routeInfo route from nextbus route config list\r\n *  @param dirInfo direction object from route config\r\n *  @param fromStop stop id (defaults to first stop)\r\n *  @param toStop stop id (defaults to last stop)\r\n */\r\nexport function getTripPoints(\r\n  routeInfo,\r\n  dirInfo,\r\n  fromStop = dirInfo.stops[0],\r\n  toStop = dirInfo.stops[dirInfo.stops.length - 1],\r\n) {\r\n  const fromStopInfo = routeInfo.stops[fromStop];\r\n  const toStopInfo = routeInfo.stops[toStop];\r\n\r\n  const fromStopGeometry = dirInfo.stop_geometry[fromStop];\r\n  const toStopGeometry = dirInfo.stop_geometry[toStop];\r\n  const tripPoints = [];\r\n\r\n  if (fromStopGeometry && toStopGeometry) {\r\n    tripPoints.push(fromStopInfo);\r\n    for (\r\n      let i = fromStopGeometry.after_index + 1;\r\n      i <= toStopGeometry.after_index;\r\n      i++\r\n    ) {\r\n      tripPoints.push(dirInfo.coords[i]);\r\n    }\r\n    tripPoints.push(toStopInfo);\r\n  } // if unknown geometry, draw straight lines between stops\r\n  else {\r\n    const fromStopIndex = dirInfo.stops.indexOf(fromStop);\r\n    const toStopIndex = dirInfo.stops.indexOf(toStop);\r\n    if (fromStopIndex !== -1 && toStopIndex !== -1) {\r\n      for (let i = fromStopIndex; i <= toStopIndex; i++) {\r\n        const stopInfo = routeInfo.stops[dirInfo.stops[i]];\r\n        tripPoints.push(stopInfo);\r\n      }\r\n    }\r\n  }\r\n  return tripPoints;\r\n}\r\n\r\n/**\r\n * Returns distance in miles between two stops, using GTFS-derived distance along\r\n * route if available, or else haversine distance.\r\n *\r\n *  @param routeInfo route from nextbus route config list\r\n *  @param dirInfo direction object from route config\r\n *  @param fromStop stop id (defaults to first stop)\r\n *  @param toStop stop id (defaults to last stop)\r\n */\r\nexport function getDistanceInMiles(\r\n  routeInfo,\r\n  dirInfo,\r\n  fromStop = dirInfo.stops[0],\r\n  toStop = dirInfo.stops[dirInfo.stops.length - 1],\r\n) {\r\n  const fromStopInfo = routeInfo.stops[fromStop];\r\n  const toStopInfo = routeInfo.stops[toStop];\r\n\r\n  const fromStopGeometry = dirInfo.stop_geometry[fromStop];\r\n  const toStopGeometry = dirInfo.stop_geometry[toStop];\r\n  let distance = null;\r\n\r\n  if (fromStopGeometry && toStopGeometry) {\r\n    distance = metersToMiles(\r\n      toStopGeometry.distance - fromStopGeometry.distance,\r\n    );\r\n  } else {\r\n    // if unknown geometry, draw straight lines between stops\r\n\r\n    distance = milesBetween(fromStopInfo, toStopInfo);\r\n  }\r\n  return distance;\r\n}\r\n\r\n/**\r\n * Determines whether a given coordinate is within an agency's service area\r\n * @param agencyId - ID of agency in the config\r\n * @param latLng - coordinate as latitude and longitude\r\n * @returns {boolean} - true if the coordinate is in the service area\r\n */\r\nexport function isInServiceArea(agencyId, latLng) {\r\n  const point = turf.point([latLng.lng, latLng.lat]);\r\n\r\n  const serviceArea = getAgency(agencyId).serviceArea;\r\n  if (!serviceArea) {\r\n    return true;\r\n  }\r\n\r\n  return serviceArea.features.some(feature => {\r\n    return turf.booleanWithin(point, feature);\r\n  });\r\n}\r\n","/**\r\n * Renders an SVG \"shield\" representing a transit route.\r\n */\r\nexport default function MapShield(props) {\r\n  const routeText = props.routeText;\r\n  const color = props.color;\r\n  const waitScaled = props.waitScaled; // 0, 1, or 2\r\n\r\n  let html = null;\r\n\r\n  const r = 9 + waitScaled * 1.25;\r\n\r\n  // rapid and express routes get rectangular/rounded rect shields respectively\r\n\r\n  if (routeText.endsWith('R') || routeText.endsWith('X')) {\r\n    html =\r\n      `<div style=\"width:30px; height:${r * 2}px; ` +\r\n      `border-radius:${routeText.endsWith('X') ? r : 0}px; `;\r\n  } else {\r\n    // all other routes get circular shields\r\n\r\n    html =\r\n      `<div style=\"width:${r * 2}px; height:${r * 2}px; ` +\r\n      `border-radius: ${r}px; `;\r\n  }\r\n\r\n  html +=\r\n    `${'position:relative; top:5px; left:5px; ' +\r\n      'border-style:solid; border-color:'}${color}; ` +\r\n    `border-width: ${waitScaled / 1.5 + 1.0}px;` +\r\n    `background-color:white;` +\r\n    `text-align:center; font-size:${75 + waitScaled * 15}%; font-weight: ${400 +\r\n      waitScaled * 75}\">${routeText}</div>`;\r\n\r\n  return html;\r\n}\r\n","import React, { Component, createRef, Fragment } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport GpsIcon from '@material-ui/icons/GpsFixed';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  Map,\r\n  TileLayer,\r\n  CircleMarker,\r\n  Marker,\r\n  Tooltip,\r\n  Polyline,\r\n} from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport Control from 'react-leaflet-control';\r\nimport * as d3 from 'd3';\r\nimport { Snackbar } from '@material-ui/core';\r\nimport { ROUTE, DIRECTION, FROM_STOP, TO_STOP, Path } from '../routeUtil';\r\nimport {\r\n  getAllWaits,\r\n  filterRoutes,\r\n  milesBetween,\r\n} from '../helpers/routeCalculations';\r\nimport { handleSpiderMapClick } from '../actions';\r\nimport { Agencies } from '../config';\r\nimport { getTripPoints, isInServiceArea } from '../helpers/mapGeometry';\r\nimport MapShield from './MapShield';\r\n\r\n//import { STARTING_COORDINATES } from '../locationConstants1';\r\n// const ZOOM = 13;\r\n\r\nconst CLICK_RADIUS_MI = 0.25; // maximum radius for stops near a point\r\n\r\n// Displays alert when an invalid location is set\r\nfunction ValidLocationAlert(props) {\r\n  return (\r\n    <Snackbar\r\n      message=\"Location is not in service area\"\r\n      open={props.showAlert}\r\n    />\r\n  );\r\n}\r\n\r\nclass MapSpider extends Component {\r\n  /**\r\n   * A function that returns one of ten colors given a route index.\r\n   * (index modulo 10).\r\n   */\r\n  routeColor = d3.scaleQuantize([0, 9], d3.schemeCategory10);\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // for now, only supports 1 agency at a time.\r\n    // todo: support multiple agencies on one map\r\n    this.agency = Agencies[0];\r\n\r\n    this.state = {\r\n      // Should be true by default, so that we don't display the snackbar\r\n      isValidLocation: true,\r\n      height: this.computeHeight(),\r\n    };\r\n\r\n    this.mapRef = createRef(); // used for geolocating\r\n\r\n    this.handleLocationFound = this.handleLocationFound.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.boundUpdate = this.updateDimensions.bind(this);\r\n    window.addEventListener('resize', this.boundUpdate);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateDimensions.bind(this));\r\n  }\r\n\r\n  /**\r\n   * Places a Leaflet Marker (blue pin) at the clicked or geolocated map location.\r\n   * Like the isochrone, the marker can be dragged to get new results.\r\n   */\r\n  SpiderOriginMarker = props => {\r\n    let latlng = null;\r\n\r\n    return props.spiderLatLng ? (\r\n      <Marker\r\n        position={props.spiderLatLng}\r\n        draggable\r\n        onMove={e => {\r\n          latlng = e.latlng;\r\n        }}\r\n        onMoveEnd={() => {\r\n          this.handleLocationFound({ latlng });\r\n        }}\r\n      />\r\n    ) : null;\r\n  };\r\n\r\n  /**\r\n   * Creates a clickable Marker with a custom svg icon (MapShield) for the route\r\n   * represented by startMarker.\r\n   *\r\n   * https://medium.com/@nikjohn/creating-a-dynamic-jsx-marker-with-react-leaflet-f75fff2ddb9\r\n   */\r\n  generateShield = (startMarker, waitScaled) => {\r\n    const lastStop =\r\n      startMarker.downstreamStops[startMarker.downstreamStops.length - 1];\r\n    const shieldPosition = [lastStop.lat, lastStop.lon];\r\n    const routeColor = this.routeColor(startMarker.routeIndex % 10);\r\n\r\n    const icon = L.divIcon({\r\n      className: 'custom-icon', // this is needed to turn off the default icon styling (blank square)\r\n      html: MapShield({\r\n        waitScaled,\r\n        color: routeColor,\r\n        routeText: startMarker.routeId,\r\n      }),\r\n    });\r\n\r\n    return (\r\n      <Marker\r\n        key={`${startMarker.routeId}-${startMarker.direction.id}-Shield`}\r\n        position={shieldPosition}\r\n        icon={icon}\r\n        riseOnHover\r\n        onClick={e => {\r\n          e.originalEvent.view.L.DomEvent.stopPropagation(e);\r\n          const path = new Path();\r\n          path\r\n            .buildPath(ROUTE, startMarker.routeId)\r\n            .buildPath(DIRECTION, startMarker.direction.id)\r\n            .buildPath(FROM_STOP, startMarker.stopId)\r\n            .buildPath(TO_STOP, lastStop.stopId)\r\n            .commitPath();\r\n        }}\r\n      ></Marker>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Rendering of stops nearest to click or current location\r\n   */\r\n  getStartMarkers = () => {\r\n    let items = null;\r\n\r\n    /* eslint-disable react/no-array-index-key */\r\n    if (this.props.spiderSelection) {\r\n      items = this.props.spiderSelection.map((startMarker, index) => {\r\n        const position = [startMarker.stop.lat, startMarker.stop.lon];\r\n        const routeColor = this.routeColor(startMarker.routeIndex % 10);\r\n\r\n        return (\r\n          <CircleMarker\r\n            key={`startMarker-${index}`}\r\n            center={position}\r\n            radius=\"8\"\r\n            fillColor={routeColor}\r\n            fillOpacity={0.2}\r\n            stroke={false}\r\n          >\r\n            <Tooltip>\r\n              {startMarker.routeTitle}\r\n              <br />\r\n              {startMarker.direction.title}\r\n              <br />\r\n              {startMarker.stop.title}\r\n              <br />\r\n              {Math.round(startMarker.miles * 5280)} feet\r\n            </Tooltip>\r\n          </CircleMarker>\r\n        );\r\n      });\r\n    }\r\n    return items;\r\n  };\r\n\r\n  /**\r\n   * Rendering of route from nearest stop to terminal.\r\n   */\r\n  DownstreamLines = () => {\r\n    const allWaits = getAllWaits(\r\n      this.props.waitTimesCache,\r\n      this.props.graphParams,\r\n      this.props.routes,\r\n    );\r\n\r\n    // One polyline for each start marker\r\n\r\n    let items = null;\r\n\r\n    if (this.props.spiderSelection) {\r\n      items = this.props.spiderSelection.map(startMarker => {\r\n        const downstreamStops = startMarker.downstreamStops;\r\n\r\n        const polylines = [];\r\n\r\n        // Add a base polyline connecting the stops.  One polyline between each stop gives better tooltips\r\n        // when selecting a line.\r\n\r\n        // get wait rank, most frequent is highest (largest) rank\r\n        const waitRank = allWaits.findIndex(\r\n          wait => wait.routeId === startMarker.routeId,\r\n        );\r\n\r\n        // scale wait rank to 0, 1, or 2\r\n        let waitScaled = Math.trunc((waitRank / allWaits.length) * 3);\r\n        if (!isFinite(waitScaled)) {\r\n          waitScaled = 0;\r\n        }\r\n\r\n        for (let i = 0; i < downstreamStops.length - 1; i++) {\r\n          // for each stop\r\n          polylines.push(this.generatePolyline(startMarker, waitScaled, i));\r\n        }\r\n\r\n        // Add a solid circle at the terminal stop.\r\n\r\n        polylines.push(this.generateTerminalCircle(startMarker, waitScaled));\r\n\r\n        // Add a route shield next to the terminal stop.\r\n\r\n        polylines.push(this.generateShield(startMarker, waitScaled));\r\n\r\n        return polylines;\r\n      });\r\n    }\r\n\r\n    return <Fragment>{items}</Fragment>;\r\n  };\r\n\r\n  /**\r\n   * Creates a circle at the terminal of a route.\r\n   */\r\n  generateTerminalCircle = (startMarker, waitScaled) => {\r\n    const lastStop =\r\n      startMarker.downstreamStops[startMarker.downstreamStops.length - 1];\r\n    const terminalPosition = [lastStop.lat, lastStop.lon];\r\n    const routeColor = this.routeColor(startMarker.routeIndex % 10);\r\n\r\n    return (\r\n      <CircleMarker\r\n        key={`startMarker-${startMarker.routeId}-terminal-${lastStop.stopId}`}\r\n        center={terminalPosition}\r\n        radius={3.0 + waitScaled / 2.0}\r\n        fillColor={routeColor}\r\n        fillOpacity={0.75}\r\n        stroke={false}\r\n      ></CircleMarker>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Creates a line between two stops.\r\n   */\r\n  generatePolyline = (startMarker, waitScaled, i) => {\r\n    const downstreamStops = startMarker.downstreamStops;\r\n\r\n    const computedWeight = waitScaled * 1.5 + 3;\r\n\r\n    const routeColor = this.routeColor(startMarker.routeIndex % 10);\r\n\r\n    return (\r\n      <Polyline\r\n        key={`poly-${startMarker.routeId}-${downstreamStops[i].stopId}`}\r\n        positions={getTripPoints(\r\n          startMarker.routeInfo,\r\n          startMarker.direction,\r\n          downstreamStops[i].stopId,\r\n          downstreamStops[i + 1].stopId,\r\n        )}\r\n        color={routeColor}\r\n        opacity={0.5}\r\n        weight={computedWeight}\r\n        onMouseOver={e => {\r\n          // on hover, draw segment wider\r\n          e.target.setStyle({ opacity: 1, weight: computedWeight + 4 });\r\n          return true;\r\n        }}\r\n        onFocus={e => {\r\n          this.onMouseOver(e);\r\n        }}\r\n        onMouseOut={e => {\r\n          e.target.setStyle({ opacity: 0.5, weight: computedWeight });\r\n          return true;\r\n        }}\r\n        onBlur={e => {\r\n          this.onMouseOut(e);\r\n        }}\r\n        // when this route segment is clicked, plot only the stops for this route/dir by setting the first stop\r\n\r\n        onClick={e => {\r\n          e.originalEvent.view.L.DomEvent.stopPropagation(e);\r\n          const path = new Path();\r\n          path\r\n            .buildPath(ROUTE, startMarker.routeId)\r\n            .buildPath(DIRECTION, startMarker.direction.id)\r\n            .buildPath(FROM_STOP, startMarker.stopId)\r\n            .buildPath(TO_STOP, downstreamStops[i + 1].stopId)\r\n            .commitPath();\r\n        }}\r\n      >\r\n        <Tooltip>\r\n          {/* should this hover text be a leaflet control in a fixed position? */}\r\n          {startMarker.routeTitle}\r\n          <br />\r\n          {startMarker.direction.title}\r\n          <br />\r\n          {downstreamStops[i + 1].title}\r\n          <br />\r\n        </Tooltip>\r\n      </Polyline>\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Geolocation button handler.\r\n   */\r\n  handleGeoLocate = e => {\r\n    e.preventDefault();\r\n    const map = this.mapRef.current;\r\n    if (map != null) {\r\n      map.leafletElement.locate(); // this is for geolocation, see https://leafletjs.com/examples/mobile/\r\n    }\r\n  };\r\n\r\n  /**\r\n   * When the map is clicked on, pass the event on to the location handler.\r\n   */\r\n  handleMapClick = e => {\r\n    const map = this.mapRef.current;\r\n    if (map != null) {\r\n      this.handleLocationFound(e);\r\n    }\r\n  };\r\n\r\n  updateDimensions() {\r\n    const height = this.computeHeight();\r\n    this.setState({ height });\r\n  }\r\n\r\n  /* Make the map full height unless the window is smaller than the sm breakpoint (640px), in which\r\n   * case make the map half height.\r\n   *\r\n   * TODO: Need to convert this component to a functional component.  Then we can use the useTheme\r\n   * hook to programatically access the breakpoint widths.\r\n   *\r\n   * Note: This code has to be adjusted to be kept in sync with the UI layout.\r\n   */\r\n\r\n  computeHeight() {\r\n    return (\r\n      (window.innerWidth >= 640 ? window.innerHeight : window.innerHeight / 2) -\r\n      64 /* blue app bar */\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Handles events with a location (either click, or geolocation call).\r\n   * Find nearby stops for each route/direction and plot the rest of the route to its terminal.\r\n   */\r\n  handleLocationFound(e) {\r\n    const { latlng } = e;\r\n\r\n    // const icon = L.divIcon({\r\n    //   className: 'custom-icon', // this is needed to turn off the default icon styling (blank square)\r\n    //   html: MapShield({\r\n    //     waitScaled,\r\n    //     color: routeColor,\r\n    //     routeText: startMarker.routeId,\r\n    //   }),\r\n    // });\r\n    // Set whether the location is valid\r\n    this.setState({ isValidLocation: isInServiceArea(this.agency.id, latlng) });\r\n\r\n    const stops = this.findStops(latlng); // note: all lowercase name in event.\r\n\r\n    // Add the downstream stops to the terminal.\r\n\r\n    stops.forEach(stop => {\r\n      this.addDownstreamStops(stop);\r\n    });\r\n\r\n    // Fire events here indicating that the route list should be filtered to just the\r\n    // routes corresponding to \"stops\".\r\n\r\n    const { onSpiderMapClick } = this.props;\r\n    onSpiderMapClick(stops, latlng);\r\n  }\r\n\r\n  /**\r\n   * Append info about the downstream stops to the given stop object for plotting on the map.\r\n   */\r\n  addDownstreamStops(myStop) {\r\n    const targetStop = myStop;\r\n\r\n    const selectedRoute = this.props.routes.find(\r\n      route => route.id === targetStop.routeId,\r\n    );\r\n\r\n    const secondStopInfo = targetStop.direction;\r\n    const secondStopListIndex = secondStopInfo.stops.indexOf(targetStop.stopId);\r\n\r\n    const secondStopList = secondStopInfo.stops.slice(\r\n      secondStopListIndex /* + 1  include starting stop */,\r\n    );\r\n\r\n    const downstreamStops = secondStopList.map(stopId =>\r\n      Object.assign(selectedRoute.stops[stopId], { stopId }),\r\n    );\r\n\r\n    targetStop.downstreamStops = downstreamStops;\r\n  }\r\n\r\n  /**\r\n   * Use brute force iteration to find the nearest stop for each direction of each route.\r\n   *\r\n   * Take only stops within CLICK_RADIUS_MI miles and sort by distance.\r\n   */\r\n  findStops(latLng) {\r\n    const { routes } = this.props;\r\n    const latLon = { lat: latLng.lat, lon: latLng.lng };\r\n    let stopsByRouteAndDir = [];\r\n\r\n    const filteredRoutes = filterRoutes(routes);\r\n    for (let i = 0; i < filteredRoutes.length; i++) {\r\n      // optimize this on back end\r\n      const route = filteredRoutes[i];\r\n\r\n      if (route.directions) {\r\n        // eslint-disable-next-line no-loop-func\r\n        route.directions.forEach(direction => {\r\n          const stopList = direction.stops;\r\n          const nearest = this.findNearestStop(latLon, stopList, route.stops);\r\n          nearest.routeId = route.id;\r\n          nearest.routeIndex = i;\r\n          nearest.routeTitle = route.title;\r\n          nearest.direction = direction;\r\n          nearest.routeInfo = route;\r\n          stopsByRouteAndDir.push(nearest);\r\n        });\r\n      }\r\n    }\r\n    // truncate by distance (CLICK_RADIUS_MI miles) and then sort\r\n\r\n    stopsByRouteAndDir = stopsByRouteAndDir.filter(\r\n      stop => stop.miles < CLICK_RADIUS_MI,\r\n    );\r\n    stopsByRouteAndDir.sort((a, b) => a.miles - b.miles);\r\n\r\n    return stopsByRouteAndDir;\r\n  }\r\n\r\n  /**\r\n   * Returns the nearest stop Object to the given latLon coordinates.\r\n   *\r\n   * stopList is an array of strings (stop ids) that are keys into the stopHash,\r\n   * a dictionary of stops (as found in route config objects).\r\n   */\r\n  findNearestStop(latLon, stopList, stopHash) {\r\n    let nearest = { miles: -1, stop: null, stopId: null };\r\n    stopList.forEach(stop => {\r\n      const miles = milesBetween(latLon, stopHash[stop]);\r\n      if (nearest.miles === -1 || miles < nearest.miles) {\r\n        nearest = { miles, stop: stopHash[stop], stopId: stop };\r\n      }\r\n    });\r\n    return nearest;\r\n  }\r\n\r\n  /**\r\n   * Main React render method.\r\n   */\r\n  render() {\r\n    const { position, zoom } = this.props;\r\n    const { isValidLocation } = this.state;\r\n    const mapClass = { width: '100%', height: this.state.height };\r\n    const startMarkers = this.getStartMarkers();\r\n\r\n    return (\r\n      <div>\r\n        <ValidLocationAlert showAlert={!isValidLocation} />\r\n        <Map\r\n          center={position || this.agency.initialMapCenter}\r\n          zoom={zoom || this.agency.initialMapZoom}\r\n          style={mapClass}\r\n          minZoom={5}\r\n          maxZoom={18}\r\n          onClick={this.handleMapClick}\r\n          onLocationfound={this.handleLocationFound}\r\n          ref={this.mapRef}\r\n        >\r\n          <TileLayer\r\n            attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.'\r\n            url=\"https://stamen-tiles.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}.png\"\r\n            opacity={0.3}\r\n          />\r\n          {/* see http://maps.stamen.com for details */}\r\n          <this.DownstreamLines />\r\n          {startMarkers}\r\n          <this.SpiderOriginMarker spiderLatLng={this.props.spiderLatLng} />\r\n          <Control position=\"topright\">\r\n            <div className=\"map-instructions\">\r\n              {this.props.spiderLatLng && startMarkers && startMarkers.length\r\n                ? 'Click anywhere along a route to see statistics for trips between the two stops.'\r\n                : 'Click anywhere in the city to see the routes near that point.'}\r\n            </div>\r\n          </Control>\r\n          <Control position=\"bottomleft\">\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={this.handleGeoLocate}\r\n            >\r\n              <GpsIcon />\r\n              &nbsp; Routes near me\r\n            </Button>\r\n            &nbsp;\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={() => this.props.onSpiderMapClick([], null)}\r\n            >\r\n              Clear map\r\n            </Button>\r\n            <br />\r\n            <br />\r\n          </Control>\r\n        </Map>\r\n      </div>\r\n    );\r\n  } // end render\r\n} // end class\r\n\r\nconst mapStateToProps = state => ({\r\n  routes: state.routes.routes,\r\n  graphParams: state.routes.graphParams,\r\n  waitTimesCache: state.routes.waitTimesCache,\r\n  spiderLatLng: state.routes.spiderLatLng,\r\n  spiderSelection: state.routes.spiderSelection,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSpiderMapClick: (stops, latLng) =>\r\n      dispatch(handleSpiderMapClick(stops, latLng)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(MapSpider);\r\n","import React, { useEffect, useState, Fragment } from 'react';\r\nimport clsx from 'clsx';\r\nimport PropTypes from 'prop-types';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport InfoIcon from '@material-ui/icons/InfoOutlined';\r\nimport { connect } from 'react-redux';\r\nimport Navlink from 'redux-first-router-link';\r\nimport {\r\n  filterRoutes,\r\n  getAllWaits,\r\n  getAllSpeeds,\r\n  getAllScores,\r\n  quartileBackgroundColor,\r\n  quartileContrastColor,\r\n  quartileTextColor,\r\n} from '../helpers/routeCalculations';\r\n\r\nimport { handleGraphParams, fetchPrecomputedWaitAndTripData } from '../actions';\r\n\r\nfunction desc(a, b, orderBy) {\r\n  // Treat NaN as infinity, so that it goes to the bottom of the table in an ascending sort.\r\n  // NaN needs special handling because NaN < 3 is false as is Nan > 3.\r\n\r\n  if (Number.isNaN(a[orderBy]) && Number.isNaN(b[orderBy])) {\r\n    return 0;\r\n  }\r\n  if (Number.isNaN(a[orderBy])) {\r\n    return -1;\r\n  }\r\n  if (Number.isNaN(b[orderBy])) {\r\n    return 1;\r\n  }\r\n\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/**\r\n * Sorts the given array using a comparator.  Equal values are ordered by array index.\r\n *\r\n * Sorting by title is a special case because the original order of the routes array is\r\n * better than sorting route title alphabetically.  For example, 1 should be followed by\r\n * 1AX rather than 10 and 12.\r\n *\r\n * @param {Array} array      Array to sort\r\n * @param {Function} cmp     Comparator to use\r\n * @param {String} sortOrder Either 'desc' or 'asc'\r\n * @param {String} orderBy   Column to sort by\r\n * @returns {Array}          The sorted array\r\n */\r\nfunction stableSort(array, cmp, sortOrder, orderBy) {\r\n  // special case for title sorting that short circuits the use of the comparator\r\n\r\n  if (orderBy === 'title') {\r\n    if (sortOrder === 'desc') {\r\n      const newArray = [...array].reverse();\r\n      return newArray;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = cmp(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map(el => el[0]);\r\n}\r\n\r\nfunction getSorting(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => desc(a, b, orderBy)\r\n    : (a, b) => -desc(a, b, orderBy);\r\n}\r\n\r\nconst headRows = [\r\n  { id: 'title', numeric: false, disablePadding: false, label: 'Name' },\r\n  { id: 'totalScore', numeric: true, disablePadding: false, label: 'Score' },\r\n  { id: 'wait', numeric: true, disablePadding: true, label: 'Median Wait (min)' },\r\n  {\r\n    id: 'longWait',\r\n    numeric: true,\r\n    disablePadding: true,\r\n    label: 'Long Wait %',\r\n  },\r\n  { id: 'speed', numeric: true, disablePadding: true, label: 'Average Speed (mph)' },\r\n  {\r\n    id: 'variability',\r\n    numeric: true,\r\n    disablePadding: true,\r\n    label: 'Travel Time Variability (min)',\r\n  },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { order, orderBy, onRequestSort } = props;\r\n  const createSortHandler = property => event => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headRows.map(row => (\r\n          <TableCell\r\n            key={row.id}\r\n            align={row.numeric ? 'right' : 'left'}\r\n            padding={row.disablePadding ? 'none' : 'default'}\r\n            sortDirection={orderBy === row.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === row.id}\r\n              direction={order}\r\n              onClick={createSortHandler(row.id)}\r\n            >\r\n              {row.label}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  order: PropTypes.string.isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles(theme => ({\r\n  root: {\r\n    paddingLeft: theme.spacing(2),\r\n    paddingRight: theme.spacing(1),\r\n  },\r\n  highlight:\r\n    theme.palette.type === 'light'\r\n      ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n      : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n  spacer: {\r\n    flex: '1 1 100%',\r\n  },\r\n  actions: {\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  title: {\r\n    flex: '0 0 auto',\r\n  },\r\n  popover: {\r\n    padding: theme.spacing(2),\r\n    maxWidth: 500,\r\n  },\r\n}));\r\n\r\nconst EnhancedTableToolbar = props => {\r\n  const classes = useToolbarStyles();\r\n  const { numSelected } = props;\r\n  \r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  function handleClick(event) {\r\n    setAnchorEl(event.currentTarget);\r\n  }\r\n\r\n  function handleClose() {\r\n    setAnchorEl(null);\r\n  }  \r\n\r\n  return (\r\n    <Toolbar\r\n      className={clsx(classes.root, {\r\n        [classes.highlight]: numSelected > 0,\r\n      })}\r\n    >\r\n      <div className={classes.title}>\r\n        {numSelected > 0 ? (\r\n          <Typography color=\"inherit\" variant=\"subtitle1\">\r\n            {numSelected} selected\r\n          </Typography>\r\n        ) : (\r\n          <Typography variant=\"h6\" id=\"tableTitle\">\r\n            Routes\r\n                  <IconButton size=\"small\" onClick={handleClick}>\r\n                    <InfoIcon fontSize=\"small\" />\r\n                  </IconButton>\r\n          </Typography>\r\n        )}\r\n      </div>\r\n      <div className={classes.spacer} />\r\n      <div className={classes.actions}>\r\n        <Tooltip title=\"Filter list\">\r\n          <IconButton aria-label=\"Filter list\">\r\n            <FilterListIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      </div>\r\n\r\n      <Popover\r\n        open={Boolean(anchorEl)}\r\n        anchorEl={anchorEl}\r\n        onClose={handleClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'center',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'center',\r\n        }}\r\n      >\r\n        <div className={classes.popover}><b>Score</b> is the average of subscores (0-100) for median wait,\r\n          long wait probability, average speed, and travel time variability.  Click on a route to see its metrics\r\n          and explanations of how the subscores are calculated.\r\n          <p/>\r\n          <b>Median Wait</b> is the 50th percentile (typical) wait time for a rider arriving\r\n          randomly at a stop while the route is running.\r\n          <p/>\r\n          <b>Long wait probability</b> is the chance a rider has of a wait of twenty minutes\r\n          or longer after arriving randomly at a stop. \r\n          <p/>\r\n          <b>Average speed</b> is the speed of the 50th percentile (typical) end to end trip, averaged\r\n          for all directions.\r\n          <p/>\r\n          <b>Travel time variability</b> is the 90th percentile end to end travel time minus the 10th percentile\r\n          travel time.  This measures how much extra travel time is needed for some trips.\r\n          \r\n        </div>\r\n      </Popover>\r\n\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  tableWrapper: {\r\n    overflowX: 'auto',\r\n  },\r\n}));\r\n\r\nfunction RouteTable(props) {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState('asc');\r\n  const [orderBy, setOrderBy] = React.useState('title');\r\n  const dense = true;\r\n  const theme = createMuiTheme();\r\n\r\n  const { graphParams, myFetchPrecomputedWaitAndTripData } = props;\r\n\r\n  useEffect(() => {\r\n    if (graphParams.agencyId && graphParams.date) {\r\n      myFetchPrecomputedWaitAndTripData(graphParams);\r\n    }\r\n  }, [graphParams, myFetchPrecomputedWaitAndTripData]); // like componentDidMount, this runs only on first render\r\n\r\n  function handleRequestSort(event, property) {\r\n    const isDesc = orderBy === property && order === 'desc';\r\n    setOrder(isDesc ? 'asc' : 'desc');\r\n    setOrderBy(property);\r\n  }\r\n\r\n  let routes = props.routes ? filterRoutes(props.routes) : [];\r\n  const spiderSelection = props.spiderSelection;\r\n\r\n  // filter the route list down to the spider routes if needed\r\n\r\n  if (spiderSelection && spiderSelection.length > 0) {\r\n    const spiderRouteIds = spiderSelection.map(spider => spider.routeId);\r\n    routes = routes.filter(myRoute => spiderRouteIds.includes(myRoute.id));\r\n  }\r\n\r\n  const allWaits = getAllWaits(props.waitTimesCache, props.graphParams, routes);\r\n  const allSpeeds = getAllSpeeds(\r\n    props.tripTimesCache,\r\n    props.graphParams,\r\n    routes,\r\n  );\r\n  const allScores = getAllScores(routes, allWaits, allSpeeds);\r\n\r\n  routes = routes.map(route => {\r\n    const waitObj = allWaits.find(\r\n      thisWaitObj => thisWaitObj.routeId === route.id,\r\n    );\r\n    const speedObj = allSpeeds.find(\r\n      thisSpeedObj => thisSpeedObj.routeId === route.id,\r\n    );\r\n    const scoreObj = allScores.find(\r\n      thisScoreObj => thisScoreObj.routeId === route.id,\r\n    );\r\n\r\n    return {\r\n      ...route,\r\n      wait: waitObj ? waitObj.wait : NaN,\r\n      longWait: waitObj ? waitObj.longWait : NaN,\r\n      speed: speedObj ? speedObj.speed : NaN,\r\n      variability: speedObj ? speedObj.variability : NaN,\r\n      totalScore: scoreObj ? scoreObj.totalScore : NaN,\r\n      medianWaitScore: scoreObj ? scoreObj.medianWaitScore : NaN,\r\n      longWaitScore: scoreObj ? scoreObj.longWaitScore : NaN,\r\n      speedScore: scoreObj ? scoreObj.speedScore : NaN,\r\n      travelVarianceScore: scoreObj ? scoreObj.travelVarianceScore : NaN,\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div>\r\n        <EnhancedTableToolbar numSelected={0} />\r\n        <div className={classes.tableWrapper}>\r\n          <Table aria-labelledby=\"tableTitle\" size={dense ? 'small' : 'medium'}>\r\n            <EnhancedTableHead\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={routes.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(\r\n                routes,\r\n                getSorting(order, orderBy),\r\n                order,\r\n                orderBy,\r\n              ).map((row, index) => {\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                return (\r\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.id}>\r\n                    <TableCell\r\n                      component=\"th\"\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      padding=\"none\"\r\n                    >\r\n                      <Navlink\r\n                        style={{color: theme.palette.primary.dark, textDecoration: 'none'}}\r\n                        to={{\r\n                          type: 'ROUTESCREEN',\r\n                          payload: {\r\n                            agencyId: row.agencyId,\r\n                            routeId: row.id,\r\n                            directionId: null,\r\n                            startStopId: null,\r\n                            endStopId: null,\r\n                          },\r\n                        }}\r\n                      >\r\n                        {row.title}\r\n                      </Navlink>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"right\"\r\n                      style={{\r\n                        color: quartileContrastColor(row.totalScore / 100),\r\n                        backgroundColor: quartileBackgroundColor(\r\n                          row.totalScore / 100,\r\n                        ),\r\n                      }}\r\n                    >\r\n                      {Number.isNaN(row.totalScore) ? '--' : row.totalScore}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"right\"\r\n                      padding=\"none\"\r\n                      style={{\r\n                        color: quartileTextColor(row.medianWaitScore / 100),\r\n                      }}\r\n                    >\r\n                      {Number.isNaN(row.wait) ? '--' : row.wait.toFixed(0)}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"right\"\r\n                      padding=\"none\"\r\n                      style={{\r\n                        color: quartileTextColor(row.longWaitScore / 100),\r\n                      }}\r\n                    >\r\n                      {Number.isNaN(row.longWait)\r\n                        ? '--'\r\n                        : <Fragment>\r\n                            {(row.longWait * 100).toFixed(0)}<font style={{color:\"#8a8a8a\"}}>%</font>\r\n                          </Fragment>\r\n                      }\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"right\"\r\n                      padding=\"none\"\r\n                      style={{\r\n                        color: quartileTextColor(row.speedScore / 100),\r\n                      }}\r\n                    >\r\n                      {Number.isNaN(row.speed) ? '--' : row.speed.toFixed(0)}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"right\"\r\n                      padding=\"none\"\r\n                      style={{\r\n                        color: quartileTextColor(row.travelVarianceScore / 100),\r\n                      }}\r\n                    >\r\n                      {Number.isNaN(row.variability)\r\n                        ? '--'\r\n                        : <Fragment>\r\n                            <font style={{color:\"#8a8a8a\"}}>{'\\u00b1'} </font>{row.variability.toFixed(0)}\r\n                          </Fragment>\r\n                      }\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  graphParams: state.routes.graphParams,\r\n  spiderSelection: state.routes.spiderSelection,\r\n  waitTimesCache: state.routes.waitTimesCache,\r\n  tripTimesCache: state.routes.tripTimesCache,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    myFetchPrecomputedWaitAndTripData: params =>\r\n      dispatch(fetchPrecomputedWaitAndTripData(params)),\r\n    handleGraphParams: params => dispatch(handleGraphParams(params)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(RouteTable);\r\n","import React from 'react';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { NavLink } from 'redux-first-router-link';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\n\r\nfunction SidebarButton() {\r\n  const [drawerOpen, setDrawer] = React.useState(false);\r\n\r\n  function toggleDrawer() {\r\n    setDrawer(!drawerOpen);\r\n  }\r\n\r\n  const activeStyle = {\r\n    fontWeight: 'bold',\r\n    color: '#3f51b5',\r\n    textDecoration: 'none',\r\n    cursor: 'default',\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <IconButton\r\n        color=\"inherit\"\r\n        aria-label=\"Open drawer\"\r\n        onClick={toggleDrawer}\r\n        edge=\"start\"\r\n      >\r\n        <MenuIcon />\r\n      </IconButton>\r\n      <Drawer variant=\"persistent\" anchor=\"left\" open={drawerOpen}>\r\n        <div style={{ width: 250 }}>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"Open drawer\"\r\n            onClick={toggleDrawer}\r\n            edge=\"start\"\r\n          >\r\n            <ChevronLeftIcon />\r\n          </IconButton>\r\n          <List>\r\n            <ListItem>\r\n              <NavLink\r\n                to={{ type: 'DASHBOARD' }}\r\n                activeStyle={activeStyle}\r\n                exact\r\n                strict\r\n              >\r\n                Dashboard\r\n              </NavLink>\r\n            </ListItem>\r\n            <ListItem>\r\n              <NavLink\r\n                to={{ type: 'ISOCHRONE' }}\r\n                activeStyle={activeStyle}\r\n                exact\r\n                strict\r\n              >\r\n                Isochrone\r\n              </NavLink>\r\n            </ListItem>\r\n            <ListItem>\r\n              <NavLink\r\n                to={{ type: 'DATADIAGNOSTIC' }}\r\n                activeStyle={activeStyle}\r\n                exact\r\n                strict\r\n              >\r\n                .{/* Semi-hidden data diagnostic link for developers */}\r\n              </NavLink>\r\n            </ListItem>\r\n          </List>\r\n          {/* Footer content */}\r\n          <List style={{\r\n            position: \"absolute\",\r\n            width: \"100%\",\r\n            bottom: 0,\r\n          }} >\r\n            <ListItem button component=\"a\" href=\"https://sites.google.com/view/opentransit\" target=\"_blank\">\r\n              <ListItemIcon>\r\n                <HomeIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"About\" />\r\n            </ListItem>\r\n          </List>\r\n        </div>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SidebarButton;\r\n","/* eslint-disable no-case-declarations */\r\nimport Moment from 'moment';\r\nimport { WEEKDAYS, WEEKENDS } from '../UIConstants';\r\n\r\nconst momentYesterday = Moment(Date.now() - 24 * 60 * 60 * 1000);\r\n\r\n// Make the initialState available to the rest of the app when resetting to default values.\r\nexport const initialState = {\r\n  routes: null,\r\n  spiderSelection: [],\r\n  graphParams: {\r\n    agencyId: null,\r\n    routeId: null,\r\n    directionId: null,\r\n    startStopId: null,\r\n    endStopId: null,\r\n    startTime: null,\r\n    endTime: null,\r\n    date: momentYesterday.format('YYYY-MM-DD'), // used where date ranges are not supported\r\n    startDate: momentYesterday.format('YYYY-MM-DD'),\r\n    // days of the week is an Object, where the keys are the day's values (0-6), and the value is true for enabled\r\n    daysOfTheWeek: { ...WEEKDAYS.reduce((map, obj) => { map[obj.value] = true; return map}, {}),\r\n                     ...WEEKENDS.reduce((map, obj) => { map[obj.value] = true; return map}, {})},\r\n  },\r\n  spiderLatLng: null,\r\n  tripTimesCache: {},\r\n  waitTimesCache: {},\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'RECEIVED_ROUTES':\r\n      return { ...state, routes: action.payload };\r\n    case 'RECEIVED_SPIDER_MAP_CLICK':\r\n      return {\r\n        ...state,\r\n        spiderSelection: action.payload[0],\r\n        spiderLatLng: action.payload[1],\r\n      };\r\n    case 'RECEIVED_GRAPH_PARAMS':\r\n      return {\r\n        ...state,\r\n        graphParams: Object.assign({}, state.graphParams, action.payload),\r\n      };\r\n    case 'ERROR_ROUTES':\r\n      return state;\r\n    case 'RECEIVED_PRECOMPUTED_TRIP_TIMES':\r\n      return {\r\n        ...state,\r\n        tripTimesCache: {\r\n          ...state.tripTimesCache,\r\n          [action.payload[1]]: action.payload[0],\r\n        },\r\n      }; // add new dictionary entry into tripTimesCache\r\n    case 'RECEIVED_PRECOMPUTED_WAIT_TIMES':\r\n      return {\r\n        ...state,\r\n        waitTimesCache: {\r\n          ...state.waitTimesCache,\r\n          [action.payload[1]]: action.payload[0],\r\n        },\r\n      }; // add new dictionary entry into waitTimesCache\r\n    case 'RECEIVED_ARRIVALS':\r\n      return {\r\n        ...state,\r\n        arrivals: { ...action.payload[0], date: action.payload[1] }, // augment with date to simplify detection of date change\r\n        arrivalsErr: null,\r\n      };\r\n    case 'ERROR_ARRIVALS':\r\n      return {\r\n        ...state,\r\n        arrivals: null,\r\n        arrivalsErr: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","/* eslint-disable no-case-declarations */\r\n\r\n/**\r\n * This reducer tracks the loading (is fetching) state of all asynchronous\r\n * data calls, as described in:\r\n * https://medium.com/stashaway-engineering/react-redux-tips-better-way-to-handle-loading-flags-in-your-reducers-afda42a804c6\r\n *\r\n * The action names must follow this pattern:\r\n *\r\n * - REQUEST_XXX\r\n * - RECEIVED_XXX\r\n * - ERROR_XXX\r\n *\r\n * where XXX is something like GRAPH_DATA.\r\n *\r\n * Then state.loading.GRAPH_DATA will be true if the REQUEST was the last action and\r\n * false otherwise.\r\n *\r\n */\r\nexport default (state = {}, action) => {\r\n\r\n  const { type } = action;\r\n  const matches = /(REQUEST|RECEIVED|ERROR)_(.*)/.exec(type);\r\n\r\n  // not a REQUEST_* / RECEIVED_* / FAILURE_* action, so we ignore them\r\n\r\n  if (!matches) return state;\r\n\r\n  const [, requestState, requestName] = matches;\r\n  return {\r\n    ...state,\r\n    // Store whether a request is happening at the moment or not\r\n    // e.g. will be true when receiving REQUEST_GRAPH_DATA\r\n    //      and false when receiving RECEIVED_GRAPH_DATA / ERROR_GRAPH_DATA\r\n    [requestName]: requestState === 'REQUEST',\r\n  };\r\n};\r\n\r\n/**\r\n * Selector function returnig whether a loading indicator is needed.\r\n * This is a simplistic function that returns true if anything is being\r\n * fetched.  It could be enhanced to accept an argument specifying which\r\n * kinds of requests to return true for.\r\n *\r\n * @param state App state passed in via mapStateToProps\r\n * @returns Whether any loading is going on\r\n */\r\nexport function isLoadingRequest(state) {\r\n  const isLoading = Object.keys(state.loading).reduce(\r\n    (accumulator, currentValue) => accumulator || state.loading[currentValue],\r\n    false);\r\n  return isLoading;\r\n}\r\n","import React, { useState, Fragment } from 'react';\r\nimport Moment from 'moment';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';      \r\nimport Divider from '@material-ui/core/Divider';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport { connect } from 'react-redux';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport Select from '@material-ui/core/Select';\r\nimport { List, ListItem } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport InfoIcon from '@material-ui/icons/InfoOutlined';\r\n\r\nimport {\r\n  TIME_RANGES, TIME_RANGE_ALL_DAY, DATE_RANGES,\r\n  MAX_DATE_RANGE, WEEKDAYS, WEEKENDS\r\n} from '../UIConstants';\r\nimport { initialState } from '../reducers/routesReducer';\r\nimport { isLoadingRequest } from '../reducers/loadingReducer';\r\nimport { handleGraphParams } from '../actions';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  button: {\r\n    textTransform: 'none',\r\n    display: 'flex',\r\n    justifyContent: 'flex-start',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(12),\r\n    color: theme.palette.text.secondary,\r\n    textAlign: 'left',\r\n  },\r\n  column: {\r\n    flexGrow: '1',\r\n  },\r\n  nowrap: {\r\n    whiteSpace: 'nowrap',\r\n  },\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  formControl: {\r\n    leftMargin: theme.spacing(1),\r\n    rightMargin: theme.spacing(1),\r\n    minWidth: 240,\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n  popover: {\r\n    padding: theme.spacing(2),\r\n    maxWidth: 400,\r\n  },\r\n  \r\n}));\r\n\r\n/**\r\n * Displays the current date and time selections and an \"expand\" icon as\r\n * a large button.  Clicking the button reveals a Popper with a date and\r\n * time picker.\r\n *\r\n * This button is meant to appear on every screen of the UI, currently\r\n * at the right end of the app bar.\r\n *\r\n * @param {any} props\r\n */\r\nfunction DateTimePanel(props) {\r\n  const { graphParams, dateRangeSupported } = props;\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [infoAnchorEl, setInfoAnchorEl] = useState(null);\r\n  const maxDate = Moment(Date.now()).format('YYYY-MM-DD');\r\n  \r\n  function handleClick(event) {\r\n    setAnchorEl(event.currentTarget);\r\n  }\r\n\r\n  function handleClose() {\r\n    setAnchorEl(null);\r\n  }\r\n\r\n  function handleInfoClick(event) {\r\n    setInfoAnchorEl(event.currentTarget);\r\n  }\r\n\r\n  function handleInfoClose() {\r\n    setInfoAnchorEl(null);\r\n  }\r\n\r\n  function handleReset() {\r\n    const initialParams = initialState.graphParams;\r\n    props.handleGraphParams({\r\n      date: initialParams.date,\r\n      startTime: initialParams.startTime,\r\n      endTime: initialParams.endTime,\r\n      daysBack: initialParams.daysBack,\r\n      startDate: initialParams.date,\r\n      daysOfTheWeek: initialParams.daysOfTheWeek,\r\n    });\r\n    handleClose(); // this forces the native date picker to reset, otherwise it doesn't stay in sync\r\n  }\r\n\r\n  /**\r\n   * convert yyyy/mm/dd to mm/dd/yyyy\r\n   */\r\n  function convertDate(ymdString) {\r\n    const date = new Date(ymdString);\r\n    return `${(date.getUTCMonth() + 1).toString().padStart(2, '0')}/${date\r\n      .getUTCDate()\r\n      .toString()\r\n      .padStart(2, '0')}/${date.getUTCFullYear()}`;\r\n  }\r\n\r\n  // convert the state's current time range to a string or the sentinel value\r\n  const timeRange =\r\n    graphParams.startTime && graphParams.endTime\r\n      ? `${graphParams.startTime}-${graphParams.endTime}`\r\n      : TIME_RANGE_ALL_DAY;\r\n\r\n  // these are the read-only representations of the date and time range\r\n  let dateLabel = convertDate(graphParams.date);\r\n  let rangeInfo = null;\r\n  \r\n  //\r\n  // If a date range is set, either update the date label to the full\r\n  // range if we support it, or else show an info icon that explains\r\n  // that we are only showing one day's data.\r\n  //\r\n  \r\n  if (graphParams.startDate !== graphParams.date) {\r\n    if (dateRangeSupported) {\r\n\r\n      dateLabel = convertDate(graphParams.startDate) + ' - ' + dateLabel;\r\n\r\n    } else {\r\n      \r\n      rangeInfo =\r\n        <Fragment>\r\n          <IconButton size=\"small\" color=\"inherit\" onClick={handleInfoClick}>\r\n            <InfoIcon fontSize=\"small\" />\r\n          </IconButton>\r\n          <Popover\r\n            open={Boolean(infoAnchorEl)}\r\n            anchorEl={infoAnchorEl}\r\n            onClose={handleInfoClose}\r\n            anchorOrigin={{\r\n              vertical: 'bottom',\r\n              horizontal: 'center',\r\n            }}\r\n            transformOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'center',\r\n            }}\r\n          >\r\n            <div className={classes.popover}>Date ranges are implemented for\r\n            Dashboard statistics when a route, direction, and stops are selected.\r\n            Currently showing data for one day.</div>\r\n          </Popover>          \r\n        </Fragment>\r\n    }\r\n  }\r\n\r\n  const timeLabel = TIME_RANGES.find(range => range.value === timeRange)\r\n    .shortLabel;\r\n\r\n  /**\r\n   * Handler that takes the time range as a string and sets\r\n   * the start and end time state.\r\n   *\r\n   * @param {any} myTimeRange\r\n   */\r\n  const setTimeRange = myTimeRange => {\r\n    if (myTimeRange.target.value === TIME_RANGE_ALL_DAY) {\r\n      props.handleGraphParams({ startTime: null, endTime: null });\r\n    } else {\r\n      const timeRangeParts = myTimeRange.target.value.split('-');\r\n      props.handleGraphParams({\r\n        startTime: timeRangeParts[0],\r\n        endTime: timeRangeParts[1],\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handler that updates the (end) date string in the state.\r\n   * Also keeps startDate no later than date.\r\n   *\r\n   * @param {any} myDate\r\n   */\r\n  const setDate = myDate => {\r\n    const newDate = myDate.target.value;\r\n    if (!newDate) {\r\n      // ignore empty date and leave at current value\r\n    } else {\r\n      const newMoment = Moment(newDate);\r\n      const startMoment = Moment(graphParams.startDate);\r\n      \r\n      const payload = {\r\n        date: newDate\r\n      };      \r\n      \r\n      if (newMoment.isBefore(graphParams.startDate)) {\r\n        payload.startDate = newDate; \r\n      } else if (newMoment.diff(startMoment, 'days') > MAX_DATE_RANGE) {\r\n        payload.startDate = newMoment.subtract(MAX_DATE_RANGE, 'days').format('YYYY-MM-DD');\r\n      }\r\n      props.handleGraphParams(payload);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Handler that updates the start date string in the state.\r\n   *\r\n   * @param {any} myDate\r\n   */\r\n  const setStartDate = myDate => {\r\n    if (!myDate.target.value) {\r\n      // ignore empty date and leave at current value\r\n    } else {\r\n      props.handleGraphParams({\r\n        startDate: myDate.target.value,\r\n      });\r\n    }\r\n  };\r\n\r\n  const setDateRange = daysBack => {\r\n    const initialParams = initialState.graphParams;\r\n    const date = initialParams.date;\r\n    const startMoment = Moment(date).subtract(daysBack - 1, 'days'); // include end date\r\n    \r\n    props.handleGraphParams({\r\n      date: date,\r\n      startDate: startMoment.format('YYYY-MM-DD'),\r\n    });\r\n\r\n    // The GraphQL api takes a list of dates, which are generated just before\r\n    // calling the API.\r\n  };\r\n\r\n  const handleDayChange = event => {\r\n    const day = event.target.value;\r\n    const newDaysOfTheWeek = { ...graphParams.daysOfTheWeek };\r\n    newDaysOfTheWeek[day] = event.target.checked;\r\n    props.handleGraphParams({\r\n      daysOfTheWeek: newDaysOfTheWeek,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Bulk toggle.\r\n   */\r\n  const toggleDays = event => {\r\n    const what = event.target.value === 'weekdays' ? WEEKDAYS : WEEKENDS;\r\n\r\n    const newDaysOfTheWeek = { ...graphParams.daysOfTheWeek };\r\n\r\n    // If all false -> set all to true; some false/true -> set all true; all true -> set all false;\r\n    // That is, if all true, set to all false, otherwise set to all true.\r\n\r\n    const newValue = !allTrue(newDaysOfTheWeek, what);\r\n\r\n    for (let i = 0; i < what.length; i++) {\r\n      newDaysOfTheWeek[what[i].value] = newValue;\r\n    }\r\n\r\n    props.handleGraphParams({\r\n      daysOfTheWeek: newDaysOfTheWeek,\r\n    });\r\n  }\r\n\r\n  const allFalse = (dictionary, array) => {\r\n    for (let i = 0; i < array.length; i++) {\r\n      if (dictionary[array[i].value]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const allTrue = (dictionary, array) => {\r\n    for (let i = 0; i < array.length; i++) {\r\n      if (!dictionary[array[i].value]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const open = Boolean(anchorEl);\r\n  const id = open ? 'simple-popover' : undefined;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n    \r\n      { props.isLoading\r\n        ?\r\n          <Box p={1}>\r\n            <CircularProgress\r\n              variant='indeterminate'\r\n              disableShrink\r\n              style={{color: 'white'}}\r\n              size={24}\r\n            />\r\n          </Box>\r\n        : null\r\n      }      \r\n\r\n      { rangeInfo }\r\n      <Button\r\n        variant=\"contained\"\r\n        className={classes.button}\r\n        onClick={handleClick}\r\n      >\r\n        <div className={classes.nowrap}>\r\n          <Typography className={classes.heading} display=\"inline\">\r\n            {dateLabel}&nbsp;\r\n          </Typography>\r\n          <Typography className={classes.secondaryHeading} display=\"inline\">\r\n            {timeLabel}\r\n            <ExpandMoreIcon />\r\n          </Typography>\r\n        </div>\r\n      </Button>\r\n\r\n      <Popover\r\n        id={id}\r\n        open={open}\r\n        anchorEl={anchorEl}\r\n        onClose={handleClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'right',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        }}\r\n      >\r\n        <IconButton\r\n          size=\"small\"\r\n          aria-label=\"close\"\r\n          className={classes.closeButton}\r\n          onClick={handleClose}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n\r\n        <List style={{ color: 'black', marginTop: 32 }}>\r\n        \r\n            <ListItem>\r\n              <FormControl className={classes.formControl}>\r\n                <TextField\r\n                  id=\"startDate\"\r\n                  label=\"Start Date\"\r\n                  type=\"date\"\r\n                  value={graphParams.startDate}\r\n                  InputProps={{\r\n                    inputProps: {\r\n                      max: graphParams.date,\r\n                      min: Moment(graphParams.date).subtract(MAX_DATE_RANGE, 'days').format('YYYY-MM-DD'),\r\n                    },\r\n                  }}\r\n                  className={classes.textField}\r\n                  InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                  onChange={setStartDate}\r\n                />\r\n              </FormControl>\r\n            </ListItem>\r\n        \r\n          <ListItem>\r\n            <FormControl className={classes.formControl}>\r\n              <TextField\r\n                id=\"date\"\r\n                label=\"End Date\"\r\n                type=\"date\"\r\n                value={graphParams.date}\r\n                InputProps={{\r\n                  inputProps: {\r\n                    max: maxDate,\r\n                  },\r\n                }}\r\n                className={classes.textField}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                onChange={setDate}\r\n              />\r\n            </FormControl>\r\n          </ListItem>\r\n\r\n          <ListItem>\r\n            <Grid container style={{maxWidth:250}}>\r\n                {DATE_RANGES.map(range => (\r\n                  \r\n                  <Grid item xs={6} key = {range.value}>\r\n                  <Button\r\n                    key={range.value}\r\n                    onClick={ () => { setDateRange(range.value) } }\r\n                  >\r\n                  {range.label}\r\n                  </Button>\r\n                  </Grid>\r\n\r\n                ))}\r\n            </Grid>\r\n          </ListItem>\r\n\r\n\r\n          <ListItem>\r\n            <FormControl component=\"fieldset\" className={classes.formControl}>\r\n              <FormLabel component=\"legend\" className={classes.secondaryHeading}>Days of the Week</FormLabel>\r\n\r\n              <Grid container>\r\n                <Grid item>\r\n                  <FormGroup>\r\n                    <FormControlLabel\r\n                      control={<Checkbox value=\"weekdays\"\r\n                        checked={!allFalse(graphParams.daysOfTheWeek, WEEKDAYS)}\r\n                        indeterminate={!allFalse(graphParams.daysOfTheWeek, WEEKDAYS) &&\r\n                          !allTrue(graphParams.daysOfTheWeek, WEEKDAYS)}\r\n                        onChange={toggleDays} />}\r\n                      label=\"Weekdays\"\r\n                    />\r\n\r\n                    <Divider variant=\"middle\" style={{ marginLeft: 0 } /* divider with a right margin */}/>\r\n\r\n                    {WEEKDAYS.map(day =>\r\n                      <FormControlLabel\r\n                        control={<Checkbox checked={graphParams.daysOfTheWeek[day.value]} onChange={handleDayChange} value={day.value} />}\r\n                        key={day.value}\r\n                        label={day.label}\r\n                      />)}\r\n                  </FormGroup>\r\n                </Grid>\r\n                <Grid item>\r\n                  <FormGroup>\r\n\r\n                    <FormControlLabel\r\n                      control={<Checkbox value=\"weekends\"\r\n                        checked={!allFalse(graphParams.daysOfTheWeek, WEEKENDS)}\r\n                        indeterminate={!allFalse(graphParams.daysOfTheWeek, WEEKENDS) &&\r\n                          !allTrue(graphParams.daysOfTheWeek, WEEKENDS)}\r\n                        onChange={toggleDays} />}\r\n                      label=\"Weekends\"\r\n                    />\r\n\r\n                    <Divider variant=\"middle\" style={{ marginLeft: 0 } /* divider with a right margin */}/>\r\n\r\n                    {WEEKENDS.map(day =>\r\n                      <FormControlLabel\r\n                        control={<Checkbox checked={graphParams.daysOfTheWeek[day.value]} onChange={handleDayChange} value={day.value} />}\r\n                        key={day.value}\r\n                        label={day.label}\r\n                      />)}\r\n                  </FormGroup>\r\n\r\n                </Grid>\r\n              </Grid>\r\n            </FormControl>\r\n\r\n          </ListItem>\r\n\r\n          <ListItem>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel htmlFor=\"time-helper\">Time Range</InputLabel>\r\n              <Select\r\n                value={timeRange}\r\n                onChange={setTimeRange}\r\n                input={<Input name=\"time_range\" id=\"time_range\" />}\r\n              >\r\n                {TIME_RANGES.map(range => (\r\n                  <MenuItem value={range.value} key={range.value}>\r\n                    {range.shortLabel}\r\n                    {range.restOfLabel}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </ListItem>\r\n          <ListItem>\r\n            <Button onClick={handleReset}>Reset</Button>\r\n          </ListItem>\r\n        </List>\r\n      </Popover>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  graphParams: state.routes.graphParams,\r\n  isLoading: isLoadingRequest(state), \r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    handleGraphParams: params => dispatch(handleGraphParams(params)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(DateTimePanel);\r\n","import React, { useEffect } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport AppBar from '@material-ui/core/AppBar';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { Agencies } from '../config';\r\nimport MapSpider from '../components/MapSpider';\r\nimport RouteTable from '../components/RouteTable';\r\nimport SidebarButton from '../components/SidebarButton';\r\nimport DateTimePanel from '../components/DateTimePanel';\r\n\r\nimport { fetchRoutes, handleGraphParams } from '../actions';\r\n\r\nfunction Dashboard(props) {\r\n  const { routes, myFetchRoutes, myHandleGraphParams } = props;\r\n\r\n  // for now, only supports 1 agency at a time.\r\n  // todo: support multiple agencies on one map\r\n  const agency = Agencies[0];\r\n\r\n  useEffect(() => {\r\n    myHandleGraphParams({agencyId: agency.id}); // temporary hack, probably should remove once frontend can show routes from multiple agencies at once\r\n\r\n    if (!routes) {\r\n      myFetchRoutes({agencyId: agency.id});\r\n    }\r\n  }, [routes, myFetchRoutes, myHandleGraphParams, agency]); // like componentDidMount, this runs only on first render\r\n\r\n  return (\r\n    <div className=\"flex-screen\">\r\n      <AppBar position=\"relative\">\r\n        <Toolbar>\r\n          <SidebarButton />\r\n          <div className=\"page-title\">{agency.title}</div>\r\n          <DateTimePanel />\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Grid container spacing={0}>\r\n        {/* Using spacing causes horizontal scrolling, see https://material-ui.com/components/grid/#negative-margin */}\r\n        <Grid item xs={12} sm={6}>\r\n          {/* map and table are both full width for 640px windows or smaller, else half width */}\r\n          <MapSpider />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} style={{ padding: 12 }}>\r\n          {/* Doing the spacing between Grid items ourselves.  See previous comment. */}\r\n          <RouteTable routes={routes} />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  routes: state.routes.routes,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  myFetchRoutes: props => dispatch(fetchRoutes(props)),\r\n  myHandleGraphParams: props => dispatch(handleGraphParams(props)),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(Dashboard);\r\n","/**\r\n * Helper functions for working with graph data.\r\n */\r\n\r\n/**\r\n * Helper method to get a specific percentile out of histogram graph data\r\n * where percentile is 0-100.\r\n */\r\nexport function getPercentileValue(graphData, percentile) {\r\n  if (!graphData.percentiles) {\r\n    return null;\r\n  }\r\n  const bin = graphData.percentiles.find(x => x.percentile === percentile);\r\n  if (bin) {\r\n    return bin.value;\r\n  }\r\n  return 0;\r\n}\r\n","import React, { Component } from 'react';\r\nimport { FormControl, FormControlLabel, Radio } from '@material-ui/core';\r\nimport {\r\n  XYPlot,\r\n  HorizontalGridLines,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalBarSeries,\r\n  ChartLabel,\r\n  Crosshair,\r\n} from 'react-vis';\r\nimport DiscreteColorLegend from 'react-vis/dist/legends/discrete-color-legend';\r\nimport { getPercentileValue } from '../helpers/graphData';\r\nimport {\r\n  CHART_COLORS,\r\n  PLANNING_PERCENTILE,\r\n  REACT_VIS_CROSSHAIR_NO_LINE,\r\n} from '../UIConstants';\r\nimport '../../node_modules/react-vis/dist/style.css';\r\n\r\n/**\r\n * Bar chart of average and planning percentile wait and time across the day.\r\n */\r\nclass InfoIntervalsOfDay extends Component {\r\n  static AVERAGE_TIME = 'average_time';\r\n\r\n  static PLANNING_TIME = 'planning_time';\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      selectedOption: InfoIntervalsOfDay.AVERAGE_TIME, // radio button starts on average time\r\n      crosshairValues: [], // tooltip starts out empty\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Event handler for radio buttons\r\n   * @param {changeEvent} The change event on the radio buttons.\r\n   * @private\r\n   */\r\n  handleOptionChange = changeEvent => {\r\n    this.setState({\r\n      selectedOption: changeEvent.target.value,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Event handler for onMouseLeave.\r\n   * @private\r\n   */\r\n  onMouseLeave = () => {\r\n    this.setState({ crosshairValues: [] });\r\n  };\r\n\r\n  /**\r\n   * Event handler for onNearestX.\r\n   * @param {Object} value Selected value.\r\n   * @param {index} index Index of the value in the data array.\r\n   * @private\r\n   */\r\n  onNearestX = (_value, { index }) => {\r\n    this.setState({\r\n      crosshairValues: [this.waitData[index], this.tripData[index]],\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Returns a mapping function for creating a react-vis XYPlot data series out of interval data.\r\n   * Example of interval data is shown at end of this file.\r\n   * Mapping function is for either wait time or trip time, and for either average or planning percentile time.\r\n   *\r\n   * It's possible that an interval will have null wait/travel times due to lack of data (no vehicles\r\n   * running in that interval), in which case we replace with zero values (best effort).\r\n   *\r\n   * @param {intervalField} One of wait_times or travel_times.\r\n   */\r\n  mapInterval(intervalField) {\r\n    return interval => {\r\n      let y = 0;\r\n\r\n      if (interval[intervalField] != null) {\r\n        if (this.state.selectedOption === InfoIntervalsOfDay.AVERAGE_TIME) {\r\n          y = getPercentileValue(interval[intervalField], 50);\r\n        } else {\r\n          y = getPercentileValue(interval[intervalField], PLANNING_PERCENTILE);\r\n        }\r\n      }\r\n\r\n      if (y === undefined) {\r\n        y = 0;\r\n      }\r\n\r\n      return {\r\n        x: `${interval.startTime} - ${interval.endTime}`,\r\n        y,\r\n      };\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { intervalData, intervalError } = this.props;\r\n\r\n    const intervals = intervalData;\r\n    this.waitData = intervals\r\n      ? intervals.map(this.mapInterval('waitTimes'))\r\n      : null;\r\n    this.tripData = intervals\r\n      ? intervals.map(this.mapInterval('tripTimes'))\r\n      : null;\r\n\r\n    const legendItems = [\r\n      { title: 'Travel time', color: CHART_COLORS[1], strokeWidth: 10 },\r\n      { title: 'Wait time', color: CHART_COLORS[0], strokeWidth: 10 },\r\n    ];\r\n\r\n    return (\r\n      <div>\r\n        {intervals ? (\r\n          <div>\r\n            <FormControl>\r\n              <div className=\"controls\">\r\n                <FormControlLabel\r\n                  control={\r\n                    <Radio\r\n                      id=\"average_time\"\r\n                      type=\"radio\"\r\n                      value={InfoIntervalsOfDay.AVERAGE_TIME}\r\n                      checked={\r\n                        this.state.selectedOption ===\r\n                        InfoIntervalsOfDay.AVERAGE_TIME\r\n                      }\r\n                      onChange={this.handleOptionChange}\r\n                    />\r\n                  }\r\n                  label=\"Median\"\r\n                />\r\n\r\n                <FormControlLabel\r\n                  control={\r\n                    <Radio\r\n                      id=\"planning_time\"\r\n                      type=\"radio\"\r\n                      value={InfoIntervalsOfDay.PLANNING_TIME}\r\n                      checked={\r\n                        this.state.selectedOption ===\r\n                        InfoIntervalsOfDay.PLANNING_TIME\r\n                      }\r\n                      onChange={this.handleOptionChange}\r\n                    />\r\n                  }\r\n                  label={`Planning (${PLANNING_PERCENTILE}th percentile)`}\r\n                />\r\n              </div>\r\n            </FormControl>\r\n\r\n            <XYPlot\r\n              xType=\"ordinal\"\r\n              height={300}\r\n              width={400}\r\n              stackBy=\"y\"\r\n              onMouseLeave={this.onMouseLeave}\r\n            >\r\n              <HorizontalGridLines />\r\n              <XAxis />\r\n              <YAxis hideLine />\r\n\r\n              <VerticalBarSeries\r\n                data={this.waitData}\r\n                color={CHART_COLORS[0]}\r\n                onNearestX={this.onNearestX}\r\n              />\r\n              <VerticalBarSeries data={this.tripData} color={CHART_COLORS[1]} />\r\n\r\n              <ChartLabel\r\n                text=\"minutes\"\r\n                className=\"alt-y-label\"\r\n                includeMargin={false}\r\n                xPercent={0.06}\r\n                yPercent={0.06}\r\n                style={{\r\n                  transform: 'rotate(-90)',\r\n                  textAnchor: 'end',\r\n                }}\r\n              />\r\n\r\n              {this.state.crosshairValues.length > 0 && (\r\n                <Crosshair\r\n                  values={this.state.crosshairValues}\r\n                  style={REACT_VIS_CROSSHAIR_NO_LINE}\r\n                >\r\n                  <div className=\"rv-crosshair__inner__content\">\r\n                    <p>\r\n                      Onboard time:{' '}\r\n                      {Math.round(this.state.crosshairValues[1].y)}\r\n                    </p>\r\n                    <p>\r\n                      Wait time: {Math.round(this.state.crosshairValues[0].y)}\r\n                    </p>\r\n                  </div>\r\n                </Crosshair>\r\n              )}\r\n            </XYPlot>\r\n            <DiscreteColorLegend\r\n              orientation=\"horizontal\"\r\n              width={300}\r\n              items={legendItems}\r\n            />\r\n          </div>\r\n        ) : null}\r\n        <code>{intervalError || ''}</code>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default InfoIntervalsOfDay;\r\n","/**\r\n * Card for displaying one metric.\r\n */\r\n\r\nimport React, { Fragment, useState } from 'react';\r\n\r\nimport { Typography } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InfoIcon from '@material-ui/icons/InfoOutlined';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport Box from '@material-ui/core/Box';\r\nimport {\r\n  quartileBackgroundColor,\r\n  quartileContrastColor,\r\n} from '../helpers/routeCalculations';\r\n\r\n/**\r\n * Renders an \"nyc bus stats\" style summary of a route and direction.\r\n *\r\n * @param {any} props\r\n */\r\nexport default function InfoScoreCard(props) {\r\n  const {\r\n    grades,\r\n    gradeName,\r\n    hideRating,\r\n    title,\r\n    largeValue,\r\n    smallValue,\r\n    bottomContent,\r\n    popoverContent,\r\n  } = props;\r\n\r\n  const useStyles = makeStyles(theme => ({\r\n    popover: {\r\n      padding: theme.spacing(2),\r\n      maxWidth: 500,\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  function handleClick(event) {\r\n    setAnchorEl(event.currentTarget);\r\n  }\r\n\r\n  function handleClose() {\r\n    setAnchorEl(null);\r\n  }\r\n\r\n  const cardStyle = (myGrades, myGradeName) => {\r\n    return {\r\n      background: myGrades\r\n        ? quartileBackgroundColor(myGrades[myGradeName] / 100.0)\r\n        : 'gray',\r\n      color: myGrades\r\n        ? quartileContrastColor(myGrades[myGradeName] / 100.0)\r\n        : 'black',\r\n      margin: 4,\r\n    };\r\n  };\r\n\r\n  const rating = grades\r\n    ? Math.max(Math.round(grades[gradeName] / 10.0) / 2.0, 0.5)\r\n    : 0;\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid item xs component={Paper} style={cardStyle(grades, gradeName)}>\r\n        <Box\r\n          display=\"flex\"\r\n          flexDirection=\"column\"\r\n          justifyContent=\"flex-start\"\r\n          height=\"100%\"\r\n        >\r\n          <Typography variant=\"overline\">{title}</Typography>\r\n\r\n          <Box flexGrow={1}>\r\n            {' '}\r\n            {/* middle area takes all possible height */}\r\n            <Typography variant=\"h3\" display=\"inline\">\r\n              {largeValue}\r\n            </Typography>\r\n            <Typography variant=\"h5\" display=\"inline\">\r\n              {smallValue}\r\n            </Typography>\r\n            {hideRating ? null : (\r\n              <Rating readOnly size=\"small\" value={rating} precision={0.5} />\r\n            )}\r\n          </Box>\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"flex-end\"\r\n            pt={2}\r\n          >\r\n            {bottomContent}\r\n            <IconButton size=\"small\" onClick={handleClick}>\r\n              <InfoIcon fontSize=\"small\" />\r\n            </IconButton>\r\n          </Box>\r\n        </Box>\r\n      </Grid>\r\n\r\n      <Popover\r\n        open={Boolean(anchorEl)}\r\n        anchorEl={anchorEl}\r\n        onClose={handleClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'center',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'center',\r\n        }}\r\n      >\r\n        <div className={classes.popover}>{popoverContent}</div>\r\n      </Popover>\r\n    </Fragment>\r\n  );\r\n}\r\n","/**\r\n * New legend for explaining how scores are derived from metrics.\r\n */\r\n\r\nimport React from 'react';\r\n\r\nimport { Table, TableBody, TableCell, TableRow } from '@material-ui/core';\r\n\r\nimport {\r\n  quartileBackgroundColor,\r\n  quartileContrastColor,\r\n} from '../helpers/routeCalculations';\r\n\r\nexport default function InfoScoreLegend(props) {\r\n  const { rows } = props;\r\n\r\n  return (\r\n    <Table>\r\n      <TableBody>\r\n        {rows.map(row => {\r\n          return (\r\n            <TableRow key={row.value}>\r\n              <TableCell>{row.label}</TableCell>\r\n              <TableCell\r\n                align=\"right\"\r\n                style={{\r\n                  color: quartileContrastColor(row.value / 100),\r\n                  backgroundColor: quartileBackgroundColor(row.value / 100),\r\n                }}\r\n              >\r\n                {row.value}\r\n              </TableCell>\r\n            </TableRow>\r\n          );\r\n        })}\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n}\r\n","/**\r\n * Stop to stop trip summary component.\r\n */\r\n\r\nimport React, { Fragment, useState } from 'react';\r\n\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport {\r\n  milesBetween,\r\n  computeGrades,\r\n  metersToMiles,\r\n} from '../helpers/routeCalculations';\r\nimport { PLANNING_PERCENTILE, TENTH_PERCENTILE } from '../UIConstants';\r\nimport { getPercentileValue } from '../helpers/graphData';\r\nimport InfoScoreCard from './InfoScoreCard';\r\nimport InfoScoreLegend from './InfoScoreLegend';\r\nimport InfoIcon from '@material-ui/icons/InfoOutlined';\r\nimport StartStopIcon from '@material-ui/icons/DirectionsTransit';\r\nimport WatchLaterOutlinedIcon from '@material-ui/icons/WatchLaterOutlined';\r\n\r\n\r\n/**\r\n * Renders an \"nyc bus stats\" style summary of a route and direction.\r\n *\r\n * @param {any} props\r\n */\r\nexport default function InfoTripSummary(props) {\r\n  \r\n  const [typicalAnchorEl, setTypicalAnchorEl] = useState(null);\r\n  const [planningAnchorEl, setPlanningAnchorEl] = useState(null);\r\n\r\n  function handleTypicalClick(event) {\r\n    setTypicalAnchorEl(event.currentTarget);\r\n  }\r\n\r\n  function handleTypicalClose() {\r\n    setTypicalAnchorEl(null);\r\n  }\r\n\r\n  function handlePlanningClick(event) {\r\n    setPlanningAnchorEl(event.currentTarget);\r\n  }\r\n\r\n  function handlePlanningClose() {\r\n    setPlanningAnchorEl(null);\r\n  }\r\n  \r\n  const { graphData, graphParams, routes } = props;\r\n  const waitTimes = graphData ? graphData.waitTimes : null;\r\n  const tripTimes = graphData ? graphData.tripTimes : null;\r\n\r\n  const computeDistance = (myGraphParams, myRoutes) => {\r\n    let miles = 0;\r\n\r\n    if (myGraphParams && myGraphParams.endStopId) {\r\n      const directionId = myGraphParams.directionId;\r\n      const routeId = myGraphParams.routeId;\r\n\r\n      const route = myRoutes.find(thisRoute => thisRoute.id === routeId);\r\n      const directionInfo = route.directions.find(\r\n        dir => dir.id === directionId,\r\n      );\r\n\r\n      // if precomputed stop distance is available, use it\r\n\r\n      if (\r\n        directionInfo.stop_geometry[myGraphParams.startStopId] &&\r\n        directionInfo.stop_geometry[myGraphParams.endStopId]\r\n      ) {\r\n        const distance =\r\n          directionInfo.stop_geometry[myGraphParams.endStopId].distance -\r\n          directionInfo.stop_geometry[myGraphParams.startStopId].distance;\r\n        return metersToMiles(distance);\r\n      }\r\n\r\n      const startIndex = directionInfo.stops.indexOf(myGraphParams.startStopId);\r\n      const endIndex = directionInfo.stops.indexOf(myGraphParams.endStopId);\r\n\r\n      if (startIndex !== -1 && endIndex !== -1) {\r\n        for (let i = startIndex; i < endIndex; i++) {\r\n          const fromStopInfo = route.stops[directionInfo.stops[i]];\r\n          const toStopInfo = route.stops[directionInfo.stops[i + 1]];\r\n          miles += milesBetween(fromStopInfo, toStopInfo);\r\n        }\r\n      }\r\n    }\r\n\r\n    return miles;\r\n  };\r\n\r\n  const distance = routes ? computeDistance(graphParams, routes) : null;\r\n  const speed =\r\n    tripTimes && tripTimes.count > 0 && distance\r\n      ? distance / (tripTimes.avg / 60.0)\r\n      : 0; // convert avg trip time to hours for mph\r\n\r\n  let longWaitProbability = 0;\r\n  if (waitTimes && waitTimes.histogram) {\r\n    const reducer = (accumulator, currentValue) => {\r\n      const LONG_WAIT = 20; // histogram bins are in minutes\r\n      return currentValue.binStart >= LONG_WAIT\r\n        ? accumulator + currentValue.count\r\n        : accumulator;\r\n    };\r\n\r\n    longWaitProbability = waitTimes.histogram.reduce(reducer, 0) / 100;\r\n  }\r\n\r\n  let travelVariabilityTime = 0;\r\n  if (tripTimes) {\r\n    travelVariabilityTime =\r\n      (getPercentileValue(tripTimes, PLANNING_PERCENTILE) -\r\n      getPercentileValue(tripTimes, TENTH_PERCENTILE)) / 2.0;\r\n  }\r\n\r\n  const grades =\r\n    speed && waitTimes.median\r\n      ? computeGrades(\r\n          waitTimes.median,\r\n          longWaitProbability,\r\n          speed,\r\n          travelVariabilityTime,\r\n        )\r\n      : null;\r\n\r\n  let whyNoData = null;\r\n  if (!distance) {\r\n    whyNoData = 'Unable to determine distance between selected stops.';\r\n  } else if (!tripTimes || !tripTimes.count) {\r\n    whyNoData = 'No trip data between selected stops.';\r\n  } else if (!speed) {\r\n    whyNoData = 'Unable to determine speed between selected stops.';\r\n  } else if (!waitTimes.median) {\r\n    whyNoData = 'No median wait time available.';\r\n  }\r\n\r\n  const useStyles = makeStyles(theme => ({\r\n    uncolored: {\r\n      margin: theme.spacing(1),\r\n    },\r\n    popover: {\r\n      padding: theme.spacing(2),\r\n      maxWidth: 500,\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  const planningWait = Math.round(\r\n    getPercentileValue(waitTimes, PLANNING_PERCENTILE),\r\n  );\r\n  const planningTravel = Math.round(\r\n    getPercentileValue(tripTimes, PLANNING_PERCENTILE),\r\n  );\r\n  const travelVariability = Math.round(\r\n    (getPercentileValue(tripTimes, PLANNING_PERCENTILE) -      \r\n     getPercentileValue(tripTimes, TENTH_PERCENTILE)) / 2.0,\r\n  );\r\n\r\n  const typicalWait = Math.round(waitTimes.median);\r\n  const typicalTravel = Math.round(tripTimes.median); // note: can have NaN issues here due to lack of trip data between stops\r\n\r\n  const popoverContentTotalScore = grades ? (\r\n    <Fragment>\r\n      Trip score of {grades.totalScore} is the average of the following\r\n      subscores:\r\n      <Box pt={2}>\r\n        <Table>\r\n          <TableBody>\r\n            <TableRow>\r\n              <TableCell>Median wait</TableCell>\r\n              <TableCell align=\"right\">{grades.medianWaitScore}</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>Long wait probability</TableCell>\r\n              <TableCell align=\"right\">{grades.longWaitScore}</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>Speed for median trip</TableCell>\r\n              <TableCell align=\"right\"> {grades.speedScore}</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>Travel time variability</TableCell>\r\n              <TableCell align=\"right\"> {grades.travelVarianceScore}</TableCell>\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </Box>\r\n    </Fragment>\r\n  ) : null;\r\n\r\n  const popoverContentWait = grades ? (\r\n    <Fragment>\r\n      Median wait of {waitTimes.median.toFixed(1)} min gets a score of{' '}\r\n      {grades.medianWaitScore}.\r\n      <Box pt={2}>\r\n        <InfoScoreLegend\r\n          rows={[\r\n            { label: '5 min or less', value: 100 },\r\n            { label: '6.25 min', value: 75 },\r\n            { label: '7.5 min', value: 50 },\r\n            { label: '8.75', value: 25 },\r\n            { label: '10 min or more', value: 0 },\r\n          ]}\r\n        />\r\n      </Box>\r\n    </Fragment>\r\n  ) : null;\r\n\r\n  const popoverContentLongWait = grades ? (\r\n    <Fragment>\r\n      Long wait probability is the chance a rider has of a wait of twenty minutes or\r\n      longer after arriving randomly at the \"from\" stop. \r\n      Probability of{' '}\r\n      {(longWaitProbability * 100).toFixed(1) /* be more precise than card */}%\r\n      gets a score of {grades.longWaitScore}.\r\n      <Box pt={2}>\r\n        <InfoScoreLegend\r\n          rows={[\r\n            { label: '10% or less', value: 100 },\r\n            { label: '15.75%', value: 75 },\r\n            { label: '21.5%', value: 50 },\r\n            { label: '27.25%', value: 25 },\r\n            { label: '33% or more', value: 0 },\r\n          ]}\r\n        />\r\n      </Box>\r\n    </Fragment>\r\n  ) : null;\r\n\r\n  const popoverContentSpeed = grades ? (\r\n    <Fragment>\r\n      Speed for median trip of {speed.toFixed(1)}{' '}\r\n      mph gets a score of {grades.speedScore}.\r\n      <Box pt={2}>\r\n        <InfoScoreLegend\r\n          rows={[\r\n            { label: '10 mph or more', value: 100 },\r\n            { label: '8.75 mph', value: 75 },\r\n            { label: '7.5 mph', value: 50 },\r\n            { label: '6.25 mph', value: 25 },\r\n            { label: '5 mph or less', value: 0 },\r\n          ]}\r\n        />\r\n      </Box>\r\n    </Fragment>\r\n  ) : null;\r\n\r\n  const popoverContentTravelVariability = grades ? (\r\n    <Fragment>\r\n      Travel time variability is the 90th percentile travel time minus the 10th percentile\r\n      travel time.  This measures how much extra travel time is needed for some trips.\r\n      Variability of {'\\u00b1' + travelVariabilityTime.toFixed(1)} min gets a score of{' '}\r\n      {grades.travelVarianceScore}.\r\n      <Box pt={2}>\r\n        <InfoScoreLegend\r\n          rows={[\r\n            { label: '5 min or less', value: 100 },\r\n            { label: '6.25 min', value: 75 },\r\n            { label: '7.5 min', value: 50 },\r\n            { label: '8.75 min', value: 25 },\r\n            { label: '10 min or more', value: 0 },\r\n          ]}\r\n        />\r\n      </Box>\r\n    </Fragment>\r\n  ) : null;\r\n\r\n  return (\r\n    <Fragment>\r\n      <div style={{ padding: 8 }}>\r\n        {grades ? (\r\n          <Fragment>\r\n            <Grid container spacing={4}>\r\n              {/* spacing doesn't work exactly right here, just pads the Papers */}\r\n              <Grid item xs component={Paper} className={classes.uncolored}>\r\n                <Typography variant=\"overline\">Typical journey</Typography>\r\n                <br />\r\n\r\n                <Typography variant=\"h3\" display=\"inline\">\r\n                  {typicalWait + typicalTravel}\r\n                </Typography>\r\n                <Typography variant=\"h5\" display=\"inline\">\r\n                  &nbsp;min\r\n                </Typography>\r\n\r\n                <Box\r\n                  display=\"flex\"\r\n                  justifyContent=\"space-between\"\r\n                  alignItems=\"flex-end\"\r\n                  pt={2}\r\n                >\r\n                  <Typography variant=\"body1\">\r\n                    <WatchLaterOutlinedIcon fontSize=\"small\" style={{verticalAlign: 'sub'}} />&nbsp;\r\n                    {typicalWait} min\r\n                    <br/>\r\n                    <StartStopIcon fontSize=\"small\" style={{verticalAlign: 'sub'}} />&nbsp;\r\n                    {typicalTravel} min\r\n                  </Typography>\r\n                  <IconButton size=\"small\" onClick={handleTypicalClick}>\r\n                    <InfoIcon fontSize=\"small\" />\r\n                  </IconButton>\r\n                 </Box>\r\n              </Grid>\r\n              \r\n              <Grid item xs component={Paper} className={classes.uncolored}>\r\n                <Typography variant=\"overline\">Journey planning</Typography>\r\n                <br />\r\n\r\n                <Typography variant=\"h3\" display=\"inline\">\r\n                  {planningWait + planningTravel}\r\n                </Typography>\r\n                <Typography variant=\"h5\" display=\"inline\">\r\n                  &nbsp;min\r\n                </Typography>\r\n\r\n                <Box\r\n                  display=\"flex\"\r\n                  justifyContent=\"space-between\"\r\n                  alignItems=\"flex-end\"\r\n                  pt={2}\r\n                >\r\n                  <Typography variant=\"body1\">\r\n                    <WatchLaterOutlinedIcon fontSize=\"small\" style={{verticalAlign: 'sub'}} />&nbsp;\r\n                    {planningWait} min\r\n                    <br/> \r\n                    <StartStopIcon fontSize=\"small\" style={{verticalAlign: 'sub'}} />&nbsp;\r\n                    {planningTravel} min\r\n                  </Typography>\r\n                  <IconButton size=\"small\" onClick={handlePlanningClick}>\r\n                    <InfoIcon fontSize=\"small\" />\r\n                  </IconButton>\r\n                </Box>\r\n              </Grid>\r\n              <InfoScoreCard\r\n                grades={grades}\r\n                gradeName=\"totalScore\"\r\n                hideRating\r\n                title=\"Trip Score\"\r\n                largeValue={grades ? grades.totalScore : '--'}\r\n                smallValue={`/${grades ? grades.highestPossibleScore : '--'}`}\r\n                bottomContent=\"&nbsp;\"\r\n                popoverContent={popoverContentTotalScore}\r\n              />\r\n              <InfoScoreCard\r\n                grades={grades}\r\n                gradeName=\"medianWaitScore\"\r\n                title=\"Median Wait\"\r\n                largeValue={Math.round(waitTimes.median)}\r\n                smallValue=\"&nbsp;min\"\r\n                bottomContent=\"&nbsp;\"\r\n                popoverContent={popoverContentWait}\r\n              />\r\n              <InfoScoreCard\r\n                grades={grades}\r\n                gradeName=\"longWaitScore\"\r\n                title=\"Long Wait %\"\r\n                largeValue={Math.round(longWaitProbability * 100)}\r\n                smallValue=\"%\"\r\n                bottomContent={\r\n                  longWaitProbability > 0\r\n                    ? `1 time out of ${Math.round(1 / longWaitProbability)}`\r\n                    : ''\r\n                }\r\n                popoverContent={popoverContentLongWait}\r\n              />\r\n              <InfoScoreCard\r\n                grades={grades}\r\n                gradeName=\"speedScore\"\r\n                title=\"Median Trip Speed\"\r\n                largeValue={speed.toFixed(0)}\r\n                smallValue=\"&nbsp;mph\"\r\n                bottomContent={`${distance.toFixed(1)} miles`}\r\n                popoverContent={popoverContentSpeed}\r\n              />\r\n              <InfoScoreCard\r\n                grades={grades}\r\n                gradeName=\"travelVarianceScore\"\r\n                title=\"Travel Time Variability\"\r\n                largeValue={'\\u00b1' + travelVariability}\r\n                smallValue=\"&nbsp;min\"\r\n                bottomContent=\"&nbsp;\"\r\n                popoverContent={popoverContentTravelVariability}\r\n              />\r\n            </Grid>\r\n\r\n            <Popover\r\n              open={Boolean(typicalAnchorEl)}\r\n              anchorEl={typicalAnchorEl}\r\n              onClose={handleTypicalClose}\r\n              anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'center',\r\n              }}\r\n              transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'center',\r\n              }}\r\n            >\r\n              <div className={classes.popover}>This is the median wait time when a rider arrives\r\n              randomly at a stop or a rider starts checking predictions.  This is combined with the\r\n              median trip time.</div>\r\n            </Popover>\r\n\r\n            <Popover\r\n              open={Boolean(planningAnchorEl)}\r\n              anchorEl={planningAnchorEl}\r\n              onClose={handlePlanningClose}\r\n              anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'center',\r\n              }}\r\n              transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'center',\r\n              }}\r\n            >\r\n              <div className={classes.popover}>When planning to arrive by a specific time,\r\n                the 90th percentile wait time and 90th percentile travel time suggest how far\r\n                in advance to start checking predictions.  Walking time should also be added.</div>\r\n            </Popover>\r\n\r\n          </Fragment>\r\n        ) : (\r\n          `No trip summary (${whyNoData})`\r\n        )}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport {\r\n  XYPlot,\r\n  HorizontalGridLines,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalRectSeries,\r\n  ChartLabel,\r\n  Crosshair,\r\n} from 'react-vis';\r\nimport { AppBar, Box, Tab, Tabs, Typography } from '@material-ui/core';\r\nimport InfoIntervalsOfDay from './InfoIntervalsOfDay';\r\nimport InfoTripSummary from './InfoTripSummary';\r\nimport { CHART_COLORS, REACT_VIS_CROSSHAIR_NO_LINE } from '../UIConstants';\r\n\r\nfunction Info(props) {\r\n  const [crosshairValues, setCrosshairValues] = React.useState({});\r\n  const [tabValue, setTabValue] = React.useState(0);\r\n\r\n  const {\r\n    graphData,\r\n    graphError,\r\n    graphParams,\r\n    intervalData,\r\n    intervalError,\r\n    routes,\r\n  } = props;\r\n\r\n  const headways = graphData ? graphData.headways : null;\r\n  const waitTimes = graphData ? graphData.waitTimes : null;\r\n  const tripTimes = graphData ? graphData.tripTimes : null;\r\n\r\n  const headwayData =\r\n    headways && headways.histogram\r\n      ? headways.histogram.map(bin => ({\r\n          x0: bin.binStart,\r\n          x: bin.binEnd,\r\n          y: bin.count,\r\n        }))\r\n      : null;\r\n\r\n  const waitData =\r\n    waitTimes && waitTimes.histogram\r\n      ? waitTimes.histogram.map(bin => ({\r\n          x0: bin.binStart,\r\n          x: bin.binEnd,\r\n          y: bin.count,\r\n        }))\r\n      : null;\r\n\r\n  const tripData =\r\n    tripTimes && tripTimes.histogram\r\n      ? tripTimes.histogram.map(bin => ({\r\n          x0: bin.binStart,\r\n          x: bin.binEnd,\r\n          y: bin.count,\r\n        }))\r\n      : null;\r\n\r\n  /**\r\n   * Event handler for onMouseLeave.\r\n   * @private\r\n   */\r\n  function onMouseLeave() {\r\n    setCrosshairValues({});\r\n  }\r\n\r\n  /**\r\n   * Event handler for onNearestX.\r\n   * @param {Object} value Selected value.\r\n   * @param {index} index Index of the value in the data array.\r\n   * @private\r\n   */\r\n  function onNearestXHeadway(value, { index }) {\r\n    setCrosshairValues({ headway: [headwayData[index]] });\r\n  }\r\n\r\n  function onNearestXWaitTimes(value, { index }) {\r\n    setCrosshairValues({ wait: [waitData[index]] });\r\n  }\r\n\r\n  function onNearestXTripTimes(value, { index }) {\r\n    setCrosshairValues({ trip: [tripData[index]] });\r\n  }\r\n\r\n  function handleTabChange(event, newValue) {\r\n    setTabValue(newValue);\r\n  }\r\n\r\n  function a11yProps(index) {\r\n    return {\r\n      id: `simple-tab-${index}`,\r\n      'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n  }\r\n\r\n  const SUMMARY = 0;\r\n  const TIME_OF_DAY = 1;\r\n  const HEADWAYS = 2;\r\n  const WAITS = 3;\r\n  const TRIPS = 4;\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs\r\n          value={tabValue}\r\n          onChange={handleTabChange}\r\n          aria-label=\"tab bar\"\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"on\"\r\n        >\r\n          <Tab\r\n            style={{ minWidth: 72 }}\r\n            label=\"Summary\"\r\n            {...a11yProps(SUMMARY)}\r\n          />\r\n          <Tab\r\n            style={{ minWidth: 72 }}\r\n            label=\"Time of Day\"\r\n            {...a11yProps(TIME_OF_DAY)}\r\n          />\r\n          <Tab\r\n            style={{ minWidth: 72 }}\r\n            label=\"Headways\"\r\n            {...a11yProps(HEADWAYS)}\r\n          />\r\n          <Tab\r\n            style={{ minWidth: 72 }}\r\n            label=\"Wait Times\"\r\n            {...a11yProps(WAITS)}\r\n          />\r\n          <Tab\r\n            style={{ minWidth: 72 }}\r\n            label=\"Trip Times\"\r\n            {...a11yProps(TRIPS)}\r\n          />\r\n        </Tabs>\r\n      </AppBar>\r\n\r\n      {headways && routes ? (\r\n        <div>\r\n          <Box p={2} hidden={tabValue !== SUMMARY}>\r\n            <InfoTripSummary\r\n              graphData={graphData}\r\n              graphParams={graphParams}\r\n              routes={routes}\r\n            />\r\n          </Box>\r\n\r\n          <Box p={2} hidden={tabValue !== TIME_OF_DAY}>\r\n            <Typography variant=\"h5\" display=\"inline\">\r\n              Performance by Time of Day\r\n            </Typography>\r\n\r\n            <InfoIntervalsOfDay\r\n              intervalData={intervalData}\r\n              intervalError={intervalError}\r\n            />\r\n          </Box>\r\n\r\n          <Box p={2} hidden={tabValue !== HEADWAYS}>\r\n            <Typography variant=\"h5\" display=\"inline\">\r\n              Headways (Time Between Vehicles)\r\n            </Typography>\r\n            <p>\r\n              {headways.count + 1} arrivals, median headway{' '}\r\n              {Math.round(headways.median)} minutes, max headway{' '}\r\n              {Math.round(headways.max)} minutes\r\n            </p>\r\n            <XYPlot\r\n              xDomain={[0, Math.max(60, Math.round(headways.max) + 5)]}\r\n              height={200}\r\n              width={400}\r\n              onMouseLeave={onMouseLeave}\r\n            >\r\n              <HorizontalGridLines />\r\n              <XAxis />\r\n              <YAxis hideLine />\r\n\r\n              <VerticalRectSeries\r\n                data={headwayData}\r\n                onNearestX={onNearestXHeadway}\r\n                stroke=\"white\"\r\n                fill={CHART_COLORS[0]}\r\n                style={{ strokeWidth: 2 }}\r\n              />\r\n\r\n              <ChartLabel\r\n                text=\"arrivals\"\r\n                className=\"alt-y-label\"\r\n                includeMargin={false}\r\n                xPercent={0.06}\r\n                yPercent={0.06}\r\n                style={{\r\n                  transform: 'rotate(-90)',\r\n                  textAnchor: 'end',\r\n                }}\r\n              />\r\n\r\n              <ChartLabel\r\n                text=\"minutes\"\r\n                className=\"alt-x-label\"\r\n                includeMargin={false}\r\n                xPercent={0.9}\r\n                yPercent={0.94}\r\n              />\r\n\r\n              {crosshairValues.headway && (\r\n                <Crosshair\r\n                  values={crosshairValues.headway}\r\n                  style={REACT_VIS_CROSSHAIR_NO_LINE}\r\n                >\r\n                  <div className=\"rv-crosshair__inner__content\">\r\n                    Arrivals: {Math.round(crosshairValues.headway[0].y)}\r\n                  </div>\r\n                </Crosshair>\r\n              )}\r\n            </XYPlot>\r\n          </Box>\r\n        </div>\r\n      ) : null}\r\n\r\n      {waitTimes ? (\r\n        <Box p={2} hidden={tabValue !== WAITS}>\r\n          <Typography variant=\"h5\" display=\"inline\">\r\n            Wait Times\r\n          </Typography>\r\n          <p>\r\n            median wait time {Math.round(waitTimes.median)} minutes, max wait time{' '}\r\n            {Math.round(waitTimes.max)} minutes\r\n          </p>\r\n          <XYPlot\r\n            xDomain={[0, Math.max(60, Math.round(waitTimes.max) + 5)]}\r\n            height={200}\r\n            width={400}\r\n            onMouseLeave={onMouseLeave}\r\n          >\r\n            <HorizontalGridLines />\r\n            <XAxis />\r\n            <YAxis hideLine tickFormat={v => `${v}%`} />\r\n\r\n            <VerticalRectSeries\r\n              data={waitData}\r\n              onNearestX={onNearestXWaitTimes}\r\n              stroke=\"white\"\r\n              fill={CHART_COLORS[0]}\r\n              style={{ strokeWidth: 2 }}\r\n            />\r\n\r\n            <ChartLabel\r\n              text=\"chance\"\r\n              className=\"alt-y-label\"\r\n              includeMargin={false}\r\n              xPercent={0.06}\r\n              yPercent={0.06}\r\n              style={{\r\n                transform: 'rotate(-90)',\r\n                textAnchor: 'end',\r\n              }}\r\n            />\r\n\r\n            <ChartLabel\r\n              text=\"minutes\"\r\n              className=\"alt-x-label\"\r\n              includeMargin={false}\r\n              xPercent={0.9}\r\n              yPercent={0.94}\r\n            />\r\n\r\n            {crosshairValues.wait && (\r\n              <Crosshair\r\n                values={crosshairValues.wait}\r\n                style={REACT_VIS_CROSSHAIR_NO_LINE}\r\n              >\r\n                <div className=\"rv-crosshair__inner__content\">\r\n                  Chance: {Math.round(crosshairValues.wait[0].y)}%\r\n                </div>\r\n              </Crosshair>\r\n            )}\r\n          </XYPlot>\r\n        </Box>\r\n      ) : null}\r\n      {tripTimes ? (\r\n        <Box p={2} hidden={tabValue !== TRIPS}>\r\n          <Typography variant=\"h5\" display=\"inline\">\r\n            Trip Times\r\n          </Typography>\r\n          <p>\r\n            {tripTimes.count} trips, median {Math.round(tripTimes.median)}{' '}\r\n            minutes, max {Math.round(tripTimes.max)} minutes\r\n          </p>\r\n          <XYPlot\r\n            xDomain={[0, Math.max(60, Math.round(tripTimes.max) + 5)]}\r\n            height={200}\r\n            width={400}\r\n            onMouseLeave={onMouseLeave}\r\n          >\r\n            <HorizontalGridLines />\r\n            <XAxis />\r\n            <YAxis hideLine />\r\n\r\n            <VerticalRectSeries\r\n              data={tripData}\r\n              onNearestX={onNearestXTripTimes}\r\n              stroke=\"white\"\r\n              fill={CHART_COLORS[1]}\r\n              style={{ strokeWidth: 2 }}\r\n            />\r\n\r\n            <ChartLabel\r\n              text=\"trips\"\r\n              className=\"alt-y-label\"\r\n              includeMargin={false}\r\n              xPercent={0.06}\r\n              yPercent={0.06}\r\n              style={{\r\n                transform: 'rotate(-90)',\r\n                textAnchor: 'end',\r\n              }}\r\n            />\r\n\r\n            <ChartLabel\r\n              text=\"minutes\"\r\n              className=\"alt-x-label\"\r\n              includeMargin={false}\r\n              xPercent={0.9}\r\n              yPercent={0.94}\r\n            />\r\n\r\n            {crosshairValues.trip && (\r\n              <Crosshair\r\n                values={crosshairValues.trip}\r\n                style={REACT_VIS_CROSSHAIR_NO_LINE}\r\n              >\r\n                <div className=\"rv-crosshair__inner__content\">\r\n                  Trips: {Math.round(crosshairValues.trip[0].y)}\r\n                </div>\r\n              </Crosshair>\r\n            )}\r\n          </XYPlot>\r\n        </Box>\r\n      ) : null}\r\n\r\n      {graphError ? (\r\n        <Box p={2}>\r\n          <code>{graphError}</code>\r\n        </Box>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Info;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Map, TileLayer, Marker, Tooltip, Polyline } from 'react-leaflet';\r\nimport * as d3 from 'd3';\r\nimport L from 'leaflet';\r\nimport Control from 'react-leaflet-control';\r\nimport { DIRECTION, FROM_STOP, TO_STOP, Path } from '../routeUtil';\r\nimport { handleGraphParams } from '../actions';\r\nimport { getTripTimesFromStop } from '../helpers/precomputed';\r\nimport { getTripPoints, getDistanceInMiles } from '../helpers/mapGeometry';\r\nimport { Colors } from '../UIConstants';\r\nimport { Agencies } from '../config';\r\nimport StartStopIcon from '@material-ui/icons/DirectionsTransit';\r\nimport EndStopIcon from '@material-ui/icons/Flag';\r\nimport ReactDOMServer from 'react-dom/server';\r\n\r\nclass MapStops extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.agency = Agencies[0];\r\n\r\n    this.state = {\r\n      height: this.computeHeight(),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.boundUpdate = this.updateDimensions.bind(this);\r\n    window.addEventListener('resize', this.boundUpdate);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateDimensions.bind(this));\r\n  }\r\n\r\n  /**\r\n   * Helper method that draws one stop with svg graphics and/or Material UI icons.\r\n   *\r\n   * @param {Object} stop The stop info object for this stop.\r\n   * @param {Object} currentPosition Coordinates for this stop.\r\n   * @param {Number} rotation Number of degrees to rotate to point in the direction of travel.\r\n   * @param {Function} onClickHandler Method for handling mouse clicks.\r\n   * @param {Object} tooltip The react-leaflet Tooltip for this stop.\r\n   * @returns {Object} The react-leaflet Marker.\r\n   */\r\n  populateStop = (stop, IconType, currentPosition, rotation, onClickHandler, tooltip) => {\r\n\r\n    let icon = null;\r\n\r\n    if (IconType) {\r\n\r\n      // Given an IconType indicates start or end stop.  This is a white circle with a black icon,\r\n      // followed by the title of the stop.\r\n\r\n      icon = L.divIcon({\r\n        className: 'custom-icon', // this is needed to turn off the default icon styling (blank square)\r\n        iconSize: [240, 24],\r\n        iconAnchor: [12, 12], // centers icon over position, with text to the right\r\n        html:\r\n\r\n          `<svg width=\"24\" height=\"24\" viewBox=\"-10 -10 10 10\">` +\r\n\r\n          // this is a larger white circle\r\n\r\n          `<circle cx=\"-5\" cy=\"-5\" r=\"4.5\" fill=\"white\" stroke=\"${Colors.INDIGO}\" stroke-width=\"0.75\"/>` +\r\n\r\n          // this is the passed in icon, which we ask React to render as html (becomes an svg object)\r\n\r\n          `</svg><div style=\"position:relative; top: -26px; left:2px\">` +\r\n          ReactDOMServer.renderToString(<IconType style={{color:Colors.INDIGO}} fontSize={'small'}/>) +\r\n         `</div>` +\r\n\r\n         // this is the stop title with a text shadow to outline it in white\r\n\r\n         `<div style=\"position:relative; top:-50px; left:25px; font-weight:bold; color:` + Colors.INDIGO + `; ` +\r\n         `text-shadow: -1px 1px 0 #fff,` +\r\n         `1px 1px 0 #fff,` +\r\n         `1px -1px 0 #fff,` +\r\n         `-1px -1px 0 #fff;\">${stop.title}</div>`,\r\n      });\r\n\r\n    } else {\r\n\r\n      // If not given an IconType, this is just a regular stop.  This is a white circle with an\r\n      // svg \"v\" shape rotated by the given rotation value.\r\n\r\n      icon = L.divIcon({\r\n        className: `id${stop.sid}`, // this is needed to turn off the default icon styling (blank square)\r\n        iconSize: [20, 20],\r\n        iconAnchor: [10, 10], // centers icon over position, with text to the right\r\n        html:\r\n          `<svg viewBox=\"-10 -10 10 10\"><g transform=\"rotate(${rotation} -5 -5)\">` +\r\n\r\n          // First we draw a white circle\r\n\r\n          `<circle cx=\"-5\" cy=\"-5\" r=\"3\" fill=\"white\" stroke=\"${Colors.INDIGO}\" stroke-width=\"0.75\"/>` +\r\n\r\n          // Then the \"v\" shape point to zero degrees (east).  The entire parent svg is rotated.\r\n\r\n          `<polyline points=\"-5.5,-6 -4,-5 -5.5,-4\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke=\"${\r\n            Colors.INDIGO}\" stroke-width=\"0.6\" fill=\"none\"/>` +\r\n          `</g>` +\r\n          `</svg>`,\r\n      });\r\n\r\n    }\r\n\r\n    return (\r\n      <Marker\r\n        key={ stop.sid + '-marker' }\r\n        position={currentPosition}\r\n        icon={icon}\r\n        onClick={ (e) => { e.sourceTarget.closeTooltip(); onClickHandler() } }\r\n      >{tooltip}</Marker>\r\n    )\r\n  };\r\n\r\n  /**\r\n   * Computes angle in degrees from one point towards another\r\n   * @param {Object} fromPoint latLng of starting point\r\n   * @param {Object} toPoint latLng of ending point\r\n   * @returns {Number} The angle in degrees (where 0 is east, 90 is south)\r\n   */\r\n  angleFromTo = (fromPoint, toPoint) => {\r\n    const delta_x = toPoint.lon - fromPoint.lon;\r\n    // Note that y is reversed due to latitude's postive direction being reverse of screen y\r\n    const delta_y = fromPoint.lat - toPoint.lat;\r\n    const rotation = Math.round(Math.atan2(delta_y, delta_x) * 180/Math.PI);\r\n    return rotation;\r\n  }\r\n\r\n\r\n  /**\r\n   * Draws all the stops in a given direction.\r\n   * @param {Array} routeStops Collection of route stops grouped by direction id\r\n   * @param {String} directionId The direction to render\r\n   * @param {Object} direction The direction info for the given direction\r\n   * @returns {Array} Array of Leaflet Marker objects\r\n   */\r\n  populateStops = (\r\n    routeStops,\r\n    directionId,\r\n    direction,\r\n  ) => {\r\n    let route = [];\r\n\r\n    if (routeStops && routeStops[directionId]) {\r\n      route = routeStops[directionId].map(stop => {\r\n        const currentPosition = [stop.lat, stop.lon];\r\n        const isStart = stop.sid === this.props.graphParams.startStopId;\r\n        const isEnd = stop.sid === this.props.graphParams.endStopId;\r\n\r\n        const onClickHandler = () => this.handleStopSelect(stop, directionId);\r\n        const tooltip = <Tooltip>\r\n          {stop.title}\r\n          <br />\r\n          {direction.title}\r\n        </Tooltip>;\r\n\r\n        let IconType = null;\r\n        if (isStart) {\r\n          IconType = StartStopIcon;\r\n        } else if (isEnd) {\r\n          IconType = EndStopIcon;\r\n        }\r\n\r\n        // The direction of travel for a stop is from the GTFS shape point just before\r\n        // this stop (represented by after_index) to the next shape point. Edge cases\r\n        // at the beginning and end of a route seem to work out (probably because of\r\n        // extra coords points representing the terminals).\r\n\r\n        let rotation=0;\r\n        const stopGeometry = direction.stop_geometry[stop.sid];\r\n        if (stopGeometry) {\r\n          const previousPoint = direction.coords[stopGeometry.after_index];\r\n          const nextPoint = direction.coords[stopGeometry.after_index+1];\r\n          rotation = this.angleFromTo(previousPoint, nextPoint);\r\n        }\r\n\r\n        const icon = this.populateStop(stop, IconType, currentPosition, rotation, onClickHandler, tooltip);\r\n        return icon;\r\n      });\r\n    }\r\n    return route;\r\n  };\r\n\r\n  // plot speed along a route\r\n\r\n  populateSpeed = (routeInfo, direction, routeStops, directionId) => {\r\n    const downstreamStops = routeStops[directionId];\r\n    const polylines = [];\r\n\r\n    let seenStart = false;\r\n    let seenEnd = false;\r\n\r\n    for (let i = 0; i < downstreamStops.length - 1; i++) {\r\n      const speed = this.getSpeed(\r\n        routeInfo,\r\n        direction,\r\n        downstreamStops,\r\n        i,\r\n        directionId,\r\n      );\r\n\r\n      if (downstreamStops[i].sid === this.props.graphParams.startStopId) {\r\n        seenStart = true;\r\n      }\r\n      if (downstreamStops[i].sid === this.props.graphParams.endStopId) {\r\n        seenEnd = true;\r\n      }\r\n\r\n      let color = 'white';\r\n      let weight = 12;\r\n\r\n      // If this is the start stop or a subsequent stop before the end stop,\r\n      // use a different color to highlight the selected range of stops.\r\n\r\n      if (this.props.graphParams.endStopId && seenStart && !seenEnd) {\r\n        color = Colors.INDIGO;\r\n        weight = 14;\r\n      }\r\n\r\n      // draw a wide polyline as a background for the speed polyline\r\n\r\n      polylines.push(\r\n        <Polyline\r\n          key={`poly-speed-white-${directionId}-${downstreamStops[i].sid}`}\r\n          positions={getTripPoints(\r\n            routeInfo,\r\n            direction,\r\n            downstreamStops[i].sid,\r\n            downstreamStops[i + 1].sid,\r\n          )}\r\n          color={color}\r\n          opacity={1}\r\n          weight={weight}\r\n        ></Polyline>,\r\n      );\r\n\r\n      // then the speed polyline on top of the white polyline\r\n\r\n      polylines.push(\r\n        <Polyline\r\n          key={`poly-speed-${directionId}-${downstreamStops[i].sid}`}\r\n          positions={getTripPoints(\r\n            routeInfo,\r\n            direction,\r\n            downstreamStops[i].sid,\r\n            downstreamStops[i + 1].sid,\r\n          )}\r\n          color={speed < 0 ? 'white' : this.speedColor(speed)}\r\n          opacity={1}\r\n          weight={7}\r\n          onClick={e => {\r\n            // when this segment is clicked, plot only the stops for this route/dir by setting the first stop\r\n\r\n            e.originalEvent.view.L.DomEvent.stopPropagation(e);\r\n\r\n            /* TODO: decide if clicking on segments changes the stop selection.  Right now no, because\r\n             * the stop markers are fairly prominent at the moment.  If we make them smaller, then\r\n             * reconsider. */\r\n          }}\r\n        >\r\n          <Tooltip>\r\n            {speed < 0 ? '?' : speed.toFixed(1)} mph to{' '}\r\n            {downstreamStops[i + 1].title}\r\n          </Tooltip>\r\n        </Polyline>,\r\n      );\r\n    } // end for\r\n    return polylines;\r\n  };\r\n\r\n  /**\r\n   * Speed from index to index+1\r\n   */\r\n  getSpeed = (routeInfo, direction, downstreamStops, index, directionId) => {\r\n    const graphParams = this.props.graphParams;\r\n    const routeId = graphParams.routeId;\r\n\r\n    const firstStop = downstreamStops[index];\r\n    const firstStopId = firstStop.sid;\r\n    const nextStop = downstreamStops[index + 1];\r\n    const nextStopId = nextStop.sid;\r\n\r\n    const tripTimesFromStop = getTripTimesFromStop(\r\n      this.props.tripTimesCache,\r\n      graphParams,\r\n      routeId,\r\n      directionId,\r\n      firstStopId,\r\n    );\r\n\r\n    let time = null;\r\n    if (tripTimesFromStop && tripTimesFromStop[nextStopId]) {\r\n      time = tripTimesFromStop[nextStopId];\r\n    } else {\r\n      return -1; // speed not available;\r\n    }\r\n\r\n    const distance = getDistanceInMiles(\r\n      routeInfo,\r\n      direction,\r\n      firstStopId,\r\n      nextStopId,\r\n    );\r\n\r\n    return (distance / time) * 60; // miles per minute -> mph\r\n  };\r\n\r\n  SpeedLegend = () => {\r\n    const speedColorValues = [2.5, 6.25, 8.75, 12.5]; // representative values for quantizing\r\n    // center of scale is 7.5 with quartile boundaries at 5 and 10.\r\n\r\n    const speedColorLabels = [' < 5', '5-7.5', '7.5-10', '10+'];\r\n\r\n    const items = speedColorValues.map(speedColorValue => {\r\n      return (\r\n        <div key={speedColorValue}>\r\n          <i\r\n            style={{\r\n              backgroundColor: this.speedColor(speedColorValue),\r\n              width: 18,\r\n              float: 'left',\r\n            }}\r\n          >\r\n            &nbsp;\r\n          </i>{' '}\r\n          &nbsp;\r\n          {speedColorLabels[speedColorValues.indexOf(speedColorValue)]}\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <Control position=\"bottomright\">\r\n        <div\r\n          style={{\r\n            backgroundColor: 'white',\r\n            padding: '5px',\r\n          }}\r\n        >\r\n          Speed (mph)\r\n          {items}\r\n        </div>\r\n      </Control>\r\n    );\r\n  };\r\n\r\n  handleStopSelect = (stop, newDirectionId) => {\r\n    let {\r\n      // eslint-disable-next-line prefer-const\r\n      routeId,\r\n      startStopId,\r\n      endStopId,\r\n      directionId,\r\n    } = this.props.graphParams;\r\n\r\n    if (!startStopId) {\r\n      // no first stop set: treat as first stop\r\n      startStopId = stop.sid;\r\n      endStopId = null;\r\n      directionId = newDirectionId;\r\n    } else if (!endStopId) {\r\n      if (directionId !== newDirectionId) {\r\n        // new direction: treat as first stop\r\n        startStopId = stop.sid;\r\n        endStopId = null;\r\n        directionId = newDirectionId;\r\n      } else {\r\n        // set end stop, swap if needed\r\n        const selectedRoute = this.props.routes.find(\r\n          route => route.id === routeId,\r\n        );\r\n        const stopSids = selectedRoute.directions.find(\r\n          dir => dir.id === directionId,\r\n        ).stops;\r\n\r\n        if (stopSids.indexOf(stop.sid) < stopSids.indexOf(startStopId)) {\r\n          endStopId = startStopId;\r\n          startStopId = stop.sid;\r\n        } else {\r\n          // order is correct\r\n          endStopId = stop.sid;\r\n        }\r\n      }\r\n    } else {\r\n      // both stops were already set, treat as first stop and clear second (although arguably if same direction could set as end stop)\r\n      startStopId = stop.sid;\r\n      endStopId = null;\r\n      directionId = newDirectionId;\r\n    }\r\n    const path = new Path();\r\n    path.buildPath(DIRECTION, directionId).buildPath(FROM_STOP, startStopId);\r\n    if (endStopId) {\r\n      path.buildPath(TO_STOP, endStopId);\r\n    }\r\n    path.commitPath();\r\n    const { onGraphParams } = this.props;\r\n    // for debugging\r\n    // console.log(\"end state is: start: \" + startStopId + \" end: \" + endStopId + \" dir: \" + directionId);\r\n    onGraphParams({\r\n      startStopId,\r\n      endStopId,\r\n      directionId,\r\n    });\r\n  };\r\n\r\n  getStopsInfoInGivenDirection = (selectedRoute, directionId) => {\r\n    const stopSids = selectedRoute.directions.find(\r\n      dir => dir.id === directionId,\r\n    );\r\n\r\n    return stopSids.stops.map(stop => {\r\n      const currentStopInfo = { ...selectedRoute.stops[stop] };\r\n      currentStopInfo.sid = stop;\r\n      return currentStopInfo;\r\n    });\r\n  };\r\n\r\n  // Make the map full height unless the window is smaller than the sm breakpoint (640px), in which\r\n  // case make the map half height.\r\n  //\r\n  // TODO: Need to convert this component to a functional component.  Then we can use the useTheme\r\n  // hook to programatically access the breakpoint widths.\r\n  //\r\n  // Note: This code has to be adjusted to be kept in sync with the UI layout.\r\n  //\r\n\r\n  computeHeight() {\r\n    return (\r\n      (window.innerWidth >= 640 ? window.innerHeight : window.innerHeight / 2) -\r\n      64 /* blue app bar */\r\n    );\r\n  }\r\n\r\n  updateDimensions() {\r\n    const height = this.computeHeight();\r\n    this.setState({ height });\r\n  }\r\n\r\n  speedColor(mph) {\r\n    // should this be multiples of walking speed? 3/6/9/12?\r\n    return d3\r\n      .scaleQuantize()\r\n      .domain([2.5, 12.5])\r\n      .range(['#8d1212', '#e60000', '#f07d02', '#84ca50'])(mph);\r\n  }\r\n\r\n  render() {\r\n    const { position, zoom } = this.props;\r\n\r\n    const mapClass = { width: '100%', height: this.state.height };\r\n\r\n    const { routes, graphParams } = this.props;\r\n\r\n    let selectedRoute = null;\r\n    let routeStops = null;\r\n    const populatedRoutes = [];\r\n\r\n    if (routes && graphParams) {\r\n      selectedRoute = routes.find(route => route.id === graphParams.routeId);\r\n\r\n      if (selectedRoute) {\r\n        routeStops = {};\r\n        selectedRoute.directions.forEach((direction, index) => {\r\n          // plot only the selected direction if we have one, or else all directions\r\n\r\n          if (\r\n            !graphParams.directionId ||\r\n            graphParams.directionId === direction.id\r\n          ) {\r\n            routeStops[direction.id] = this.getStopsInfoInGivenDirection(\r\n              selectedRoute,\r\n              direction.id,\r\n            );\r\n\r\n            // add white lines and speed color lines\r\n\r\n            populatedRoutes.push(\r\n              this.populateStops(\r\n                routeStops,\r\n                direction.id,\r\n                direction,\r\n              ),\r\n            );\r\n\r\n            // draw stop markers on top of lines for all directions\r\n\r\n            populatedRoutes.unshift(\r\n              this.populateSpeed(selectedRoute, direction, routeStops, direction.id),\r\n            )\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    let mapInstruction =(!graphParams.directionId) ? 'Select a direction to see stops in that direction.'\r\n        : (!graphParams.startStopId) ? 'Click an origin stop.'\r\n        : (!graphParams.endStopId) ? 'Click a destination stop.' : '';\r\n\r\n    return (\r\n      <Map\r\n        center={position || this.agency.initialMapCenter}\r\n        bounds={routeStops ? routeStops[selectedRoute.directions[0].id] : null}\r\n        zoom={zoom || this.agency.initialMapZoom}\r\n        style={mapClass}\r\n      >\r\n        <TileLayer\r\n          attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.'\r\n          url=\"https://stamen-tiles.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}.png\"\r\n          opacity={0.3}\r\n        />\r\n        {populatedRoutes}\r\n        <this.SpeedLegend />\r\n        <Control position=\"topright\">\r\n          {!graphParams.startStopId || !graphParams.endStopId ? (\r\n            <div className=\"map-instructions\">{mapInstruction}</div>\r\n          ) : null}\r\n        </Control>\r\n      </Map>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  graphParams: state.routes.graphParams,\r\n  tripTimesCache: state.routes.tripTimesCache,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onGraphParams: params => dispatch(handleGraphParams(params)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(MapStops);\r\n","/* eslint-disable react/prop-types */\r\nimport React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\n// import PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport StartStopIcon from '@material-ui/icons/DirectionsTransit';\r\nimport EndStopIcon from '@material-ui/icons/Flag';\r\nimport { handleGraphParams } from '../actions';\r\nimport { ROUTE, DIRECTION, FROM_STOP, TO_STOP, Path } from '../routeUtil';\r\nimport { Colors } from '../UIConstants';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n}));\r\n\r\nfunction ControlPanel(props) {\r\n  const { routes, graphParams } = props;\r\n  let secondStopList = [];\r\n  const [allowHover, setAllowHover] = useState(false);\r\n\r\n  /**\r\n   * Sets the direction\r\n   */\r\n  function setDirectionId(event) {\r\n    const directionId = event.target.value;\r\n\r\n    const path = new Path();\r\n    path.buildPath(DIRECTION, directionId).commitPath();\r\n    return props.onGraphParams({\r\n      directionId,\r\n      startStopId: null,\r\n      endStopId: null,\r\n    });\r\n  }\r\n\r\n  function getSelectedRouteInfo() {\r\n    const routeId = props.graphParams.routeId;\r\n    return routes ? routes.find(route => route.id === routeId) : null;\r\n  }\r\n\r\n  const selectedRoute = getSelectedRouteInfo();\r\n\r\n  function getStopsInfoInGivenDirection(mySelectedRoute, directionId) {\r\n    return mySelectedRoute.directions.find(dir => dir.id === directionId);\r\n  }\r\n\r\n  function generateSecondStopList(mySelectedRoute, directionId, stopId) {\r\n    const secondStopInfo = getStopsInfoInGivenDirection(\r\n      mySelectedRoute,\r\n      directionId,\r\n    );\r\n    \r\n    const stopsList = secondStopInfo.stops;\r\n    const secondStopListIndex = stopId\r\n      ? stopsList.indexOf(stopId)\r\n      : 0;\r\n    \r\n    // loop routes start and stop at same stop\r\n    const isLoopRoute = stopsList[0] === stopsList[stopsList.length - 1];\r\n    const oneWaySecondStopsList = stopsList.slice(secondStopListIndex + 1);\r\n\r\n    if (!isLoopRoute) {\r\n      return oneWaySecondStopsList;\r\n    }\r\n    // loop routes display all subsequent stops up to origin stop\r\n    return oneWaySecondStopsList.concat(stopsList.slice(1, secondStopListIndex));\r\n  }\r\n\r\n  function onSelectFirstStop(event) {\r\n    const stopId = event.target.value;\r\n\r\n    const directionId = props.graphParams.directionId;\r\n    const secondStopId = props.graphParams.endStopId;\r\n    const mySelectedRoute = { ...getSelectedRouteInfo() };\r\n\r\n    secondStopList = generateSecondStopList(\r\n      mySelectedRoute,\r\n      directionId,\r\n      stopId,\r\n    );\r\n    const path = new Path();\r\n    path.buildPath(FROM_STOP, stopId);\r\n\r\n    if (secondStopId) {\r\n      path.buildPath(TO_STOP, secondStopId);\r\n    }\r\n\r\n    path.commitPath();\r\n\r\n    props.onGraphParams({\r\n      startStopId: stopId,\r\n      endStopId: secondStopId,\r\n    });\r\n  }\r\n\r\n  function onSelectSecondStop(event) {\r\n    const endStopId = event.target.value;\r\n\r\n    const path = new Path();\r\n    path.buildPath(TO_STOP, endStopId).commitPath();\r\n\r\n    props.onGraphParams({ endStopId });\r\n  }\r\n\r\n  function setRouteId(event) {\r\n    const routeId = event.target.value;\r\n\r\n    const mySelectedRoute = props.routes\r\n      ? props.routes.find(route => route.id === routeId)\r\n      : null;\r\n\r\n    if (!mySelectedRoute) {\r\n      return;\r\n    }\r\n\r\n    const directionId =\r\n      mySelectedRoute.directions.length > 0\r\n        ? mySelectedRoute.directions[0].id\r\n        : null;\r\n\r\n    const path = new Path();\r\n    path\r\n      .buildPath(ROUTE, routeId)\r\n      .buildPath(DIRECTION, directionId)\r\n      .commitPath();\r\n    props.onGraphParams({\r\n      routeId,\r\n      directionId,\r\n      startStopId: null,\r\n      endStopId: null,\r\n    });\r\n  }\r\n  /**\r\n   * Handle mouseover event on Select TO & From dropdown list item.\r\n   */\r\n  function handleItemMouseOver(node, title) {\r\n    if (node && allowHover) {\r\n      node.classList.add('on-hover');\r\n      node.style.setProperty('--stop-name', `\"${title}\"`);\r\n    }\r\n  }\r\n  /**\r\n   * Handle mouseout event on Select TO & From dropdown list item.\r\n   */\r\n  function handleItemMouseOut(node) {\r\n    node && node.classList.remove('on-hover');\r\n  }\r\n  /**\r\n   * Handle Select component close\r\n   */\r\n  function handleSelectClose() {\r\n    setAllowHover(false);\r\n    const nodeList = document.querySelectorAll('.on-hover');\r\n    nodeList.forEach(node => node.classList.remove('on-hover'));\r\n  }\r\n\r\n  let selectedDirection = null;\r\n  if (selectedRoute && selectedRoute.directions && graphParams.directionId) {\r\n    selectedDirection = selectedRoute.directions.find(\r\n      dir => dir.id === graphParams.directionId,\r\n    );\r\n  }\r\n\r\n  if (selectedDirection) {\r\n    secondStopList = generateSecondStopList(\r\n      selectedRoute,\r\n      graphParams.directionId,\r\n      graphParams.startStopId,\r\n    );\r\n  }\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className=\"ControlPanel\">\r\n      <Grid container>\r\n        <Grid item xs>\r\n          <FormControl className={classes.formControl}>\r\n            <InputLabel htmlFor=\"route\">Route</InputLabel>\r\n            <Select\r\n              value={graphParams.routeId || 0}\r\n              onChange={setRouteId}\r\n              input={<Input name=\"route\" id=\"route\" />}\r\n            >\r\n              {(routes || []).map(route => (\r\n                <MenuItem key={route.id} value={route.id}>\r\n                  {route.title}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        {selectedRoute ? (\r\n          <Grid item xs>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel htmlFor=\"direction\">Direction</InputLabel>\r\n              <Select\r\n                value={graphParams.directionId || \"\"}\r\n                onChange={setDirectionId}\r\n                input={<Input name=\"direction\" id=\"direction\" />}\r\n              >\r\n                {(selectedRoute.directions || []).map(direction => (\r\n                  <MenuItem key={direction.id} value={direction.id}>\r\n                      {direction.title}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n        ) : null}\r\n        {selectedDirection ? (\r\n          <Grid container>\r\n            <Grid item xs>\r\n              <Box ml={1}>\r\n                <StartStopIcon fontSize=\"small\" htmlColor={Colors.INDIGO} />\r\n                <FormControl className={classes.formControl}>\r\n                  <InputLabel htmlFor=\"fromstop\">From Stop</InputLabel>\r\n                  <Select\r\n                    value={graphParams.startStopId || 1}\r\n                    onChange={onSelectFirstStop}\r\n                    input={<Input name=\"stop\" id=\"fromstop\" />}\r\n                    onOpen={() => setAllowHover(true)}\r\n                    onClose={handleSelectClose}\r\n                  >\r\n                    {(selectedDirection.stops || []).map(firstStopId => {\r\n                      const icon = document.querySelector(`.id${firstStopId}`);\r\n                      const title = (\r\n                        selectedRoute.stops[firstStopId] || {\r\n                          title: firstStopId,\r\n                        }\r\n                      ).title;\r\n                      return (\r\n                        <MenuItem\r\n                          key={firstStopId}\r\n                          value={firstStopId}\r\n                          onMouseOver={() => handleItemMouseOver(icon, title)}\r\n                          onFocus={() => handleItemMouseOver(icon, title)}\r\n                          onMouseOut={() => handleItemMouseOut(icon)}\r\n                          onBlur={() => handleItemMouseOut(icon)}\r\n                        >\r\n                          {title}\r\n                        </MenuItem>\r\n                      );\r\n                    })}\r\n                  </Select>\r\n                </FormControl>\r\n              </Box>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Box ml={1}>\r\n                <EndStopIcon fontSize=\"small\" htmlColor={Colors.INDIGO} />\r\n                <FormControl className={classes.formControl}>\r\n                  <InputLabel htmlFor=\"tostop\">To Stop</InputLabel>\r\n                  <Select\r\n                    value={graphParams.endStopId || 1}\r\n                    onChange={onSelectSecondStop}\r\n                    input={<Input name=\"stop\" id=\"tostop\" />}\r\n                    onOpen={() => setAllowHover(true)}\r\n                    onClose={handleSelectClose}\r\n                  >\r\n                    {(secondStopList || []).map(secondStopId => {\r\n                      const icon = document.querySelector(`.id${secondStopId}`);\r\n                      const title = (\r\n                        selectedRoute.stops[secondStopId] || {\r\n                          title: secondStopId,\r\n                        }\r\n                      ).title;\r\n                      return (\r\n                        <MenuItem\r\n                          key={secondStopId}\r\n                          value={secondStopId}\r\n                          onMouseOver={() => handleItemMouseOver(icon, title)}\r\n                          onFocus={() => handleItemMouseOver(icon, title)}\r\n                          onMouseOut={() => handleItemMouseOut(icon)}\r\n                          onBlur={() => handleItemMouseOut(icon)}\r\n                        >\r\n                          {title}\r\n                        </MenuItem>\r\n                      );\r\n                    })}\r\n                  </Select>\r\n                </FormControl>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        ) : null}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\n// for this entire component, now using graphParams values in Redux instead of local state.\r\nconst mapStateToProps = state => ({\r\n  graphParams: state.routes.graphParams,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onGraphParams: params => dispatch(handleGraphParams(params)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(ControlPanel);\r\n","import React, { Fragment, useState } from 'react';\r\n\r\nimport {\r\n  XYPlot,\r\n  HorizontalGridLines,\r\n  VerticalGridLines,\r\n  XAxis,\r\n  YAxis,\r\n  LineMarkSeries,\r\n  ChartLabel,\r\n  Crosshair,\r\n} from 'react-vis';\r\nimport DiscreteColorLegend from 'react-vis/dist/legends/discrete-color-legend';\r\nimport '../../node_modules/react-vis/dist/style.css';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {\r\n  getEndToEndTripTime,\r\n  getTripDataSeries,\r\n} from '../helpers/routeCalculations';\r\n\r\n/**\r\n * Renders an \"nyc bus stats\" style summary of a route and direction.\r\n *\r\n * @param {any} props\r\n */\r\nfunction TravelTimeChart(props) {\r\n  const [crosshairValues, setCrosshairValues] = useState([]);\r\n  const { graphParams } = props;\r\n\r\n  /**\r\n   * Event handler for onMouseLeave.\r\n   * @private\r\n   */\r\n  const onMouseLeave = () => {\r\n    setCrosshairValues([]);\r\n  };\r\n\r\n  /**\r\n   * Event handler for onNearestX.\r\n   * @param {Object} value Selected value.\r\n   * @param {index} index Index of the value in the data array.\r\n   * @private\r\n   */\r\n  const onNearestTripX = value => {\r\n    // , { index })\r\n    setCrosshairValues([value /* future:  how to add scheduleData[index] ? */]);\r\n  };\r\n\r\n  let tripData = null;\r\n  let directionId = null;\r\n  let tripTimeForDirection = null;\r\n\r\n  if (props.routeId || graphParams.routeId) {\r\n    // take route id from props if given, else use redux graphParams\r\n\r\n    const routeId = props.routeId || graphParams.routeId;\r\n    directionId = props.directionId || graphParams.directionId; // also take direction_id from props if given\r\n\r\n    if (directionId != null) {\r\n      tripTimeForDirection = getEndToEndTripTime(\r\n        props.tripTimesCache,\r\n        graphParams,\r\n        props.routes,\r\n        routeId,\r\n        directionId,\r\n      );\r\n\r\n      /* this is the end-to-end speed in the selected direction, not currently used\r\n    if (dist <= 0 || Number.isNaN(tripTime)) { speed = \"?\"; } // something wrong with the data here\r\n    else {\r\n      speed = metersToMiles(Number.parseFloat(dist)) / tripTime * 60.0;  // initial units are meters per minute, final are mph\r\n      //console.log('speed: ' + speed + \" tripTime: \" + tripTime);\r\n    } */\r\n    }\r\n\r\n    tripData = getTripDataSeries(props, routeId, directionId);\r\n  }\r\n\r\n  const legendItems = [\r\n    // { title: 'Scheduled', color: \"#a4a6a9\", strokeWidth: 10 },\r\n    { title: 'Actual', color: '#aa82c5', strokeWidth: 10 },\r\n  ];\r\n\r\n  return directionId ? (\r\n    <Fragment>\r\n          <Typography variant=\"h5\">Travel time along route</Typography>\r\n          Full travel time: {tripTimeForDirection} minutes &nbsp;&nbsp; Stops:{' '}\r\n          {tripData[tripData.length - 1]\r\n            ? tripData[tripData.length - 1].stopIndex + 1\r\n            : '?'}\r\n          <br />\r\n          {/* set the y domain to start at zero and end at highest value (which is not always\r\n         the end to end travel time due to spikes in the data) */}\r\n          <XYPlot\r\n            height={300}\r\n            width={400}\r\n            xDomain={[\r\n              0,\r\n              tripData.reduce(\r\n                (max, coord) => (coord.x > max ? coord.x : max),\r\n                0,\r\n              ),\r\n            ]}\r\n            yDomain={[\r\n              0,\r\n              tripData.reduce(\r\n                (max, coord) => (coord.y > max ? coord.y : max),\r\n                0,\r\n              ),\r\n            ]}\r\n            onMouseLeave={onMouseLeave}\r\n          >\r\n            <HorizontalGridLines />\r\n            <VerticalGridLines />\r\n            <XAxis tickPadding={4} />\r\n            <YAxis hideLine tickPadding={4} />\r\n\r\n            <LineMarkSeries\r\n              data={tripData}\r\n              stroke=\"#aa82c5\"\r\n              color=\"aa82c5\"\r\n              style={{\r\n                strokeWidth: '3px',\r\n              }}\r\n              size=\"1\"\r\n              onNearestX={onNearestTripX}\r\n            />\r\n            {/* <LineSeries data={ scheduleData }\r\n              stroke=\"#a4a6a9\"\r\n              strokeWidth=\"4\"\r\n              style={{\r\n                strokeDasharray: '2 2'\r\n              }}\r\n            /> */}\r\n\r\n            <ChartLabel\r\n              text=\"Minutes\"\r\n              className=\"alt-y-label\"\r\n              includeMargin\r\n              xPercent={0.02}\r\n              yPercent={0.2}\r\n              style={{\r\n                transform: 'rotate(-90)',\r\n                textAnchor: 'end',\r\n              }}\r\n            />\r\n\r\n            <ChartLabel\r\n              text=\"Distance Along Route (miles)\"\r\n              className=\"alt-x-label\"\r\n              includeMargin\r\n              xPercent={0.7}\r\n              yPercent={0.86}\r\n              style={{\r\n                textAnchor: 'end',\r\n              }}\r\n            />\r\n\r\n            {crosshairValues.length > 0 && (\r\n              <Crosshair\r\n                values={crosshairValues}\r\n                style={{ line: { background: 'none' } }}\r\n              >\r\n                <div className=\"rv-crosshair__inner__content\">\r\n                  <p>{Math.round(crosshairValues[0].y)} min</p>\r\n                  {/* <p>Scheduled: { Math.round(crosshairValues[1].y)} min</p> */}\r\n                  <p>{crosshairValues[0].title}</p>\r\n                  <p>(Stop #{crosshairValues[0].stopIndex + 1})</p>\r\n                </div>\r\n              </Crosshair>\r\n            )}\r\n          </XYPlot>\r\n          <DiscreteColorLegend\r\n            orientation=\"horizontal\"\r\n            width={300}\r\n            items={legendItems}\r\n          />\r\n    </Fragment>\r\n  ) : <Fragment>Select a direction to see the travel time chart.</Fragment>;\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  routes: state.routes.routes,\r\n  graphParams: state.routes.graphParams,\r\n  waitTimesCache: state.routes.waitTimesCache,\r\n  tripTimesCache: state.routes.tripTimesCache,\r\n});\r\n\r\nexport default connect(mapStateToProps)(TravelTimeChart);\r\n","/* eslint no-unused-vars: [\"warn\", { \"varsIgnorePattern\": \"MomentTZ\" }] */\r\n\r\n/* Note: Importing MomentTZ adds new methods to Moment.  MomentTZ is not meant to be used directly. */\r\n\r\nimport React, { Fragment, useState, useEffect } from 'react';\r\n\r\nimport {\r\n  XYPlot,\r\n  HorizontalGridLines,\r\n  VerticalGridLines,\r\n  XAxis,\r\n  YAxis,\r\n  LineMarkSeries,\r\n  ChartLabel,\r\n  Hint,\r\n  Borders,\r\n} from 'react-vis';\r\nimport '../../node_modules/react-vis/dist/style.css';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {\r\n  Radio,\r\n  FormControl,\r\n  FormControlLabel,\r\n} from '@material-ui/core';\r\n\r\nimport Moment from 'moment';\r\nimport MomentTZ from 'moment-timezone/builds/moment-timezone-with-data-10-year-range'; // this augments Moment\r\n\r\nimport * as d3 from 'd3';\r\nimport { fetchArrivals, resetArrivals } from '../actions';\r\nimport { getAgency } from '../config';\r\nimport { DWELL_THRESHOLD_SECS } from '../UIConstants';\r\n\r\nimport { metersToMiles } from '../helpers/routeCalculations';\r\n\r\n/**\r\n * Within state.route.arrivals, the data is organized as follows:\r\n *\r\n * Top level dictionary with version, agency, route_id, start_time/end_time timestamps\r\n * Stops dictionary by stop id -> arrivals -> direction id (usually just one) -> array of data points\r\n * Each data point is time in (t), time of exit (e), vehicle id (v), trip id (i), distance (d)\r\n *\r\n * Ideally, each trip (and vehicle) would already be its own data series.  For now, we can rebucket\r\n * the data on the client side.  Goal is to create the following structure:\r\n *\r\n * Dictionary of objects keyed by trip id\r\n *   - tripId\r\n *   - vehicleId (for coloring)\r\n *   - series: array of objects (eventually sorted by distance along route) containing:\r\n *     - stopId: the stop ID for this arrival (also can add any other desired stop metadata like title)\r\n *     - x: distance along route (currently x-axis value, could be flipped)\r\n *     - y: arrival times in hours since midnight (currently the y-axis value, could be flipped)\r\n *\r\n * Note: In our travel time chart, x axis is distance along route, y axis is time taken, so this is\r\n * consistent.\r\n *\r\n * TODO: Respects stop picker? (but then how do you see it?)\r\n *\r\n * @param {Object} props\r\n */\r\nfunction MareyChart(props) {\r\n  const INBOUND_AND_OUTBOUND = 'Inbound_and_outbound';\r\n  const INBOUND = '1'; // same as directionInfo id\r\n  const OUTBOUND = '0'; // same as directionInfo id\r\n\r\n  const { graphParams, myFetchArrivals, myResetArrivals, arrivals, arrivalsErr, routes, hidden } = props;\r\n\r\n  const [hintValue, setHintValue] = useState();\r\n  const [tripHighlight, setTripHighlight] = useState();\r\n  const [processedArrivals, setProcessedArrivals] = useState(); // where the tripData gets stored\r\n  const [selectedOption, setSelectedOption] = useState(INBOUND_AND_OUTBOUND);\r\n\r\n  const agency = getAgency(graphParams.agencyId);\r\n  const timezoneId = agency ? agency.timezoneId : 'UTC';\r\n\r\n  // Clear out stale data.  We have arrivals for a different route or\r\n  // different day versus what is currently selected.\r\n\r\n  useEffect(() => {\r\n     \r\n    if (arrivals && (arrivals.date !== graphParams.date || arrivals.route_id !== graphParams.routeId)) {\r\n      \r\n      //console.log('resetting arrivals because: ' + arrivals.date + ' vs ' + graphParams.date + ' ' + arrivals.route_id + ' vs ' + graphParams.routeId);\r\n      myResetArrivals(null);\r\n    }\r\n  }, [graphParams, myResetArrivals, arrivals]);\r\n      \r\n  // Request missing arrival data lazily, only when this chart is tabbed into view.\r\n  // This makes the app more responsive to route and date changes if we are hidden.\r\n\r\n  useEffect(() => {\r\n      \r\n    if (!arrivals && graphParams.routeId && !hidden) {\r\n      myFetchArrivals(graphParams);\r\n    }\r\n\r\n  }, [graphParams, myFetchArrivals, arrivals, hidden]);\r\n\r\n  // When both the raw arrival history and route configs have loaded, first\r\n  // rebucket the data by trip ID.  Then create react-vis Series objects for\r\n  // each bucket, and store the Series in the state to trigger the final render.\r\n\r\n  useEffect(() => {\r\n    /**\r\n     * Helper method to take a single arrival and add it to the right per-trip bucket\r\n     * (creating it if needed).\r\n     *\r\n     * We also convert the stop ID to a distance along the route, and convert the\r\n     * arrival timestamp to hours since 3am.\r\n     *\r\n     * @param {Object} tripData\r\n     * @param {Object} arrival\r\n     * @param {String} stopId\r\n     * @param {Object} directionInfo\r\n     * @param {Number} startTime\r\n     * @param {Number} startHourOfDay Offset to add for arrival in fractional hours (time of day)\r\n     */\r\n    const addArrival = (\r\n      tripData,\r\n      arrival,\r\n      stopId,\r\n      route,\r\n      directionInfo,\r\n      startTime,\r\n      startHourOfDay,\r\n    ) => {\r\n      const myTripData = tripData;\r\n      const tripId = arrival.i;\r\n      const vehicleId = arrival.v;\r\n      if (myTripData.byTripId[tripId] === undefined) {\r\n        myTripData.byTripId[tripId] = {\r\n          tripId,\r\n          vehicleId,\r\n          series: [],\r\n          directionInfo,\r\n        };\r\n      }\r\n\r\n      if (directionInfo && directionInfo.stop_geometry[stopId]) {\r\n        let distance = directionInfo.stop_geometry[stopId].distance;\r\n\r\n        // This is a little clunky -- for all outbound routes, we restate the distance\r\n        // as distance in the inbound direction by subtracting the stop's distance from\r\n        // the length of the outbound direction.  This does not line up exactly with the\r\n        // inbound direction length.\r\n\r\n        if (directionInfo.id === '0') {\r\n          distance = directionInfo.distance - distance;\r\n        }\r\n        distance = metersToMiles(distance);\r\n\r\n        const arrivalMoment = Moment.unix(arrival.t).tz(timezoneId);\r\n        const yValue = (arrival.t - startTime) / 60 / 60 + startHourOfDay; // time of arrival in fractional hours\r\n\r\n        myTripData.byTripId[tripId].series.push({\r\n          stopId,\r\n          title: route.stops[stopId].title,\r\n          arrivalTimeString: arrivalMoment.format('h:mm a'),\r\n          vehicleId,\r\n          x: distance,\r\n          y: yValue,\r\n        });\r\n\r\n        if (\r\n          myTripData.earliestArrivalTime === null ||\r\n          yValue < myTripData.earliestArrivalTime\r\n        ) {\r\n          myTripData.earliestArrivalTime = yValue;\r\n        }\r\n\r\n        if (\r\n          myTripData.latestArrivalTime === null ||\r\n          yValue > myTripData.latestArrivalTime\r\n        ) {\r\n          myTripData.latestArrivalTime = yValue;\r\n        }\r\n\r\n        // If the exit time arrival.e is more than a certain amount of time, add a data point\r\n        // so we can see the vehicle's exit in the data series.\r\n\r\n        if (arrival.e - arrival.t > DWELL_THRESHOLD_SECS) {\r\n          const exitMoment = Moment.unix(arrival.e).tz(timezoneId);\r\n          const exitYValue = (arrival.e - startTime) / 60 / 60 + startHourOfDay; // time of arrival in fractional hours\r\n\r\n          myTripData.byTripId[tripId].series.push({\r\n            stopId,\r\n            title: route.stops[stopId].title,\r\n            arrivalTimeString: exitMoment.format('h:mm a'),\r\n            vehicleId,\r\n            x: distance,\r\n            y: exitYValue,\r\n          });\r\n        }\r\n      }\r\n    };\r\n\r\n    /**\r\n     * This method is called when we get arrival data via Redux.  The method traverses the arrival\r\n     * history (by stop, then by direction, then the contained array).\r\n     *\r\n     * Each arrival is bucketed by trip ID.\r\n     *\r\n     * @param {any} myArrivals\r\n     * @param {any} myRoutes\r\n     */\r\n    const processArrivals = (myArrivals, myRoutes) => {\r\n      const tripData = {\r\n        byTripId: {}, // The dictionary by trip ID where arrivals are bucketed.\r\n        earliestArrivalTime: null, // time in fractional hours\r\n        latestArrivalTime: null, // time in fractional hours\r\n      };\r\n\r\n      const stops = myArrivals.stops;\r\n      const startTime = myArrivals.start_time;\r\n      const startHourOfDay = Moment.unix(startTime)\r\n        .tz(timezoneId)\r\n        .hour();\r\n\r\n      const routeId = myArrivals.route_id;\r\n      const route = myRoutes.find(myRoute => myRoute.id === routeId);\r\n\r\n      Object.keys(stops).forEach(stopId => {\r\n        // console.log(\"Starting \" + stopId);\r\n        const stopsByDirection = stops[stopId].arrivals;\r\n        Object.keys(stopsByDirection).forEach(directionId => {\r\n          const directionInfo = route.directions.find(\r\n            direction => direction.id === directionId,\r\n          );\r\n\r\n          const dataArray = stopsByDirection[directionId];\r\n          dataArray.forEach(arrival => {\r\n            addArrival(\r\n              tripData,\r\n              arrival,\r\n              stopId,\r\n              route,\r\n              directionInfo,\r\n              startTime,\r\n              startHourOfDay,\r\n            );\r\n          });\r\n        });\r\n      });\r\n\r\n      return tripData;\r\n    };\r\n\r\n    if (arrivals && routes) {\r\n      // console.log(\"Processing arrival data.\");\r\n      const tripData = processArrivals(arrivals, routes);\r\n      setProcessedArrivals(tripData);\r\n    } else {\r\n      setProcessedArrivals(null);\r\n    }\r\n  }, [arrivals, routes, timezoneId]);\r\n\r\n  /**\r\n   * This is a render-time helper function.\r\n   *\r\n   * Generates per trip react-vis Series objects from the reorganized tripData.\r\n   * We sort each bucket by \"y\" value (then by distance) to get plots pointed in the correct order.\r\n   *\r\n   * Series are colored by vehicle ID modulo 9 (the last digit of the vehicle ID tends to\r\n   * repeat, so using 9 instead of 10).\r\n   *\r\n   * @param {object} tripData\r\n   * @return {Array} Series objects for plotting\r\n   */\r\n  const createSeries = tripData => {\r\n    const routeColor = d3.scaleQuantize([0, 9], d3.schemeCategory10);\r\n\r\n    const tripSeriesArray = [];\r\n    Object.keys(tripData.byTripId).forEach(tripDataKey => {\r\n      const trip = tripData.byTripId[tripDataKey];\r\n\r\n      if (\r\n        selectedOption === INBOUND_AND_OUTBOUND ||\r\n        (trip.directionInfo && trip.directionInfo.id === selectedOption)\r\n      ) {\r\n        const dataSeries = trip.series.sort((a, b) => {\r\n          const deltaY = b.y - a.y;\r\n          return deltaY !== 0 ? deltaY : b.x - a.x;\r\n        });\r\n\r\n        tripSeriesArray.push(\r\n          <LineMarkSeries\r\n            key={tripDataKey}\r\n            data={dataSeries}\r\n            stroke={routeColor(trip.vehicleId % 9)}\r\n            style={{\r\n              strokeWidth: tripHighlight === tripDataKey ? '3px' : '1px', // draw a thicker line for the series being moused over\r\n            }}\r\n            size=\"1\"\r\n            onValueMouseOver={\r\n              value =>\r\n                setHintValue(\r\n                  value,\r\n                ) /* onNearestXY seems buggy, so next best is onValue */\r\n            }\r\n            onSeriesMouseOver={() => {\r\n              setTripHighlight(tripDataKey);\r\n            }}\r\n          />,\r\n        );\r\n      }\r\n    });\r\n    return tripSeriesArray;\r\n  };\r\n\r\n  let series = null;\r\n  let startHour = 0; // arbitrary value when no data and no time range\r\n  let endHour = 12; // arbitrary value when no data and no time range\r\n\r\n  // if we have data, generate the series and initial domain of hours\r\n  if (processedArrivals) {\r\n    series = createSeries(processedArrivals);\r\n    startHour = Math.floor(processedArrivals.earliestArrivalTime);\r\n    endHour = Math.ceil(processedArrivals.latestArrivalTime);\r\n  }\r\n\r\n  // if there's a time range, that takes priority over the automatic domain\r\n  if (graphParams.startTime) {\r\n    startHour = parseInt(graphParams.startTime, 10);\r\n  }\r\n\r\n  if (graphParams.endTime) {\r\n    endHour = parseInt(graphParams.endTime, 10);\r\n    if (graphParams.endTime.endsWith('+1')) {\r\n      endHour += 24;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Formats fractional hours into time of day.\r\n   *\r\n   * @param {any} v Time of day as fractional hours\r\n   */\r\n  const hourFormatter = v => {\r\n    let suffix = '';\r\n    let hour = v;\r\n    if (hour >= 24) {\r\n      hour -= 24;\r\n      suffix = '+1';\r\n    }\r\n\r\n    let amPm = 'am';\r\n\r\n    if (hour >= 12) {\r\n      amPm = 'pm';\r\n    }\r\n\r\n    if (hour >= 13) {\r\n      hour -= 12;\r\n    }\r\n\r\n    if (hour === 0) {\r\n      hour = 12;\r\n    }\r\n    const time = `${parseInt(hour, 10)}:${((hour - parseInt(hour, 10)) * 60)\r\n      .toString()\r\n      .padStart(2, '0')}`;\r\n    return `${time} ${amPm}${suffix}`;\r\n  };\r\n\r\n  return processedArrivals ? (\r\n    <Fragment>\r\n          <Typography variant=\"h5\">Marey chart</Typography>\r\n          Vehicle runs: {series.length} <br />\r\n          <FormControl>\r\n            <div className=\"controls\">\r\n              <FormControlLabel\r\n                control={\r\n                  <Radio\r\n                    id=\"inbound_and_outbound\"\r\n                    type=\"radio\"\r\n                    value={INBOUND_AND_OUTBOUND}\r\n                    checked={selectedOption === INBOUND_AND_OUTBOUND}\r\n                    onChange={changeEvent =>\r\n                      setSelectedOption(changeEvent.target.value)\r\n                    }\r\n                  />\r\n                }\r\n                label=\"Inbound and Outbound\"\r\n              />\r\n\r\n              <FormControlLabel\r\n                control={\r\n                  <Radio\r\n                    id=\"inbound\"\r\n                    type=\"radio\"\r\n                    value={INBOUND}\r\n                    checked={selectedOption === INBOUND}\r\n                    onChange={changeEvent =>\r\n                      setSelectedOption(changeEvent.target.value)\r\n                    }\r\n                  />\r\n                }\r\n                label=\"Inbound only\"\r\n              />\r\n\r\n              <FormControlLabel\r\n                control={\r\n                  <Radio\r\n                    id=\"outbound\"\r\n                    type=\"radio\"\r\n                    value={OUTBOUND}\r\n                    checked={selectedOption === OUTBOUND}\r\n                    onChange={changeEvent =>\r\n                      setSelectedOption(changeEvent.target.value)\r\n                    }\r\n                  />\r\n                }\r\n                label=\"Outbound only\"\r\n              />\r\n            </div>\r\n          </FormControl>\r\n          <XYPlot\r\n            height={(endHour - startHour) * 100}\r\n            width={600}\r\n            yDomain={\r\n              [\r\n                endHour,\r\n                startHour,\r\n              ] /* 3am the next day at the bottom, 3am for this day at the top */\r\n            }\r\n            margin={{ left: 80 }}\r\n          >\r\n            {series}\r\n            <Borders\r\n              style={{\r\n                bottom: { fill: '#fff' },\r\n                left: { fill: '#fff' },\r\n                right: { fill: '#fff' },\r\n                top: { fill: '#fff' },\r\n              }}\r\n            />\r\n\r\n            <HorizontalGridLines />\r\n            <VerticalGridLines />\r\n            <XAxis tickPadding={4} />\r\n            <YAxis hideLine tickPadding={4} tickFormat={hourFormatter} />\r\n\r\n            <ChartLabel\r\n              text=\"Time\"\r\n              className=\"alt-y-label\"\r\n              includeMargin\r\n              xPercent={0.02}\r\n              yPercent={0.3}\r\n              style={{\r\n                transform: 'rotate(-90)',\r\n              }}\r\n            />\r\n\r\n            <ChartLabel\r\n              text=\"Inbound Distance Along Route (miles)\"\r\n              className=\"alt-x-label\"\r\n              includeMargin\r\n              xPercent={0.7}\r\n              yPercent={1.0 - 85.0 / ((endHour - startHour) * 100.0)}\r\n              style={{\r\n                textAnchor: 'end',\r\n              }}\r\n            />\r\n            {hintValue ? (\r\n              <Hint\r\n                value={hintValue}\r\n                format={myHintValue => [\r\n                  { title: 'Stop', value: myHintValue.title },\r\n                  { title: 'Time', value: myHintValue.arrivalTimeString },\r\n                  { title: 'Vehicle ID', value: myHintValue.vehicleId },\r\n                ]}\r\n              />\r\n            ) : null}\r\n          </XYPlot>\r\n    </Fragment>\r\n  ) : <Fragment>{ arrivalsErr ? arrivalsErr : 'Loading...'}</Fragment>;\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  routes: state.routes.routes,\r\n  graphParams: state.routes.graphParams,\r\n  arrivals: state.routes.arrivals,\r\n  arrivalsErr: state.routes.arrivalsErr,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    myFetchArrivals: params => dispatch(fetchArrivals(params)),\r\n    myResetArrivals: params => dispatch(resetArrivals(params)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(MareyChart);\r\n","import React, { Fragment, useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { AppBar, Box, Tab, Tabs, Table, TableBody, TableCell, TableRow } from '@material-ui/core';\r\n\r\nimport InfoScoreCard from './InfoScoreCard';\r\nimport InfoScoreLegend from './InfoScoreLegend';\r\nimport TravelTimeChart from './TravelTimeChart';\r\nimport MareyChart from './MareyChart';\r\nimport { fetchPrecomputedWaitAndTripData } from '../actions';\r\nimport {\r\n  filterRoutes,\r\n  getAllWaits,\r\n  getAllSpeeds,\r\n  getAllScores,\r\n  computeGrades,\r\n  metersToMiles,\r\n} from '../helpers/routeCalculations';\r\n\r\n/**\r\n * Renders an \"nyc bus stats\" style summary of a route and direction.\r\n *\r\n * @param {any} props\r\n */\r\nfunction RouteSummary(props) {\r\n  const { graphParams, myFetchPrecomputedWaitAndTripData } = props;\r\n  const [tabValue, setTabValue] = React.useState(0);\r\n\r\n  useEffect(() => {\r\n    myFetchPrecomputedWaitAndTripData(graphParams);\r\n  }, [graphParams, myFetchPrecomputedWaitAndTripData]); // like componentDidMount, this runs only on first render\r\n\r\n  let wait = null;\r\n  let speed = null;\r\n  let dist = null;\r\n  let waitObj = null;\r\n  let waitRanking = null;\r\n  let longWait = null;\r\n  let speedObj = null;\r\n  let speedRanking = null;\r\n  let variability = null;\r\n  let grades = null;\r\n  let scoreObj = null;\r\n  let scoreRanking = null;\r\n  let allWaits = null;\r\n  let allSpeeds = null;\r\n  let allScores = null;\r\n\r\n  let routes = null;\r\n\r\n  if (graphParams.routeId) {\r\n    routes = props.routes ? filterRoutes(props.routes) : [];\r\n\r\n    allWaits = getAllWaits(props.waitTimesCache, graphParams, routes);\r\n    allSpeeds = getAllSpeeds(props.tripTimesCache, graphParams, routes);\r\n    allScores = getAllScores(routes, allWaits, allSpeeds);\r\n\r\n    const routeId = graphParams.routeId;\r\n    const route = routes.find(myRoute => myRoute.id === routeId);\r\n    if (route) {\r\n      const sumOfDistances = route.directions.reduce(\r\n        (total, value) => total + value.distance,\r\n        0,\r\n      );\r\n      dist = sumOfDistances / route.directions.length;\r\n    }\r\n\r\n    waitObj = allWaits ? allWaits.find(obj => obj.routeId === routeId) : null;\r\n    waitRanking = waitObj ? allWaits.length - allWaits.indexOf(waitObj) : null; // invert wait ranking to for shortest wait time\r\n    wait = waitObj ? waitObj.wait : null;\r\n    longWait = waitObj ? waitObj.longWait : null;\r\n\r\n    speedObj = allSpeeds\r\n      ? allSpeeds.find(obj => obj.routeId === routeId)\r\n      : null;\r\n    speedRanking = speedObj ? allSpeeds.indexOf(speedObj) + 1 : null;\r\n    speed = speedObj ? speedObj.speed : null;\r\n    variability = speedObj ? speedObj.variability : null;\r\n\r\n    scoreObj = allScores\r\n      ? allScores.find(obj => obj.routeId === routeId)\r\n      : null;\r\n    scoreRanking = scoreObj ? allScores.indexOf(scoreObj) + 1 : null;\r\n\r\n    grades = computeGrades(wait, longWait, speed, variability);\r\n  }\r\n\r\n  const popoverContentTotalScore = grades ? (\r\n    <Fragment>\r\n      Route score of {grades.totalScore} is the average of the following\r\n      subscores:\r\n      <Box pt={2}>\r\n        <Table>\r\n          <TableBody>\r\n            <TableRow>\r\n              <TableCell>Median wait</TableCell>\r\n              <TableCell align=\"right\">{grades.medianWaitScore}</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>Long wait probability</TableCell>\r\n              <TableCell align=\"right\">{grades.longWaitScore}</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>Average speed</TableCell>\r\n              <TableCell align=\"right\"> {grades.speedScore}</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>Travel time variability</TableCell>\r\n              <TableCell align=\"right\"> {grades.travelVarianceScore}</TableCell>\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </Box>\r\n    </Fragment>\r\n  ) : null;\r\n\r\n  const popoverContentWait = grades ? (\r\n    <Fragment>\r\n      Median wait of {wait === null ? '--' : wait.toFixed(1)} min gets a score\r\n      of {grades.medianWaitScore}.\r\n      <Box pt={2}>\r\n        <InfoScoreLegend\r\n          rows={[\r\n            { label: '5 min or less', value: 100 },\r\n            { label: '6.25 min', value: 75 },\r\n            { label: '7.5 min', value: 50 },\r\n            { label: '8.75', value: 25 },\r\n            { label: '10 min or more', value: 0 },\r\n          ]}\r\n        />\r\n      </Box>\r\n    </Fragment>\r\n  ) : null;\r\n\r\n  const popoverContentLongWait = grades ? (\r\n    <Fragment>\r\n      Long wait probability is the chance a rider has of a wait of twenty minutes or\r\n      longer after arriving randomly at a stop.\r\n      Probability of{' '}\r\n      {(longWait * 100).toFixed(1) /* be more precise than card */}% gets a\r\n      score of {grades.longWaitScore}.\r\n      <Box pt={2}>\r\n        <InfoScoreLegend\r\n          rows={[\r\n            { label: '10% or less', value: 100 },\r\n            { label: '15.75%', value: 75 },\r\n            { label: '21.5%', value: 50 },\r\n            { label: '27.25%', value: 25 },\r\n            { label: '33% or more', value: 0 },\r\n          ]}\r\n        />\r\n      </Box>\r\n    </Fragment>\r\n  ) : null;\r\n\r\n  const popoverContentSpeed = grades ? (\r\n    <Fragment>\r\n      This is the average of the speeds for median end to end trips, in all directions.\r\n      Average speed of{' '}\r\n      {speed === null || Number.isNaN(speed) ? '--' : speed.toFixed(1)} mph gets\r\n      a score of {grades.speedScore}.\r\n      <Box pt={2}>\r\n        <InfoScoreLegend\r\n          rows={[\r\n            { label: '10 mph or more', value: 100 },\r\n            { label: '8.75 mph', value: 75 },\r\n            { label: '7.5 mph', value: 50 },\r\n            { label: '6.25 mph', value: 25 },\r\n            { label: '5 mph or less', value: 0 },\r\n          ]}\r\n        />\r\n      </Box>\r\n    </Fragment>\r\n  ) : null;\r\n\r\n  const popoverContentTravelVariability = grades ? (\r\n    <Fragment>\r\n      Travel time variability is the 90th percentile end to end travel time minus the 10th percentile\r\n      travel time.  This measures how much extra travel time is needed for some trips.\r\n      Variability of{' '}\r\n      {variability === null ? '--' : '\\u00b1' + variability.toFixed(1)} min gets a score of{' '}\r\n      {grades.travelVarianceScore}.\r\n      <Box pt={2}>\r\n        <InfoScoreLegend\r\n          rows={[\r\n            { label: '5 min or less', value: 100 },\r\n            { label: '6.25 min', value: 75 },\r\n            { label: '7.5 min', value: 50 },\r\n            { label: '8.75 min', value: 25 },\r\n            { label: '10 min or more', value: 0 },\r\n          ]}\r\n        />\r\n      </Box>\r\n    </Fragment>\r\n  ) : null;\r\n\r\n  function handleTabChange(event, newValue) {\r\n    setTabValue(newValue);\r\n  }\r\n\r\n  function a11yProps(index) {\r\n    return {\r\n      id: `simple-tab-${index}`,\r\n      'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n  }\r\n\r\n  const SUMMARY = 0;\r\n  const TRAVEL_TIME = 1;\r\n  const MAREY_CHART = 2;\r\n\r\n  return (\r\n    <Fragment>\r\n    \r\n      <br />\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs\r\n          value={tabValue}\r\n          onChange={handleTabChange}\r\n          aria-label=\"tab bar\"\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"on\"\r\n        >\r\n          <Tab\r\n            style={{ minWidth: 72 }}\r\n            label=\"Summary\"\r\n            {...a11yProps(SUMMARY)}\r\n          />\r\n          <Tab\r\n            style={{ minWidth: 72 }}\r\n            label=\"Travel Time\"\r\n            {...a11yProps(TRAVEL_TIME)}\r\n          />\r\n          <Tab\r\n            style={{ minWidth: 72 }}\r\n            label=\"Marey Chart\"\r\n            {...a11yProps(MAREY_CHART)}\r\n          />\r\n        </Tabs>\r\n      </AppBar>    \r\n    \r\n    \r\n      <Box p={2} hidden={tabValue !== SUMMARY}>\r\n        <div style={{ padding: 8 }}>\r\n        <Grid container spacing={4}>\r\n          <InfoScoreCard\r\n            grades={wait && speed && grades ? grades : null}\r\n            gradeName=\"totalScore\"\r\n            hideRating\r\n            title=\"Route Score\"\r\n            largeValue={wait && speed ? grades.totalScore : '--'}\r\n            smallValue={`/${grades ? grades.highestPossibleScore : '--'}`}\r\n            bottomContent={\r\n              scoreRanking\r\n                ? `#${scoreRanking} out of ${allScores.length} routes`\r\n                : 'No data'\r\n            }\r\n            popoverContent={popoverContentTotalScore}\r\n          />\r\n\r\n          <InfoScoreCard\r\n            grades={wait && grades ? grades : null}\r\n            gradeName=\"medianWaitScore\"\r\n            title=\"Median Wait\"\r\n            largeValue={wait === null ? '--' : wait.toFixed(0)}\r\n            smallValue=\"&nbsp;min\"\r\n            bottomContent={\r\n              <Fragment>\r\n                {waitRanking\r\n                  ? `#${waitRanking} of ${allWaits.length} for shortest wait`\r\n                  : null}\r\n              </Fragment>\r\n            }\r\n            popoverContent={popoverContentWait}\r\n          />\r\n\r\n          <InfoScoreCard\r\n            grades={wait && grades ? grades : null}\r\n            gradeName=\"longWaitScore\"\r\n            title=\"Long Wait %\"\r\n            largeValue={(longWait * 100).toFixed(0)}\r\n            smallValue=\"%\"\r\n            bottomContent={\r\n              <Fragment>\r\n                {longWait > 0\r\n                  ? `1 time out of ${Math.round(1 / longWait)}`\r\n                  : ''}\r\n              </Fragment>\r\n            }\r\n            popoverContent={popoverContentLongWait}\r\n          />\r\n\r\n          <InfoScoreCard\r\n            grades={speed && grades ? grades : null}\r\n            gradeName=\"speedScore\"\r\n            title=\"Average Speed\"\r\n            largeValue={\r\n              speed === null || Number.isNaN(speed) ? '--' : speed.toFixed(0)\r\n            }\r\n            smallValue=\"&nbsp;mph\"\r\n            bottomContent={\r\n              <Fragment>\r\n                {speedRanking\r\n                  ? `#${speedRanking} of ${allSpeeds.length} for fastest`\r\n                  : null}\r\n                <br />\r\n                {metersToMiles(dist).toFixed(1)} miles\r\n              </Fragment>\r\n            }\r\n            popoverContent={popoverContentSpeed}\r\n          />\r\n\r\n          <InfoScoreCard\r\n            grades={speed && grades ? grades : null}\r\n            gradeName=\"travelVarianceScore\"\r\n            title=\"Travel Time Variability\"\r\n            largeValue={variability === null ? '--' : '\\u00b1' + variability.toFixed(0)}\r\n            smallValue=\"&nbsp;min\"\r\n            bottomContent=\"&nbsp;\"\r\n            popoverContent={popoverContentTravelVariability}\r\n          />\r\n\r\n        </Grid>\r\n        </div>\r\n        </Box>\r\n      <Box p={2} hidden={tabValue !== TRAVEL_TIME} style={{overflowX: 'auto'}}>\r\n        <TravelTimeChart />\r\n      </Box>\r\n      <Box p={2} hidden={tabValue !== MAREY_CHART} style={{overflowX: 'auto'}}>\r\n        <MareyChart hidden={tabValue !== MAREY_CHART}/>\r\n      </Box>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  routes: state.routes.routes,\r\n  graphParams: state.routes.graphParams,\r\n  waitTimesCache: state.routes.waitTimesCache,\r\n  tripTimesCache: state.routes.tripTimesCache,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    myFetchPrecomputedWaitAndTripData: params =>\r\n      dispatch(fetchPrecomputedWaitAndTripData(params)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(RouteSummary);\r\n","import React, { Fragment, useEffect } from 'react';\r\nimport Box from '@material-ui/core/Box';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport AppBar from '@material-ui/core/AppBar';\r\n\r\nimport { connect } from 'react-redux';\r\nimport Info from '../components/Info';\r\nimport MapStops from '../components/MapStops';\r\nimport SidebarButton from '../components/SidebarButton';\r\nimport DateTimePanel from '../components/DateTimePanel';\r\n\r\nimport { getAgency } from '../config';\r\nimport ControlPanel from '../components/ControlPanel';\r\nimport RouteSummary from '../components/RouteSummary';\r\n\r\nimport { fetchRoutes } from '../actions';\r\n\r\nfunction RouteScreen(props) {\r\n  const {\r\n    graphData,\r\n    graphError,\r\n    graphParams,\r\n    intervalData,\r\n    intervalError,\r\n    routes,\r\n    myFetchRoutes,\r\n  } = props;\r\n\r\n  const agencyId = graphParams ? graphParams.agencyId : null;\r\n\r\n  useEffect(() => {\r\n    if (!routes && agencyId) {\r\n      myFetchRoutes({agencyId: agencyId});\r\n    }\r\n  }, [agencyId, routes, myFetchRoutes]); // like componentDidMount, this runs only on first render\r\n\r\n  const agency = getAgency(agencyId);\r\n\r\n  const selectedRoute =\r\n    routes && graphParams && graphParams.routeId\r\n      ? routes.find(route => (route.id === graphParams.routeId && route.agencyId === agencyId))\r\n      : null;\r\n\r\n  const direction =\r\n    selectedRoute && graphParams.directionId\r\n      ? selectedRoute.directions.find(\r\n          myDirection => myDirection.id === graphParams.directionId,\r\n        )\r\n      : null;\r\n  const startStopInfo =\r\n    direction && graphParams.startStopId\r\n      ? selectedRoute.stops[graphParams.startStopId]\r\n      : null;\r\n  const endStopInfo =\r\n    direction && graphParams.endStopId\r\n      ? selectedRoute.stops[graphParams.endStopId]\r\n      : null;\r\n\r\n  return (\r\n    <Fragment>\r\n      <AppBar position=\"relative\">\r\n        <Toolbar>\r\n          <SidebarButton />\r\n          <div className=\"page-title\">\r\n            {agency ? agency.title : null}\r\n          </div>\r\n          <div style={{flexGrow: 1}}/>\r\n          <DateTimePanel dateRangeSupported={graphData || graphError}/>\r\n        </Toolbar>\r\n      </AppBar>\r\n      \r\n      <Paper>\r\n        <Box p={2} className=\"page-title\">            \r\n          {selectedRoute ? ` ${selectedRoute.title}` : null}\r\n          {direction ? ` > ${direction.title}` : null}\r\n          &nbsp;\r\n          {startStopInfo ? `(from ${startStopInfo.title}` : null}\r\n          {endStopInfo ? ` to ${endStopInfo.title})` : null}\r\n        </Box>\r\n      </Paper>\r\n\r\n      <Grid container spacing={0}>\r\n        <Grid item xs={12} sm={6}>\r\n          <MapStops routes={routes} />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          {/* control panel and map are full width for 640px windows or smaller, else half width */}\r\n          <ControlPanel routes={routes} />\r\n          {graphData ||\r\n          graphError /* if we have graph data or an error, then show the info component */ ? (\r\n            <Info\r\n              graphData={graphData}\r\n              graphError={graphError}\r\n              graphParams={graphParams}\r\n              routes={routes}\r\n              intervalData={intervalData}\r\n              intervalError={intervalError}\r\n            />\r\n          ) : (\r\n            /* if no graph data, show the info summary component */\r\n            <RouteSummary />\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  graphData: state.fetchGraph.graphData,\r\n  routes: state.routes.routes,\r\n  graphError: state.fetchGraph.err,\r\n  intervalData: state.fetchGraph.intervalData,\r\n  intervalError: state.fetchGraph.intervalErr,\r\n  graphParams: state.routes.graphParams,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  myFetchRoutes: params => dispatch(fetchRoutes(params)),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(RouteScreen);\r\n","import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  XYPlot,\r\n  HorizontalGridLines,\r\n  VerticalGridLines,\r\n  XAxis,\r\n  YAxis,\r\n  ChartLabel,\r\n  CustomSVGSeries,\r\n} from 'react-vis';\r\nimport { getAllWaits, getAllSpeeds } from '../helpers/routeCalculations';\r\n\r\n/**\r\n * This is a debugging chart that helps finds routes with anomalous\r\n * overall speeds or waits.  It plots routes by wait on the x-axis (more\r\n * frequent on the right) and speed on the y-axis (faster on top).\r\n *\r\n * @param {any} props\r\n */\r\nfunction QuadrantChart(props) {\r\n  const allWaits = getAllWaits(\r\n    props.waitTimesCache,\r\n    props.graphParams,\r\n    props.routes,\r\n  );\r\n  const allSpeeds = getAllSpeeds(\r\n    props.tripTimesCache,\r\n    props.graphParams,\r\n    props.routes,\r\n  );\r\n\r\n  const quadrantData = allSpeeds\r\n    ? allSpeeds.map(speed => {\r\n        const waitObj = allWaits.find(\r\n          myWaitObj => myWaitObj.routeId === speed.routeId,\r\n        );\r\n        return {\r\n          x: waitObj ? waitObj.wait : 0,\r\n          y: speed.speed,\r\n          title: speed.routeId,\r\n        };\r\n      })\r\n    : [];\r\n\r\n  return (\r\n    <XYPlot height={600} width={1000} xDomain={[30, 0]} xxyDomain={[0, 30]}>\r\n      <HorizontalGridLines />\r\n      <VerticalGridLines />\r\n      <XAxis top={300} style={{ text: { stroke: 'none', fill: '#cccccc' } }} />\r\n      <YAxis left={500} style={{ text: { stroke: 'none', fill: '#cccccc' } }} />\r\n\r\n      <CustomSVGSeries\r\n        className=\"custom-marking\"\r\n        customComponent={row => {\r\n          return (\r\n            <g className=\"inner-inner-component\">\r\n              <circle cx=\"0\" cy=\"0\" r={row.size || 3} fill=\"#aa82c5\" />\r\n              <text x={0} y={0} fontSize=\"75%\" fill=\"#450042\">\r\n                <tspan x=\"5\" y=\"4\">{`${row.title}`}</tspan>\r\n              </text>\r\n            </g>\r\n          );\r\n        }}\r\n        data={quadrantData}\r\n      />\r\n\r\n      <ChartLabel\r\n        text=\"speed (mph)\"\r\n        className=\"alt-y-label\"\r\n        includeMargin={false}\r\n        xPercent={0.54}\r\n        yPercent={0.06}\r\n        style={{\r\n          transform: 'rotate(-90)',\r\n          textAnchor: 'end',\r\n        }}\r\n      />\r\n\r\n      <ChartLabel\r\n        text=\"avg wait (min)\"\r\n        className=\"alt-x-label\"\r\n        includeMargin={false}\r\n        xPercent={0.94}\r\n        yPercent={0.5}\r\n      />\r\n    </XYPlot>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  routes: state.routes.routes,\r\n  graphParams: state.routes.graphParams,\r\n  waitTimesCache: state.routes.waitTimesCache,\r\n  tripTimesCache: state.routes.tripTimesCache,\r\n});\r\n\r\nexport default connect(mapStateToProps)(QuadrantChart);\r\n","import React, { useEffect, Fragment } from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport AppBar from '@material-ui/core/AppBar';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Agencies } from '../config';\r\nimport TravelTimeChart from '../components/TravelTimeChart';\r\nimport QuadrantChart from '../components/QuadrantChart';\r\nimport SidebarButton from '../components/SidebarButton';\r\nimport DateTimePanel from '../components/DateTimePanel';\r\n\r\nimport { fetchRoutes, fetchPrecomputedWaitAndTripData, handleGraphParams } from '../actions';\r\n\r\nconst useStyles = makeStyles({\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n});\r\n\r\n/**\r\n * Data diagnostic screen.  Plots a quadrant chart and travel across stops\r\n * for all routes.  Access via /dataDiagnostic.\r\n */\r\nfunction DataDiagnostic(props) {\r\n  const {\r\n    graphParams,\r\n    routes,\r\n    myFetchRoutes,\r\n    myFetchPrecomputedWaitAndTripData,\r\n    myHandleGraphParams,\r\n  } = props;\r\n\r\n  const agency = Agencies[0];\r\n\r\n  useEffect(() => {\r\n    myHandleGraphParams({agencyId: agency.id});\r\n\r\n    if (!routes) {\r\n      myFetchRoutes({agencyId: agency.id});\r\n    }\r\n    myFetchPrecomputedWaitAndTripData(graphParams);\r\n  }, [routes, myFetchRoutes, myFetchPrecomputedWaitAndTripData, graphParams, myHandleGraphParams, agency]); // like componentDidMount, this runs only on first render\r\n\r\n  const classes = useStyles();\r\n\r\n  let charts = null;\r\n\r\n  if (routes) {\r\n    charts = routes.map(route =>\r\n      route.directions.map(direction => {\r\n        return (\r\n          <Grid item key={route.id + direction.id}>\r\n            Route: {route.id} Direction: {direction.id}\r\n            <TravelTimeChart routeId={route.id} directionId={direction.id} />\r\n          </Grid>\r\n        );\r\n      }),\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <AppBar position=\"relative\">\r\n        <Toolbar>\r\n          <SidebarButton />\r\n          <div className={classes.title}>{agency.title}</div>\r\n          <DateTimePanel />\r\n        </Toolbar>\r\n      </AppBar>\r\n      Date: {graphParams.date} Time: {graphParams.startTime} -{' '}\r\n      {graphParams.endTime}\r\n      <QuadrantChart />\r\n      <Grid container spacing={0}>\r\n        {charts}\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  routes: state.routes.routes,\r\n  graphParams: state.routes.graphParams,\r\n  waitTimesCache: state.routes.waitTimesCache,\r\n  tripTimesCache: state.routes.tripTimesCache,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  myFetchRoutes: props => dispatch(fetchRoutes(props)),\r\n  myFetchPrecomputedWaitAndTripData: params =>\r\n    dispatch(fetchPrecomputedWaitAndTripData(params)),\r\n  myHandleGraphParams: props => dispatch(handleGraphParams(props)),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(DataDiagnostic);\r\n","/* eslint-disable */\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Map, TileLayer } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport Control from 'react-leaflet-control';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport SidebarButton from '../components/SidebarButton';\r\nimport DateTimePanel from '../components/DateTimePanel';\r\n\r\nimport { fetchRoutes } from '../actions';\r\nimport { S3Bucket, MetricsBaseURL, Agencies, WaitTimesVersion, TripTimesVersion, RoutesVersion } from '../config';\r\nimport { getTripPoints, isInServiceArea } from '../helpers/mapGeometry';\r\n\r\nimport './Isochrone.css';\r\n\r\nconst isochroneMinutes = 5;\r\nconst maxColoredTripMin = 60;\r\nconst WalkMetersPerMinute = 1.0 * 60;\r\n\r\nconst tripMinOptions = {\r\n  5: { color: '#057F79' },\r\n  10: { color: '#02BB0F' },\r\n  15: { color: '#3ae100' },\r\n  20: { color: '#83dd00' },\r\n  25: { color: '#cad900' },\r\n  30: { color: '#d59d00' },\r\n  35: { color: '#d25400' },\r\n  40: { color: '#ce0d00' },\r\n  45: { color: '#c200b6' },\r\n  50: { color: '#8b00bf' },\r\n  55: { color: '#4900bf' },\r\n  60: { color: '#220D3B' },\r\n};\r\n\r\nconst defaultLayerOptions = { color: '#666' };\r\n\r\nconst redIcon = new L.Icon({\r\n  iconUrl: `${process.env.PUBLIC_URL}/marker-icon-2x-red.png`,\r\n  shadowUrl:\r\n    'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\r\n  iconSize: [25, 41],\r\n  iconAnchor: [12, 41],\r\n  popupAnchor: [1, -34],\r\n  shadowSize: [41, 41],\r\n});\r\n\r\nconst computeCache = {};\r\n\r\nfunction getDirectionInfo(directionId, routeInfo) {\r\n  return routeInfo.directions.find(dirInfo => dirInfo.id === directionId);\r\n}\r\n\r\nclass Isochrone extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // for now, only supports 1 agency at a time.\r\n    // todo: support multiple agencies on one map\r\n    const agency = Agencies[0];\r\n    this.agencyId = agency.id;\r\n\r\n    this.initialZoom = agency.initialMapZoom;\r\n    this.initialCenter = agency.initialMapCenter;\r\n    const defaultDisabledRoutes = agency.defaultDisabledRoutes || [];\r\n\r\n    this.state = {\r\n      stat: 'median',\r\n      maxTripMin: 90,\r\n      computedMaxTripMin: null,\r\n      computeId: null,\r\n      computing: false,\r\n      latLng: null,\r\n      endLatLng: null,\r\n      tripInfo: null,\r\n      enabledRoutes: {},\r\n      noData: false,\r\n    };\r\n\r\n    let workerUrl = `${\r\n      process.env.PUBLIC_URL\r\n    }/isochrone-worker.js?v=${Math.random()}`;\r\n    if (MetricsBaseURL) {\r\n      workerUrl += `&base=${encodeURIComponent(MetricsBaseURL)}`;\r\n    }\r\n\r\n    workerUrl += `&s3_bucket=${encodeURIComponent(S3Bucket)}`;\r\n    workerUrl += `&agency_id=${encodeURIComponent(this.agencyId)}`;\r\n    workerUrl += `&routes_version=${encodeURIComponent(RoutesVersion)}`;\r\n    workerUrl += `&wait_times_version=${encodeURIComponent(WaitTimesVersion)}`;\r\n    workerUrl += `&trip_times_version=${encodeURIComponent(TripTimesVersion)}`;\r\n\r\n    const isochroneWorker = new Worker(workerUrl);\r\n\r\n    this.isochroneWorker = isochroneWorker;\r\n\r\n    this.layers = [];\r\n    this.isochroneLayers = [];\r\n    this.tripLayers = [];\r\n    this.mapRef = React.createRef();\r\n\r\n    defaultDisabledRoutes.forEach(routeId => {\r\n      this.state.enabledRoutes[routeId] = false;\r\n    });\r\n\r\n    this.handleMapClick = this.handleMapClick.bind(this);\r\n    this.handleStatChange = this.handleStatChange.bind(this);\r\n    this.handleToggleRoute = this.handleToggleRoute.bind(this);\r\n    this.handleMaxTripMinChange = this.handleMaxTripMinChange.bind(this);\r\n    this.selectAllRoutesClicked = this.selectAllRoutesClicked.bind(this);\r\n    this.selectNoRoutesClicked = this.selectNoRoutesClicked.bind(this);\r\n    this.resetMapClicked = this.resetMapClicked.bind(this);\r\n    this.onWorkerMessage = this.onWorkerMessage.bind(this);\r\n    this.recomputeIsochrones = this.recomputeIsochrones.bind(this);\r\n    this.maxTripMinChanged = this.maxTripMinChanged.bind(this);\r\n\r\n    isochroneWorker.onmessage = this.onWorkerMessage;\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!this.props.routes) {\r\n      this.props.fetchRoutes({agencyId: this.agencyId});\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (\r\n      this.props.date !== prevProps.date ||\r\n      this.props.startTime !== prevProps.startTime ||\r\n      this.props.endTime !== prevProps.endTime\r\n    ) {\r\n      this.recomputeIsochrones();\r\n    }\r\n  }\r\n\r\n  onWorkerMessage(e) {\r\n    const data = e.data;\r\n    if (data.type === 'reachableLocations') {\r\n      const computeId = data.computeId;\r\n      if (computeCache[computeId]) {\r\n        computeCache[computeId][data.tripMin] = data;\r\n      }\r\n      if (computeId === this.state.computeId) {\r\n        this.addReachableLocationsLayer(data);\r\n      }\r\n      this.setState({noData: false});\r\n    } else if (data.type === 'error') {\r\n      if (data.error.status >= 400 && data.error.status < 500) {\r\n        // there is no JSON data for this day\r\n        this.setState({noData: true});\r\n      } else {\r\n        this.showError(data.error.message);\r\n      }\r\n    } else {\r\n      console.log(e.data);\r\n    }\r\n  }\r\n\r\n  showError(message) {\r\n    alert(message);\r\n  }\r\n\r\n  handleMapClick(event) {\r\n    if (this.state.computeId) {\r\n      return;\r\n    }\r\n    this.resetMap();\r\n    this.computeIsochrones(event.latlng, null);\r\n  }\r\n\r\n  addReachableLocationsLayer(data) {\r\n    const tripMin = data.tripMin;\r\n    const reachableCircles = data.circles;\r\n    const geoJson = data.geoJson;\r\n\r\n    if (this.state.computeId !== data.computeId) {\r\n      return;\r\n    }\r\n\r\n    if (this.state.computing && tripMin === this.state.maxTripMin) {\r\n      this.setState({ computing: false });\r\n    }\r\n\r\n    const layerOptions = tripMinOptions[`${tripMin}`] || defaultLayerOptions;\r\n\r\n    const diffLayer = L.geoJson(\r\n      geoJson,\r\n      Object.assign(\r\n        { bubblingMouseEvents: false, fillOpacity: 0.4, stroke: false },\r\n        layerOptions,\r\n      ),\r\n    );\r\n\r\n    const map = this.mapRef.current.leafletElement;\r\n\r\n    diffLayer.addTo(map);\r\n\r\n    diffLayer.on('click', e => {\r\n      const endLatLng = e.latlng;\r\n      this.showTripInfo(endLatLng, reachableCircles);\r\n    });\r\n\r\n    diffLayer.on('dblclick', e => {\r\n      this.resetMap();\r\n      this.computeIsochrones(e.latlng);\r\n    });\r\n\r\n    this.isochroneLayers.push({ tripMin, layer: diffLayer });\r\n\r\n    const curEndLatLng = this.state.endLatLng;\r\n\r\n    // restore end latlng from previous view\r\n    if (curEndLatLng && !this.tripLayers.length) {\r\n      for (const circle of reachableCircles) {\r\n        const dist = map.distance(circle, curEndLatLng);\r\n        if (dist <= circle.radius) {\r\n          this.showTripInfo(curEndLatLng, reachableCircles);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  showTripInfo(endLatLng, reachableCircles) {\r\n    this.setState({ endLatLng });\r\n\r\n    const map = this.mapRef.current.leafletElement;\r\n\r\n    let allOptions = [];\r\n    reachableCircles.forEach(circle => {\r\n      const dist = map.distance(circle, endLatLng);\r\n      if (dist <= circle.radius) {\r\n        const walkMin = dist / WalkMetersPerMinute;\r\n        const tripMin = walkMin + circle.tripMin;\r\n\r\n        allOptions.push({\r\n          tripMin,\r\n          walkMin,\r\n          circle,\r\n        });\r\n      }\r\n    });\r\n\r\n    this.clearTripLayers(false);\r\n\r\n    if (allOptions.length) {\r\n      allOptions = allOptions.sort(function(o1, o2) {\r\n        return o1.tripMin - o2.tripMin;\r\n      });\r\n\r\n      const seenRoutes = {};\r\n      let numOptions = 0;\r\n\r\n      const tripInfo = [];\r\n      for (const option of allOptions) {\r\n        const circle = option.circle;\r\n\r\n        if (seenRoutes[circle.routes]) {\r\n          continue;\r\n        }\r\n\r\n        seenRoutes[circle.routes] = true;\r\n\r\n        if (numOptions < 2 || !circle.tripItems.length) {\r\n          numOptions += 1;\r\n\r\n          for (const tripItem of circle.tripItems) {\r\n            if (tripItem.route) {\r\n              const routeInfo = this.props.routes.find(\r\n                route => route.id === tripItem.route,\r\n              );\r\n\r\n              if (routeInfo) {\r\n                const dirInfo = getDirectionInfo(tripItem.direction, routeInfo);\r\n\r\n                const fromStop = tripItem.fromStop;\r\n                const toStop = tripItem.toStop;\r\n\r\n                const fromStopInfo = routeInfo.stops[fromStop];\r\n                const toStopInfo = routeInfo.stops[toStop];\r\n\r\n                const tripPoints = getTripPoints(\r\n                  routeInfo,\r\n                  dirInfo,\r\n                  fromStop,\r\n                  toStop,\r\n                );\r\n\r\n                if (tripPoints.length) {\r\n                  // draw line segments along the route between fromStop and toStop\r\n                  const polyLine = L.polyline(tripPoints).addTo(map);\r\n                  polyLine.bindTooltip(routeInfo.id, {\r\n                    direction: 'center',\r\n                    opacity: 0.9,\r\n                    permanent: true,\r\n                  });\r\n\r\n                  this.tripLayers.push(polyLine);\r\n\r\n                  // draw small circles at fromStop and toStop\r\n                  this.tripLayers.push(\r\n                    L.circle(fromStopInfo, 40, {\r\n                      color: '#090',\r\n                      fillOpacity: 0.8,\r\n                      stroke: false,\r\n                    }).addTo(map),\r\n                  );\r\n                  this.tripLayers.push(\r\n                    L.circle(toStopInfo, 40, {\r\n                      color: '#900',\r\n                      fillOpacity: 0.8,\r\n                      stroke: false,\r\n                    }).addTo(map),\r\n                  );\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          tripInfo.push(\r\n            <div key={numOptions} className=\"isochrone-trip\">\r\n              <div>\r\n                <strong>\r\n                  {`${option.tripMin.toFixed(1)} min [${circle.routes ||\r\n                    'walk'}]`}\r\n                </strong>\r\n              </div>\r\n              {circle.tripItems.map((item, index) => (\r\n                <div key={index}>\r\n                  <em>{item.t.toFixed(1)} min</em>: {item.desc}\r\n                </div>\r\n              ))}\r\n              {option.walkMin > 0.05 && circle.tripItems.length ? (\r\n                <div>\r\n                  <em>{option.walkMin.toFixed(1)} min</em>: walk to destination\r\n                </div>\r\n              ) : null}\r\n            </div>,\r\n          );\r\n        }\r\n      }\r\n\r\n      const marker = L.marker(endLatLng, { icon: redIcon }).addTo(map);\r\n\r\n      this.tripLayers.push(marker);\r\n\r\n      this.setState({ tripInfo });\r\n    }\r\n  }\r\n\r\n  computeIsochrones(latLng, endLatLng) {\r\n    if (!isInServiceArea(this.agencyId, latLng)) {\r\n      return;\r\n    }\r\n\r\n    const dateStr = this.props.date;\r\n    const startTimeStr = this.props.startTime;\r\n    const endTimeStr = this.props.endTime;\r\n    const timeStr =\r\n      startTimeStr && endTimeStr ? `${startTimeStr}-${endTimeStr}` : '';\r\n\r\n    const { maxTripMin, stat, enabledRoutes } = this.state;\r\n\r\n    const enabledRoutesArr = [];\r\n\r\n    this.props.routes.forEach(route => {\r\n      if (enabledRoutes[route.id] !== false) {\r\n        enabledRoutesArr.push(route.id);\r\n      }\r\n    });\r\n\r\n    const computeId = [\r\n      latLng.lat,\r\n      latLng.lng,\r\n      dateStr,\r\n      timeStr,\r\n      stat,\r\n      maxTripMin,\r\n      enabledRoutesArr.join(','),\r\n    ].join(',');\r\n\r\n    this.setState({\r\n      latLng,\r\n      endLatLng,\r\n      computedMaxTripMin: maxTripMin,\r\n      computeId,\r\n    });\r\n\r\n    const map = this.mapRef.current.leafletElement;\r\n\r\n    let newLatLng;\r\n    const marker = L.marker(latLng, { draggable: true }).addTo(map);\r\n    marker.on('move', function(e) {\r\n      newLatLng = e.latlng;\r\n    });\r\n    marker.on('moveend', () => {\r\n      // event arg removed\r\n      if (newLatLng) {\r\n        this.resetMap();\r\n        this.computeIsochrones(newLatLng);\r\n      }\r\n    });\r\n    this.layers.push(marker);\r\n\r\n    if (computeCache[computeId] && computeCache[computeId][maxTripMin]) {\r\n      for (\r\n        let tripMin = isochroneMinutes;\r\n        tripMin <= maxTripMin;\r\n        tripMin += isochroneMinutes\r\n      ) {\r\n        const cachedLayer = computeCache[computeId][tripMin];\r\n        if (cachedLayer) {\r\n          this.addReachableLocationsLayer(cachedLayer);\r\n        }\r\n      }\r\n      return;\r\n    }\r\n\r\n    computeCache[computeId] = {};\r\n\r\n    const tripMins = [];\r\n    for (\r\n      let m = isochroneMinutes;\r\n      m <= maxTripMin && m <= maxColoredTripMin;\r\n      m += isochroneMinutes\r\n    ) {\r\n      tripMins.push(m);\r\n    }\r\n    if (maxTripMin > maxColoredTripMin) {\r\n      tripMins.push(maxTripMin);\r\n    }\r\n\r\n    this.setState({\r\n      computing: true,\r\n    });\r\n\r\n    this.isochroneWorker.postMessage({\r\n      action: 'computeIsochrones',\r\n      latlng: latLng,\r\n      routes: enabledRoutesArr,\r\n      dateStr,\r\n      timeStr,\r\n      tripMins,\r\n      stat,\r\n      computeId,\r\n    });\r\n  }\r\n\r\n  handleStatChange(event) {\r\n    this.setState({ stat: event.target.value }, this.recomputeIsochrones);\r\n  }\r\n\r\n  handleMaxTripMinChange(event) {\r\n    this.setState(\r\n      { maxTripMin: parseInt(event.target.value, 10) },\r\n      this.maxTripMinChanged,\r\n    );\r\n  }\r\n\r\n  maxTripMinChanged() {\r\n    const { maxTripMin, computedMaxTripMin } = this.state;\r\n\r\n    if (\r\n      computedMaxTripMin &&\r\n      (maxTripMin > computedMaxTripMin ||\r\n        !this.isochroneLayers.find(iso => iso.tripMin === maxTripMin))\r\n    ) {\r\n      this.recomputeIsochrones();\r\n    } else {\r\n      const map = this.mapRef.current.leafletElement;\r\n\r\n      this.isochroneLayers.forEach(isochroneLayer => {\r\n        if (isochroneLayer.tripMin <= maxTripMin) {\r\n          isochroneLayer.layer.addTo(map);\r\n        } else {\r\n          isochroneLayer.layer.remove();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  handleToggleRoute(event) {\r\n    const routeId = event.target.value;\r\n    const checked = event.target.checked;\r\n\r\n    this.setState(\r\n      { enabledRoutes: { ...this.state.enabledRoutes, [routeId]: checked } },\r\n      this.recomputeIsochrones,\r\n    );\r\n  }\r\n\r\n  selectAllRoutesClicked() {\r\n    // event arg\r\n    this.selectAllRoutes(true);\r\n  }\r\n\r\n  selectNoRoutesClicked() {\r\n    // event arg\r\n    this.selectAllRoutes(false);\r\n  }\r\n\r\n  resetMapClicked() {\r\n    // event arg\r\n    this.resetMap();\r\n  }\r\n\r\n  recomputeIsochrones() {\r\n    const { latLng, endLatLng } = this.state;\r\n    if (latLng) {\r\n      this.resetMap();\r\n      this.computeIsochrones(latLng, endLatLng);\r\n    }\r\n  }\r\n\r\n  resetMap() {\r\n    const map = this.mapRef.current.leafletElement;\r\n\r\n    map.closePopup();\r\n\r\n    this.setState({ computeId: null, latLng: null, endLatLng: null });\r\n\r\n    this.isochroneLayers.forEach(isochroneLayer => {\r\n      isochroneLayer.layer.remove();\r\n    });\r\n\r\n    this.layers.forEach(layer => {\r\n      layer.remove();\r\n    });\r\n\r\n    this.layers = [];\r\n    this.isochroneLayers = [];\r\n    this.clearTripLayers();\r\n  }\r\n\r\n  clearTripLayers(clearTripInfo) {\r\n    this.tripLayers.forEach(layer => {\r\n      layer.remove();\r\n    });\r\n    this.tripLayers = [];\r\n\r\n    if (clearTripInfo !== false) {\r\n      this.setState({ tripInfo: null });\r\n    }\r\n  }\r\n\r\n  selectAllRoutes(enabled) {\r\n    const { routes } = this.props;\r\n    if (!routes) {\r\n      return;\r\n    }\r\n\r\n    const enabledRoutes = {};\r\n    routes.forEach(route => {\r\n      enabledRoutes[route.id] = enabled;\r\n    });\r\n\r\n    this.setState({ enabledRoutes }, this.recomputeIsochrones);\r\n  }\r\n\r\n  makeRouteToggle(route) {\r\n    let enabled = this.state.enabledRoutes[route.id];\r\n    if (enabled == null) {\r\n      enabled = true;\r\n    }\r\n\r\n    return (\r\n      <ListItem key={route.id}>\r\n        <FormControlLabel\r\n          control={\r\n            <Checkbox\r\n              checked={enabled}\r\n              onChange={this.handleToggleRoute}\r\n              value={route.id}\r\n              color=\"primary\"\r\n            />\r\n          }\r\n          label={route.id}\r\n        />\r\n      </ListItem>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const { routes } = this.props;\r\n\r\n    const colors = [];\r\n    const times = [];\r\n\r\n    for (\r\n      let endTime = isochroneMinutes;\r\n      endTime <= maxColoredTripMin;\r\n      endTime += isochroneMinutes\r\n    ) {\r\n      colors.push(\r\n        <div\r\n          key={endTime}\r\n          style={{ backgroundColor: tripMinOptions[endTime].color }}\r\n        ></div>,\r\n      );\r\n      times.push(<div key={endTime}>{endTime}</div>);\r\n    }\r\n\r\n    colors.push(\r\n      <div\r\n        key=\"default\"\r\n        style={{ backgroundColor: defaultLayerOptions.color }}\r\n      ></div>,\r\n    );\r\n\r\n    const tripMins = [];\r\n    for (let tripMin = 15; tripMin <= maxColoredTripMin; tripMin += 15) {\r\n      tripMins.push(tripMin);\r\n    }\r\n    tripMins.push(90);\r\n\r\n    return (\r\n      <div className=\"flex-screen\">\r\n        <AppBar position=\"relative\">\r\n          <Toolbar>\r\n            <SidebarButton />\r\n            <div className=\"page-title\">Isochrone</div>\r\n            <DateTimePanel />\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Map\r\n          center={this.initialCenter}\r\n          zoom={this.initialZoom}\r\n          className=\"isochrone-map\"\r\n          minZoom={5}\r\n          maxZoom={18}\r\n          onClick={this.handleMapClick}\r\n          ref={this.mapRef}\r\n        >\r\n          <TileLayer\r\n            attribution='Map tiles by <a href=\"http://stamen.com\">Stamen Design</a>, under <a href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a href=\"http://www.openstreetmap.org/copyright\">ODbL</a>.'\r\n            url=\"https://stamen-tiles.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}.png\"\r\n          />\r\n          {/* see http://maps.stamen.com for details */}\r\n          <Control position=\"topleft\" className=\"\">\r\n            <Grid container\r\n              className=\"isochrone-controls\"\r\n              direction=\"column\">\r\n              <Grid item>\r\n                <Typography variant=\"subtitle1\">Statistic</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Select\r\n                  value={this.state.stat}\r\n                  onChange={this.handleStatChange}\r\n                >\r\n                  <MenuItem value=\"p10\">10th percentile</MenuItem>\r\n                  <MenuItem value=\"median\">median</MenuItem>\r\n                  <MenuItem value=\"p90\">90th percentile</MenuItem>\r\n                </Select>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container\r\n              className=\"isochrone-controls\"\r\n              direction=\"column\">\r\n              <Grid item>\r\n                <Typography variant=\"subtitle1\">Max Trip Time</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Select\r\n                  value={this.state.maxTripMin}\r\n                  onChange={this.handleMaxTripMinChange}\r\n                >\r\n                  {tripMins.map(tripMin => (\r\n                    <MenuItem key={tripMin} value={tripMin}>\r\n                      {tripMin} minutes\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container\r\n              className=\"isochrone-controls\"\r\n              direction=\"column\">\r\n              <Grid item>\r\n                <Typography variant=\"subtitle1\">Routes</Typography>\r\n              </Grid>\r\n              <Grid container item\r\n                direction=\"row\"\r\n                alignItems=\"flex-start\">\r\n                <Grid item>\r\n                  <Button onClick={this.selectAllRoutesClicked}>all</Button>\r\n                  <Button onClick={this.selectNoRoutesClicked}>none</Button>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item>\r\n                <List className=\"isochrone-routes\">\r\n                  {(routes || []).map(route => this.makeRouteToggle(route))}\r\n                </List>\r\n              </Grid>\r\n            </Grid>\r\n          </Control>\r\n          <Control position=\"topright\">\r\n            {this.state.tripInfo ? (\r\n              <div className=\"isochrone-trip-info\">{this.state.tripInfo}</div>\r\n            ) : (\r\n              <div className=\"isochrone-instructions\">\r\n                {this.state.noData\r\n                  ? 'There is no data for the selected date. Choose another date.'\r\n                  : !this.state.latLng\r\n                  ? 'Click anywhere in the city to see the trip times from' +\r\n                    ' that point to the rest of the city via transit and walking.'\r\n                  : this.state.computing\r\n                  ? 'Computing...'\r\n                  : 'Click anywhere in the shaded area to see routes and trip times between the two points, or drag the blue pin to see trip times from a new point.'}\r\n              </div>\r\n            )}\r\n          </Control>\r\n          <Control position=\"bottomright\">\r\n            <div className=\"isochrone-legend\">\r\n              trip times (minutes)\r\n              <div className=\"isochrone-legend-colors\">{colors}</div>\r\n              <div className=\"isochrone-legend-times\">{times}</div>\r\n            </div>\r\n          </Control>\r\n          <Control position=\"bottomleft\">\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={this.resetMapClicked}\r\n              >\r\n                Clear map\r\n              </Button>\r\n            <br />\r\n            <br />\r\n          </Control>\r\n        </Map>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  routes: state.routes.routes,\r\n  date: state.routes.graphParams.date,\r\n  startTime: state.routes.graphParams.startTime,\r\n  endTime: state.routes.graphParams.endTime,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchRoutes: params => dispatch(fetchRoutes(params)),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps,\r\n)(Isochrone);\r\n","import React, { Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './App.css';\r\nimport About from './components/About';\r\nimport Landing from './components/Landing';\r\nimport NotFound from './components/NotFound';\r\nimport Dashboard from './screens/Dashboard';\r\nimport RouteScreen from './screens/RouteScreen';\r\nimport DataDiagnostic from './screens/DataDiagnostic';\r\nimport Isochrone from './screens/Isochrone';\r\n\r\nconst App = ({ page }) => {\r\n  const components = {\r\n    About: <About />,\r\n    Isochrone: <Isochrone />,\r\n    Landing: <Landing />,\r\n    Dashboard: <Dashboard />,\r\n    Route: <RouteScreen />,\r\n    DataDiagnostic: <DataDiagnostic />,\r\n    NotFound: <NotFound />,\r\n  };\r\n  return <Fragment>{components[page]}</Fragment>;\r\n};\r\n\r\nconst mapStateToProps = ({ page }) => ({ page });\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","import { handleGraphParams } from './actions';\r\nimport { Agencies } from './config';\r\nimport { ROUTE, DIRECTION, FROM_STOP, TO_STOP } from './routeUtil';\r\n\r\nexport default {\r\n  ABOUT: '/about',\r\n  LANDING: '/landing',\r\n  ISOCHRONE: '/isochrone',\r\n  DASHBOARD: '/',\r\n  DATADIAGNOSTIC: '/dataDiagnostic',\r\n  ROUTESCREEN: {\r\n    /*\r\n    Redux first router path syntax\r\n    https://github.com/faceyspacey/redux-first-router/issues/83\r\n    the : symbol signifies variables\r\n    the ? after the : means an optional paramter variable\r\n    ()* shows am optional parameter label\r\n    */\r\n    path: `/${ROUTE}/:routeId/(${DIRECTION})*/:directionId?/(${FROM_STOP})*/:startStopId?/(${TO_STOP})*/:endStopId?`,\r\n    thunk: async (dispatch, getState) => {\r\n      const { location } = getState();\r\n      const { routeId, directionId, startStopId, endStopId } = location.payload;\r\n\r\n      // todo: add agency to path to support multiple agencies\r\n      dispatch(\r\n        handleGraphParams({\r\n          agencyId: Agencies[0].id,\r\n          routeId,\r\n          directionId,\r\n          startStopId,\r\n          endStopId,\r\n        }),\r\n      );\r\n    },\r\n  },\r\n};\r\n","const initialState = {\r\n  graphData: null,\r\n  intervalData: null,\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'RECEIVED_GRAPH_DATA':\r\n      const payloadData = action.payload.data;\r\n      const routeMetrics = payloadData ? payloadData.routeMetrics : null;\r\n      const tripMetrics = routeMetrics ? routeMetrics.trip : null;\r\n      const intervalMetrics = tripMetrics ? tripMetrics.interval : null;\r\n      const timeRangeMetrics = tripMetrics ? tripMetrics.timeRanges : null;\r\n\r\n      return {\r\n        ...state,\r\n        err: null,\r\n        graphData: intervalMetrics,\r\n        intervalData: timeRangeMetrics,\r\n        graphParams: action.graphParams,\r\n      };\r\n    case 'RESET_GRAPH_DATA':\r\n      return { ...state, err: null, graphData: null };\r\n    case 'ERROR_GRAPH_DATA':\r\n      return { ...state, err: action.payload, graphData: null };\r\n    default:\r\n      break;\r\n  }\r\n  return state;\r\n};\r\n","import { NOT_FOUND } from 'redux-first-router';\r\n\r\nconst components = {\r\n  ABOUT: 'About',\r\n  ISOCHRONE: 'Isochrone',\r\n  LANDING: 'Landing',\r\n  DASHBOARD: 'Dashboard',\r\n  ROUTESCREEN: 'Route',\r\n  DATADIAGNOSTIC: 'DataDiagnostic',\r\n  [NOT_FOUND]: 'NotFound',\r\n};\r\n\r\nexport default (state = 'DASHBOARD', action = {}) =>\r\n  components[action.type] || state;\r\n","/* eslint-disable no-underscore-dangle */\r\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\r\nimport { connectRoutes } from 'redux-first-router';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport routesMap from './routesMap';\r\nimport * as reducers from './reducers';\r\n// import page from './reducers/page';\r\nimport * as actionCreators from './actions';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n  ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({ actionCreators })\r\n  : compose;\r\n\r\nexport default function configureStore(preloadedState) {\r\n  const { reducer, middleware, enhancer } = connectRoutes(routesMap);\r\n\r\n  const rootReducer = combineReducers({ ...reducers, location: reducer });\r\n  const middlewares = applyMiddleware(thunk, middleware);\r\n  const enhancers = composeEnhancers(enhancer, middlewares);\r\n\r\n  const store = createStore(rootReducer, preloadedState, enhancers);\r\n\r\n  return { store };\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport configureStore from './store';\r\n\r\nconst { store } = configureStore();\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\n// serviceWorker.unregister();\r\n"],"sourceRoot":""}